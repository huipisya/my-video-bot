import os
import tempfile
import asyncio
import logging
import uuid
import re
import hashlib
import json
import time
from pathlib import Path
from typing import Optional, Tuple, List
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from dotenv import load_dotenv
import yt_dlp
import instaloader
import sys
sys.stdout.reconfigure(encoding='utf-8')
IG_DEVICE_ID = str(uuid.uuid4())
# === üß∞ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === üîê –¢–û–ö–ï–ù –ò WEBHOOK ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

WEBHOOK_PATH = "/"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === üß† –•–†–ê–ù–ò–õ–ò–©–ï –ù–ê–°–¢–†–û–ï–ö ===
user_settings = {}

RATE_LIMIT_DELAY = {}  # {user_id: last_request_time}

# === üé® –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class VideoStates(StatesGroup):
    choosing_quality = State()

# === üì∫ –ö–ê–ß–ï–°–¢–í–ê –í–ò–î–ï–û ===
QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
    "1080p": 'bestvideo[ext=mp4][height<=1080]+bestaudio[ext=m4a]/best[height<=1080][ext=mp4]/best',
    "720p": 'bestvideo[ext=mp4][height<=720]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best',
    "480p": 'best[height<=480][ext=mp4]/best[ext=mp4]/best',
    "360p": 'best[height<=360][ext=mp4]/best[ext=mp4]/best'
}

# === üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í ===
def cleanup_file(file_path: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {Path(file_path).name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

def cleanup_files(files: List[str]):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
    for file_path in files:
        cleanup_file(file_path)

# === üõ† –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def check_rate_limit(user_id: int):
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∑–∞–ø—Ä–æ—Å –≤ 3 —Å–µ–∫—É–Ω–¥—ã"""
    now = time.time()
    last_time = RATE_LIMIT_DELAY.get(user_id, 0)
    if now - last_time < 3:
        delay = 3 - (now - last_time)
        logger.info(f"‚è±Ô∏è Rate limit –¥–ª—è user {user_id}: –∂–¥—ë–º {delay:.1f}—Å")
        await asyncio.sleep(delay)
    RATE_LIMIT_DELAY[user_id] = time.time()

def get_quality_setting(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return user_settings.get(user_id, "720p")

def set_quality_setting(user_id: int, quality: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_settings[user_id] = quality
    logger.info(f"üíæ –ö–∞—á–µ—Å—Ç–≤–æ '{quality}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è user {user_id}")

def get_ydl_opts(quality: str = "best") -> dict:
    opts = {
        'format': QUALITY_FORMATS.get(quality, QUALITY_FORMATS["best"]),
        'merge_output_format': 'mp4',
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
    }
    proxy = os.getenv("PROXY_URL")
    if proxy:
        opts['proxy'] = proxy
    return opts

def is_valid_url(url: str) -> bool:
    regex = re.compile(
        r'^(https?://)?(www\.)?'
        r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vm\.tiktok\.com|vt\.tiktok\.com)',
        re.IGNORECASE
    )
    return bool(re.match(regex, url))

def detect_platform(url: str) -> str:
    url_lower = url.lower()
    if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
        return 'youtube'
    elif 'tiktok.com' in url_lower:
        return 'tiktok'
    elif 'instagram.com' in url_lower:
        return 'instagram'
    return 'unknown'

async def download_file(url: str, save_path: str, timeout: int = 60) -> bool:
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                    return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {url}: {e}")
    return False

# === üì• –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –° INSTAGRAM ===

async def extract_instagram_shortcode(url: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç shortcode –∏–∑ URL Instagram
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã: /p/, /reel/, /reels/, /tv/, /share/
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    match = re.search(r'/(?:p|reel|reels|tv)/([A-Za-z0-9_-]+)', url)
    if match:
        shortcode = match.group(1)
        logger.info(f"üìå –ò–∑–≤–ª–µ—á—ë–Ω shortcode: {shortcode}")
        return shortcode
    
    # –î–ª—è /share/ –Ω—É–∂–Ω–æ —Ä–µ–∑–æ–ª–≤–∏—Ç—å —á–µ—Ä–µ–∑ yt-dlp
    if '/share/' in url:
        logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω /share/ —Ñ–æ—Ä–º–∞—Ç, —Ä–µ–∑–æ–ª–≤–∏–º —á–µ—Ä–µ–∑ yt-dlp...")
        try:
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'extract_flat': True,
                'socket_timeout': 10,
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                webpage_url = info.get('webpage_url', '')
                if webpage_url:
                    match = re.search(r'/(?:p|reel|reels|tv)/([A-Za-z0-9_-]+)', webpage_url)
                    if match:
                        shortcode = match.group(1)
                        logger.info(f"üìå –ò–∑–≤–ª–µ—á—ë–Ω shortcode –∏–∑ /share/: {shortcode}")
                        return shortcode
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∑–æ–ª–≤–∏—Ç—å /share/ —á–µ—Ä–µ–∑ yt-dlp: {e}")
    
    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å shortcode –∏–∑ URL")
    return None


async def download_instagram_ytdlp(url: str, quality: str, cookies_file: Optional[Path] = None) -> Optional[str]:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ yt-dlp —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies
    –†–∞–±–æ—Ç–∞–µ—Ç –≤ 90% —Å–ª—É—á–∞–µ–≤, –≤–∫–ª—é—á–∞—è 18+ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ cookies
    """
    try:
        logger.info("üîÑ Instagram: yt-dlp...")
        
        ydl_opts = {
            'format': 'best',
            'merge_output_format': 'mp4',
            'noplaylist': True,
            'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
            'quiet': False,
            'no_warnings': False,
            'socket_timeout': 30,
            'retries': 3,
            'fragment_retries': 3,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15',
                'Accept': '*/*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate, br',
                'Origin': 'https://www.instagram.com',
                'Referer': 'https://www.instagram.com/',
            },
            'geo_bypass': True,
            'age_limit': None,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
        if cookies_file and cookies_file.exists():
            ydl_opts['cookiefile'] = str(cookies_file)
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è cookies: {cookies_file.name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        proxy = os.getenv("PROXY_URL")
        if proxy:
            ydl_opts['proxy'] = proxy
            logger.debug(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏")
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            
            if temp_file and os.path.exists(temp_file):
                file_size = os.path.getsize(temp_file) / (1024 * 1024)
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp ({file_size:.1f} –ú–ë)")
                return temp_file
                
    except yt_dlp.utils.DownloadError as e:
        error_str = str(e).lower()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if 'inappropriate' in error_str or 'unavailable for certain audiences' in error_str:
            logger.warning("‚ö†Ô∏è yt-dlp: –∫–æ–Ω—Ç–µ–Ω—Ç 18+ (inappropriate content)")
            return None
        elif 'login required' in error_str or 'rate-limit' in error_str:
            logger.warning("‚ö†Ô∏è yt-dlp: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ rate-limit")
            return None
        
        logger.error(f"‚ùå yt-dlp error: {e}")
    except Exception as e:
        logger.error(f"‚ùå yt-dlp exception: {e}")
    
    return None


async def download_instagram_mobile_api(shortcode: str, cookies_dict: Optional[dict] = None) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ó–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ API Instagram
    –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å cookies –¥–ª—è 18+
    """
    try:
        logger.info("üîÑ Instagram: Mobile API...")
        
        api_url = f"https://www.instagram.com/api/v1/media/{shortcode}/info/"
        
        headers = {
            'User-Agent': 'Instagram 269.0.0.18.75 Android (30/11; 420dpi; 1080x2265; OnePlus; ONEPLUS A6000; OnePlus6; qcom; en_US; 314665256)',
            'Accept': '*/*',
            'Accept-Language': 'en-US',
            'X-IG-App-ID': '567067343352427',
            'X-IG-Device-ID': str(uuid.uuid4()),
            'X-IG-Android-ID': str(uuid.uuid4()),
            'Origin': 'https://www.instagram.com',
            'Referer': f'https://www.instagram.com/p/{shortcode}/',
        }
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=20)) as session:
            async with session.get(api_url, headers=headers, cookies=cookies_dict or {}) as resp:
                if resp.status == 404:
                    logger.warning("Mobile API: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    return None, None, None
                    
                if resp.status == 403:
                    logger.warning("Mobile API: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –≤–æ–∑–º–æ–∂–Ω–æ 18+ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                    return None, None, None
                    
                if resp.status != 200:
                    logger.warning(f"Mobile API: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None, None, None
                
                try:
                    data = await resp.json()
                except:
                    return None, None, None
                
                items = data.get('items', [])
                if not items:
                    return None, None, None
                
                media = items[0]
                media_type = media.get('media_type', 0)
                
                # –í–∏–¥–µ–æ (type 2)
                if media_type == 2:
                    video_versions = media.get('video_versions', [])
                    if video_versions:
                        video_url = video_versions[0].get('url')
                        if video_url:
                            video_path = os.path.join(tempfile.gettempdir(), f"ig_{shortcode}.mp4")
                            if await download_file(video_url, video_path, timeout=30):
                                logger.info("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (Mobile API)")
                                return (video_path, None, None)
                
                # –ö–∞—Ä—É—Å–µ–ª—å (type 8)
                elif media_type == 8:
                    carousel_media = media.get('carousel_media', [])
                    photos = []
                    videos = []
                    
                    for idx, item in enumerate(carousel_media[:10]):
                        item_type = item.get('media_type', 0)
                        
                        if item_type == 2:  # –í–∏–¥–µ–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏
                            video_versions = item.get('video_versions', [])
                            if video_versions:
                                video_url = video_versions[0].get('url')
                                if video_url:
                                    videos.append(video_url)
                                    
                        elif item_type == 1:  # –§–æ—Ç–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏
                            img_candidates = item.get('image_versions2', {}).get('candidates', [])
                            if img_candidates:
                                img_url = img_candidates[0].get('url')
                                if img_url:
                                    photo_path = os.path.join(tempfile.gettempdir(), f"ig_{shortcode}_{idx}.jpg")
                                    if await download_file(img_url, photo_path, timeout=15):
                                        photos.append(photo_path)
                    
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–∏–¥–µ–æ
                    if videos:
                        video_path = os.path.join(tempfile.gettempdir(), f"ig_{shortcode}.mp4")
                        if await download_file(videos[0], video_path, timeout=30):
                            logger.info("‚úÖ –í–∏–¥–µ–æ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ (Mobile API)")
                            return (video_path, None, None)
                    
                    if photos:
                        caption = media.get('caption', {})
                        description = caption.get('text', "üì∏ Instagram") if caption else "üì∏ Instagram"
                        logger.info(f"‚úÖ {len(photos)} —Ñ–æ—Ç–æ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ (Mobile API)")
                        return (None, photos, description)
                
                # –§–æ—Ç–æ (type 1)
                elif media_type == 1:
                    img_candidates = media.get('image_versions2', {}).get('candidates', [])
                    if img_candidates:
                        img_url = img_candidates[0].get('url')
                        if img_url:
                            photo_path = os.path.join(tempfile.gettempdir(), f"ig_{shortcode}.jpg")
                            if await download_file(img_url, photo_path, timeout=15):
                                caption = media.get('caption', {})
                                description = caption.get('text', "üì∏ Instagram") if caption else "üì∏ Instagram"
                                logger.info("‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ (Mobile API)")
                                return (None, [photo_path], description)
                                
    except asyncio.TimeoutError:
        logger.warning("‚è±Ô∏è Mobile API timeout")
    except Exception as e:
        logger.error(f"‚ùå Mobile API error: {e}")
    
    return None, None, None


def load_cookies_from_file(cookies_file: Path) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Netscape"""
    cookies = {}
    try:
        with open(cookies_file, 'r') as f:
            for line in f:
                if line.startswith('#') or not line.strip():
                    continue
                try:
                    parts = line.strip().split('\t')
                    if len(parts) >= 7:
                        cookies[parts[5]] = parts[6]
                except:
                    continue
        logger.debug(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies)} cookies –∏–∑ {cookies_file.name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookies: {e}")
    return cookies


async def download_instagram(url: str, quality: str = "best", user_id: Optional[int] = None) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Instagram –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
    1. yt-dlp –±–µ–∑ cookies (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
    2. yt-dlp —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ cookies (–¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
    3. yt-dlp —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ cookies (–¥–ª—è 18+ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
    4. Mobile API –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    
    Args:
        url: –°—Å—ã–ª–∫–∞ –Ω–∞ Instagram (–≤–∫–ª—é—á–∞—è /share/)
        quality: –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç.–∫. yt-dlp –±–µ—Ä–µ—Ç best)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö cookies
    
    Returns:
        (video_path, photos_list, description) –∏–ª–∏ (None, None, error_message)
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º shortcode (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç /share/)
    shortcode = await extract_instagram_shortcode(url)
    if not shortcode:
        return None, None, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞:\n‚Ä¢ instagram.com/p/...\n‚Ä¢ instagram.com/reel/...\n‚Ä¢ instagram.com/share/..."
    
    logger.info(f"üìå Instagram shortcode: {shortcode}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies –ü–ï–†–ï–î –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    global_cookies = Path("cookies.txt")
    user_cookies = Path(f"session/{user_id}_instagram_cookies.txt") if user_id else None
    
    has_global_cookies = global_cookies.exists()
    has_user_cookies = user_cookies and user_cookies.exists()
    
    # === –ú–ï–¢–û–î 1: yt-dlp –ë–ï–ó cookies (–ø—É–±–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç) ===
    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ 1/4: yt-dlp –±–µ–∑ cookies")
    result = await download_instagram_ytdlp(url, quality)
    if result and os.path.exists(result):
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)")
        return (result, None, None)
    
    # === –ú–ï–¢–û–î 2: yt-dlp –° –ì–õ–û–ë–ê–õ–¨–ù–´–ú–ò cookies ===
    if has_global_cookies:
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ 2/4: yt-dlp —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ cookies")
        result = await download_instagram_ytdlp(url, quality, global_cookies)
        if result and os.path.exists(result):
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ cookies)")
            return (result, None, None)
    else:
        logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ–ø—ã—Ç–∫–∏ 2/4: –≥–ª–æ–±–∞–ª—å–Ω—ã–µ cookies –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # === –ú–ï–¢–û–î 3: yt-dlp –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú–ò cookies (–¥–ª—è 18+) ===
    if has_user_cookies:
        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ 3/4: yt-dlp —Å cookies –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        result = await download_instagram_ytdlp(url, quality, user_cookies)
        if result and os.path.exists(result):
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ (cookies –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id})")
            return (result, None, None)
    else:
        logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ–ø—ã—Ç–∫–∏ 3/4: cookies –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # === –ú–ï–¢–û–î 4: Mobile API –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ===
    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ 4/4: Mobile API")
    
    # –ü—Ä–æ–±—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ cookies –µ—Å–ª–∏ –µ—Å—Ç—å
    cookies_dict = None
    if has_user_cookies:
        cookies_dict = load_cookies_from_file(user_cookies)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö, –ø—Ä–æ–±—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
    if not cookies_dict and has_global_cookies:
        cookies_dict = load_cookies_from_file(global_cookies)
    
    video_path, photos, description = await download_instagram_mobile_api(shortcode, cookies_dict)
    
    if video_path or photos:
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ (Mobile API)")
        return (video_path, photos, description)
    
    # === –í–°–ï –ú–ï–¢–û–î–´ –ù–ï –°–†–ê–ë–û–¢–ê–õ–ò ===
    logger.error("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not has_global_cookies and not has_user_cookies:
        error_msg = (
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç</b>\n\n"
            "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (18+).\n\n"
            "<b>–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è 18+ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>\n"
            "1. –í–æ–π–¥–∏—Ç–µ –≤ Instagram —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä\n"
            "2. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ cookies –≤ —Ñ–æ—Ä–º–∞—Ç–µ Netscape\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞\n\n"
            "<i>–û–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–±–µ–∑ 18+) —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –±–µ–∑ cookies</i>"
        )
    else:
        error_msg = (
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç</b>\n\n"
            "<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ Instagram –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n"
            "<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
            "1. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø—É–±–ª–∏—á–Ω—ã–π\n"
            "2. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ\n"
            "3. –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        )
    
    return None, None, error_msg

# === üì§ TIKTOK –§–û–¢–û ===
async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    try:
        clean_url = url.split('?')[0]
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Referer': 'https://www.tiktok.com/',
            'DNT': '1',
        }
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.get(clean_url, headers=headers, allow_redirects=True) as resp:
                if resp.status != 200:
                    return None, f"‚ùå TikTok –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}"
                html = await resp.text()

        json_match = re.search(r'<script id="__UNIVERSAL_DATA_FOR_REHYDRATION__" type="application/json">({.*})</script>', html)
        if not json_match:
            return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON-–±–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏"

        try:
            data = json.loads(json_match.group(1))
            item_info = data.get('__DEFAULT_SCOPE__', {}).get('webapp.photo.detail', {}).get('itemInfo', {})
            image_post = item_info.get('imagePost', {})
            images = image_post.get('images', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"

        if not images:
            return None, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö"

        photos = []
        for i, img in enumerate(images[:10]):
            img_url = img.get('imageURL', {}).get('urlList', [])
            if not img_url:
                continue
            url_to_download = img_url[0]
            photo_path = os.path.join(tempfile.gettempdir(), f"tiktok_photo_{i}.jpg")
            if await download_file(url_to_download, photo_path, timeout=15):
                photos.append(photo_path)

        if photos:
            return (photos, "üì∏ –§–æ—Ç–æ –∏–∑ TikTok")
        else:
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ"
    except asyncio.TimeoutError:
        return None, "‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã TikTok"
    except Exception as e:
        logger.error(f"‚ùå TikTok —Ñ–æ—Ç–æ –æ—à–∏–±–∫–∞: {e}")
        return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}"

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û ===
async def download_video_ytdlp(url: str, quality: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp...")
        ydl_opts = get_ydl_opts(quality)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {e}")
    return None

async def download_video_ytdlp_cookies(url: str, quality: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp —Å cookies...")
        cookies_file = Path("cookies.txt")
        if not cookies_file.exists():
            return None

        ydl_opts = get_ydl_opts(quality)
        ydl_opts['cookiefile'] = str(cookies_file)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp —Å cookies: {e}")
    return None

async def download_video_ytdlp_alt(url: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)...")
        ydl_opts = {
            'format': 'best',
            'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
            'quiet': True,
            'no_warnings': True
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: {e}")
    return None

async def download_video(url: str, quality: str = "best") -> Optional[str]:
    methods = [
        lambda: download_video_ytdlp(url, quality),
        lambda: download_video_ytdlp_cookies(url, quality),
        lambda: download_video_ytdlp_alt(url)
    ]
    for method in methods:
        result = await method()
        if result:
            return result
    return None

# === üì§ –û–¢–ü–†–ê–í–ö–ê ===
async def send_photos_with_caption(chat_id: int, photos: List[str], caption: str) -> bool:
    if not photos:
        return False
    try:
        if len(photos) == 1:
            await bot.send_photo(chat_id=chat_id, photo=FSInputFile(photos[0]), caption=caption)
        else:
            media_group = [
                types.InputMediaPhoto(media=FSInputFile(photo), caption=caption if i == 0 else None)
                for i, photo in enumerate(photos[:10])
            ]
            await bot.send_media_group(chat_id=chat_id, media=media_group)
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –≤ Telegram")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return False

# === üì§ –ó–ê–ì–†–£–ó–ö–ê –ù–ê –§–ê–ô–õ–û–û–ë–ú–ï–ù–ù–ò–ö–ò ===
async def upload_to_filebin(file_path: str) -> Optional[str]:
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ filebin.net...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                async with session.post('https://filebin.net/', data=data, params={'expiry': '3d'}) as resp:
                    if resp.status == 200:
                        text = await resp.text()
                        lines = text.strip().split('\n')
                        if lines and lines[0].strip().startswith('http') and 'filebin.net' in lines[0]:
                            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ filebin.net")
                            return lines[0].strip()
    except Exception as e:
        logger.error(f"‚ùå filebin.net: {e}")
    return None

async def upload_to_gofile(file_path: str) -> Optional[str]:
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ gofile.io...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=300)) as session:
            async with session.get('https://api.gofile.io/servers') as resp:
                if resp.status != 200:
                    return None
                server_data = await resp.json()
                if not server_data.get('data', {}).get('servers'):
                    return None
                server = server_data['data']['servers'][0]['name']

            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                upload_url = f'https://{server}.gofile.io/contents/uploadfile'
                async with session.post(upload_url, data=data) as upload_resp:
                    if upload_resp.status == 200:
                        result = await upload_resp.json()
                        if result.get('status') == 'ok':
                            return result['data']['downloadPage']
    except Exception as e:
        logger.error(f"‚ùå gofile.io: {e}")
    return None

async def send_video_or_link(chat_id: int, file_path: str, caption: str = "") -> bool:
    file_size = Path(file_path).stat().st_size
    size_mb = file_size / (1024 * 1024)

    if size_mb <= 50:
        try:
            await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
            logger.info(f"‚úÖ –í–∏–¥–µ–æ ({size_mb:.1f} –ú–ë) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")

    uploaders = [
        ('gofile.io', upload_to_gofile),
        ('filebin.net', upload_to_filebin),
    ]

    for name, uploader in uploaders:
        link = await uploader(file_path)
        if link:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ –§–∞–π–ª ({size_mb:.1f} –ú–ë) –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {name}\n"
                     f"üì• –°–∫–∞—á–∞—Ç—å: {link}\n"
                     f"‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"
            )
            return True

    await bot.send_message(
        chat_id=chat_id,
        text=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë).\n"
             f"–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    )
    return False

# === üß≠ –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    )

def settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –õ—É—á—à–µ–µ")],
            [KeyboardButton(text="üé¨ 1080p"), KeyboardButton(text="üì∫ 720p")],
            [KeyboardButton(text="‚ö° 480p"), KeyboardButton(text="üì± 360p")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# === üöÄ –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    current_quality = get_quality_setting(message.from_user.id)
    welcome_text = (
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram\n"
        "üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!\n\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current_quality.upper()}</b>"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )

@dp.message(VideoStates.choosing_quality, F.text.in_([
    "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p"
]))
async def set_quality(message: types.Message, state: FSMContext):
    quality_map = {
        "üåü –õ—É—á—à–µ–µ": "best",
        "üé¨ 1080p": "1080p",
        "üì∫ 720p": "720p",
        "‚ö° 480p": "480p",
        "üì± 360p": "360p"
    }
    set_quality_setting(message.from_user.id, quality_map[message.text])
    await message.answer(
        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{message.text}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

@dp.message(VideoStates.choosing_quality, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    current_quality = get_quality_setting(message.from_user.id)
    await message.answer(
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current_quality.upper()}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )

# === üîó –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–°–´–õ–û–ö ===
@dp.message(
    F.text &
    ~F.text.startswith("/") &
    ~F.text.in_([
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p", "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    ])
)
async def handle_link(message: types.Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, TikTok –∏–ª–∏ Instagram")
        return
    
    await check_rate_limit(message.from_user.id)
    platform = detect_platform(url)
    status_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {platform.upper()}...")
    user_quality = get_quality_setting(message.from_user.id)
    user_id = message.from_user.id
    temp_file = None
    temp_photos = []
    
    try:
        if platform == 'instagram':
            temp_file, photos, description = await download_instagram(url, user_quality, user_id)
            
            if description and "‚ùå" in description:
                await status_msg.edit_text(description, parse_mode="HTML")
                return
            if photos:
                temp_photos = photos
                await status_msg.delete()
                success = await send_photos_with_caption(message.chat.id, photos, description)
                cleanup_files(photos)
                return
            if temp_file and os.path.exists(temp_file):
                await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
                await send_video_or_link(message.chat.id, temp_file)
                await status_msg.delete()
                cleanup_file(temp_file)
                return
            if not temp_file and not photos:
                error_detail = description if description else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
                await status_msg.edit_text(error_detail, parse_mode="HTML")
                return
        
        elif platform == 'tiktok':
            if '/photo/' in url.lower():
                photos, description = await download_tiktok_photos(url)
                await status_msg.delete()
                if photos:
                    temp_photos = photos
                    success = await send_photos_with_caption(message.chat.id, photos, description)
                    cleanup_files(photos)
                else:
                    await message.answer(description)
                return
        
        temp_file = await download_video(url, user_quality)
        if not temp_file or not os.path.exists(temp_file):
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
            return
        
        await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        await send_video_or_link(message.chat.id, temp_file)
        await status_msg.delete()
        cleanup_file(temp_file)
    
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        try:
            await status_msg.edit_text(error_msg)
        except:
            pass
    finally:
        if temp_file:
            cleanup_file(temp_file)
        if temp_photos:
            cleanup_files(temp_photos)

# === üöÄ –ó–ê–ü–£–°–ö: –ì–ò–ë–ö–ò–ô –†–ï–ñ–ò–ú ===
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if WEBHOOK_HOST:
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        import aiohttp.web
        WEBHOOK_PATH = "/"
        WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

        app = aiohttp.web.Application()
        webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)

        port = int(os.getenv("PORT", 8000))
        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, host="0.0.0.0", port=port)
        await site.start()

        logger.info(f"üì° Webhook-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        try:
            while True:
                await asyncio.sleep(3600)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await bot.delete_webhook(drop_pending_updates=True)
            await runner.cleanup()
            await bot.session.close()
    else:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling (–ª–æ–∫–∞–ª—å–Ω–æ)")
        await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())