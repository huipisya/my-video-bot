import os
import tempfile
import asyncio
import logging
import uuid
import re
import json
import time
from pathlib import Path
from typing import Optional, Tuple, List, Dict
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InputMediaPhoto, InputMediaVideo
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
import yt_dlp
import sys

sys.stdout.reconfigure(encoding='utf-8')

# === üß∞ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === üîê –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
load_dotenv()

# === üìÅ –°–û–ó–î–ê–ù–ò–ï COOKIES –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
def init_cookies_from_env():
    """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª—ã cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway"""
    cookies_created = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies.txt (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
    cookies_txt_content = os.getenv("COOKIES_TXT")
    if cookies_txt_content:
        cookies_file = Path("cookies.txt")
        with open(cookies_file, 'w', encoding='utf-8') as f:
            f.write(cookies_txt_content)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies.txt")
        cookies_created += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies_bot1/2/3
    for i in range(1, 4):
        env_var = f"COOKIES_BOT{i}"
        cookies_content = os.getenv(env_var)
        if cookies_content:
            cookies_file = Path(f"cookies_bot{i}")
            with open(cookies_file, 'w', encoding='utf-8') as f:
                f.write(cookies_content)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies_bot{i}")
            cookies_created += 1
    
    if cookies_created == 0:
        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ cookies –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    else:
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {cookies_created} —Ñ–∞–π–ª–æ–≤ cookies")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º cookies
init_cookies_from_env()

# === üîê –¢–û–ö–ï–ù –ò WEBHOOK ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

WEBHOOK_PATH = "/"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === üß† –•–†–ê–ù–ò–õ–ò–©–ï –ù–ê–°–¢–†–û–ï–ö ===
user_settings = {}
RATE_LIMIT_DELAY = {}

# === üé® –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class VideoStates(StatesGroup):
    choosing_quality = State()

# === üì∫ –ö–ê–ß–ï–°–¢–í–ê –í–ò–î–ï–û ===
QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
    "1080p": 'bestvideo[ext=mp4][height<=1080]+bestaudio[ext=m4a]/best[height<=1080][ext=mp4]/best',
    "720p": 'bestvideo[ext=mp4][height<=720]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best',
    "480p": 'best[height<=480][ext=mp4]/best[ext=mp4]/best',
    "360p": 'best[height<=360][ext=mp4]/best[ext=mp4]/best'
}

# === üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í ===
def cleanup_file(file_path: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª"""
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            logger.debug(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {Path(file_path).name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

def cleanup_files(files: List[str]):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
    for file_path in files:
        cleanup_file(file_path)

# === üõ† –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def check_rate_limit(user_id: int):
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∑–∞–ø—Ä–æ—Å –≤ 3 —Å–µ–∫—É–Ω–¥—ã"""
    now = time.time()
    last_time = RATE_LIMIT_DELAY.get(user_id, 0)
    if now - last_time < 3:
        delay = 3 - (now - last_time)
        await asyncio.sleep(delay)
    RATE_LIMIT_DELAY[user_id] = time.time()

def get_quality_setting(user_id: int) -> str:
    return user_settings.get(user_id, "720p")

def set_quality_setting(user_id: int, quality: str):
    user_settings[user_id] = quality
    logger.info(f"üíæ –ö–∞—á–µ—Å—Ç–≤–æ '{quality}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è user {user_id}")

def get_ydl_opts(quality: str = "best") -> dict:
    opts = {
        'format': QUALITY_FORMATS.get(quality, QUALITY_FORMATS["best"]),
        'merge_output_format': 'mp4',
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
    }
    proxy = os.getenv("PROXY_URL")
    if proxy:
        opts['proxy'] = proxy
    return opts

def is_valid_url(url: str) -> bool:
    regex = re.compile(
        r'^(https?://)?(www\.)?'
        r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vm\.tiktok\.com|vt\.tiktok\.com)',
        re.IGNORECASE
    )
    return bool(re.match(regex, url))

def detect_platform(url: str) -> str:
    url_lower = url.lower()
    if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
        return 'youtube'
    elif 'tiktok.com' in url_lower:
        return 'tiktok'
    elif 'instagram.com' in url_lower:
        return 'instagram'
    return 'unknown'

async def download_file(url: str, save_path: str, timeout: int = 60) -> bool:
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                    return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {url}: {e}")
    return False

# === üì∏ –ù–û–í–´–ô –†–ê–ó–î–ï–õ INSTAGRAM ===

async def extract_instagram_shortcode(url: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç shortcode –∏–∑ URL Instagram"""
    match = re.search(r'/(?:p|reel|reels|tv)/([A-Za-z0-9_-]+)', url)
    if match:
        shortcode = match.group(1)
        logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω shortcode: {shortcode}")
        return shortcode
    
    if '/share/' in url:
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(url, allow_redirects=True) as resp:
                    final_url = str(resp.url)
                    match = re.search(r'/(?:p|reel|reels|tv)/([A-Za-z0-9_-]+)', final_url)
                    if match:
                        shortcode = match.group(1)
                        logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω shortcode –∏–∑ /share/: {shortcode}")
                        return shortcode
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∑–æ–ª–≤–∏—Ç—å /share/: {e}")
    
    return None


def load_cookies_from_file(cookies_file: Path) -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ —Ñ–∞–π–ª–∞"""
    cookies = {}
    try:
        with open(cookies_file, 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith('#') or not line.strip():
                    continue
                try:
                    parts = line.strip().split('\t')
                    if len(parts) >= 7:
                        cookies[parts[5]] = parts[6]
                except:
                    continue
        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies)} cookies")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookies: {e}")
    return cookies


async def download_instagram_mobile_public(shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str], Optional[str]]:
    """
    –ü—É–±–ª–∏—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Mobile API
    Returns: (video_path, photos_list, description, error_code)
    """
    try:
        api_url = f"https://www.instagram.com/api/v1/media/{shortcode}/info/"
        
        headers = {
            'User-Agent': 'Instagram 269.0.0.18.75 Android (30/11; 420dpi; 1080x2265; OnePlus; ONEPLUS A6000; OnePlus6; qcom; en_US; 314665256)',
            'Accept': '*/*',
            'Accept-Language': 'en-US',
            'X-IG-App-ID': '567067343352427',
            'X-IG-Device-ID': str(uuid.uuid4()),
        }
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
            async with session.get(api_url, headers=headers) as resp:
                if resp.status == 404:
                    logger.warning("Mobile API: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None, None, None, '404'
                
                if resp.status == 403:
                    logger.info("Mobile API: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                    return None, None, None, '403'
                
                if resp.status != 200:
                    logger.warning(f"Mobile API: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None, None, None, 'other'
                
                try:
                    data = await resp.json()
                except:
                    return None, None, None, 'other'
                
                items = data.get('items', [])
                if not items:
                    return None, None, None, 'other'
                
                media = items[0]
                media_type = media.get('media_type', 0)
                
                caption = media.get('caption')
                description = caption.get('text', 'üì∏ Instagram') if caption else 'üì∏ Instagram'
                description = description[:200] + '...' if len(description) > 200 else description
                
                # –í–ò–î–ï–û
                if media_type == 2:
                    video_versions = media.get('video_versions', [])
                    if video_versions:
                        video_url = video_versions[0].get('url')
                        if video_url:
                            video_path = os.path.join(tempfile.gettempdir(), f"ig_{shortcode}.mp4")
                            if await download_file(video_url, video_path, timeout=30):
                                logger.info("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (–ø—É–±–ª–∏—á–Ω–æ)")
                                return (video_path, None, None, None)
                
                # –ö–ê–†–£–°–ï–õ–¨
                elif media_type == 8:
                    carousel_media = media.get('carousel_media', [])
                    all_media = []
                    
                    for idx, item in enumerate(carousel_media[:10]):
                        item_type = item.get('media_type', 0)
                        
                        if item_type == 2:  # –í–∏–¥–µ–æ
                            video_versions = item.get('video_versions', [])
                            if video_versions:
                                video_url = video_versions[0].get('url')
                                if video_url:
                                    video_path = os.path.join(tempfile.gettempdir(), f"ig_{shortcode}_v{idx}.mp4")
                                    if await download_file(video_url, video_path, timeout=30):
                                        all_media.append(video_path)
                        
                        elif item_type == 1:  # –§–æ—Ç–æ
                            img_candidates = item.get('image_versions2', {}).get('candidates', [])
                            if img_candidates:
                                img_url = img_candidates[0].get('url')
                                if img_url:
                                    photo_path = os.path.join(tempfile.gettempdir(), f"ig_{shortcode}_p{idx}.jpg")
                                    if await download_file(img_url, photo_path, timeout=15):
                                        all_media.append(photo_path)
                    
                    if all_media:
                        logger.info(f"‚úÖ –ö–∞—Ä—É—Å–µ–ª—å: {len(all_media)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        return (None, all_media, description, None)
                
                # –§–û–¢–û
                elif media_type == 1:
                    img_candidates = media.get('image_versions2', {}).get('candidates', [])
                    if img_candidates:
                        img_url = img_candidates[0].get('url')
                        if img_url:
                            photo_path = os.path.join(tempfile.gettempdir(), f"ig_{shortcode}.jpg")
                            if await download_file(img_url, photo_path, timeout=15):
                                logger.info("‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ (–ø—É–±–ª–∏—á–Ω–æ)")
                                return (None, [photo_path], description, None)
    
    except Exception as e:
        logger.error(f"Mobile API error: {e}")
    
    return None, None, None, 'other'


async def download_instagram_mobile_cookies(shortcode: str, cookies_dict: Dict[str, str]) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    try:
        api_url = f"https://www.instagram.com/api/v1/media/{shortcode}/info/"
        
        headers = {
            'User-Agent': 'Instagram 269.0.0.18.75 Android (30/11; 420dpi; 1080x2265; OnePlus; ONEPLUS A6000; OnePlus6; qcom; en_US; 314665256)',
            'Accept': '*/*',
            'X-IG-App-ID': '567067343352427',
            'X-IG-Device-ID': str(uuid.uuid4()),
        }
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
            async with session.get(api_url, headers=headers, cookies=cookies_dict) as resp:
                if resp.status != 200:
                    return None, None, None
                
                data = await resp.json()
                items = data.get('items', [])
                if not items:
                    return None, None, None
                
                media = items[0]
                media_type = media.get('media_type', 0)
                
                caption = media.get('caption')
                description = caption.get('text', 'üì∏ Instagram') if caption else 'üì∏ Instagram'
                description = description[:200] + '...' if len(description) > 200 else description
                
                # –í–ò–î–ï–û
                if media_type == 2:
                    video_versions = media.get('video_versions', [])
                    if video_versions:
                        video_url = video_versions[0].get('url')
                        if video_url:
                            video_path = os.path.join(tempfile.gettempdir(), f"ig_auth_{shortcode}.mp4")
                            if await download_file(video_url, video_path, timeout=30):
                                logger.info("‚úÖ –í–∏–¥–µ–æ (—Å cookies)")
                                return (video_path, None, None)
                
                # –ö–ê–†–£–°–ï–õ–¨
                elif media_type == 8:
                    carousel_media = media.get('carousel_media', [])
                    all_media = []
                    
                    for idx, item in enumerate(carousel_media[:10]):
                        item_type = item.get('media_type', 0)
                        
                        if item_type == 2:
                            video_versions = item.get('video_versions', [])
                            if video_versions:
                                video_url = video_versions[0].get('url')
                                if video_url:
                                    video_path = os.path.join(tempfile.gettempdir(), f"ig_auth_{shortcode}_v{idx}.mp4")
                                    if await download_file(video_url, video_path, timeout=30):
                                        all_media.append(video_path)
                        
                        elif item_type == 1:
                            img_candidates = item.get('image_versions2', {}).get('candidates', [])
                            if img_candidates:
                                img_url = img_candidates[0].get('url')
                                if img_url:
                                    photo_path = os.path.join(tempfile.gettempdir(), f"ig_auth_{shortcode}_p{idx}.jpg")
                                    if await download_file(img_url, photo_path, timeout=15):
                                        all_media.append(photo_path)
                    
                    if all_media:
                        logger.info(f"‚úÖ –ö–∞—Ä—É—Å–µ–ª—å (cookies): {len(all_media)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        return (None, all_media, description)
                
                # –§–û–¢–û
                elif media_type == 1:
                    img_candidates = media.get('image_versions2', {}).get('candidates', [])
                    if img_candidates:
                        img_url = img_candidates[0].get('url')
                        if img_url:
                            photo_path = os.path.join(tempfile.gettempdir(), f"ig_auth_{shortcode}.jpg")
                            if await download_file(img_url, photo_path, timeout=15):
                                logger.info("‚úÖ –§–æ—Ç–æ (cookies)")
                                return (None, [photo_path], description)
    
    except Exception as e:
        logger.error(f"Mobile API (cookies) error: {e}")
    
    return None, None, None


async def download_instagram_ytdlp_cookies(url: str, cookies_file: Path) -> Optional[str]:
    """yt-dlp —Å cookies (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)"""
    try:
        ydl_opts = {
            'format': 'best',
            'merge_output_format': 'mp4',
            'noplaylist': True,
            'outtmpl': os.path.join(tempfile.gettempdir(), 'ig_ytdlp_%(id)s.%(ext)s'),
            'quiet': True,
            'no_warnings': True,
            'cookiefile': str(cookies_file),
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            
            if temp_file and os.path.exists(temp_file):
                logger.info("‚úÖ yt-dlp + cookies")
                return temp_file
    
    except Exception as e:
        logger.error(f"yt-dlp error: {e}")
    
    return None


async def download_instagram(url: str, quality: str = "best", user_id: Optional[int] = None) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Instagram
    –õ–æ–≥–∏–∫–∞: –ø—É–±–ª–∏—á–Ω–æ ‚Üí cookies –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Üí yt-dlp
    """
    shortcode = await extract_instagram_shortcode(url)
    if not shortcode:
        return None, None, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram"
    
    logger.info(f"üìå Instagram: {shortcode}")
    
    # –®–ê–ì 1: –ü–£–ë–õ–ò–ß–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï
    logger.info("üîÑ –ü—É–±–ª–∏—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
    video_path, photos, description, error_code = await download_instagram_mobile_public(shortcode)
    
    if video_path or photos:
        return (video_path, photos, description)
    
    if error_code == '404':
        return None, None, "‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω"
    
    # –®–ê–ì 2: –¢–†–ï–ë–£–ï–¢–°–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    if error_code == '403' or error_code == 'other':
        logger.info("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies...")
        
        cookies_files = []
        if Path("cookies.txt").exists():
            cookies_files.append(Path("cookies.txt"))
        for i in range(1, 4):
            cookies_file = Path(f"cookies_bot{i}")
            if cookies_file.exists():
                cookies_files.append(cookies_file)
        
        if not cookies_files:
            return None, None, (
                "‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞—â–∏—â—ë–Ω (18+ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π)\n\n"
                "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã cookies."
            )
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π cookies
        for cookies_file in cookies_files:
            logger.info(f"üîÑ {cookies_file.name}...")
            cookies_dict = load_cookies_from_file(cookies_file)
            
            if not cookies_dict:
                continue
            
            video_path, photos, description = await download_instagram_mobile_cookies(shortcode, cookies_dict)
            if video_path or photos:
                return (video_path, photos, description)
        
        # –®–ê–ì 3: YT-DLP
        logger.info("üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: yt-dlp...")
        for cookies_file in cookies_files:
            result = await download_instagram_ytdlp_cookies(url, cookies_file)
            if result:
                return (result, None, None)
        
        return None, None, (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª—ë–Ω\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
        )
    
    return None, None, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏"


async def send_instagram_content(chat_id: int, video_path: Optional[str], photos: Optional[List[str]], description: Optional[str]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ Instagram –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ
        if video_path and not photos:
            file_size_mb = os.path.getsize(video_path) / (1024 * 1024)
            if file_size_mb <= 50:
                await bot.send_video(
                    chat_id=chat_id,
                    video=FSInputFile(video_path),
                    caption=description[:1024] if description else None
                )
                return True
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"üì¶ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size_mb:.1f} –ú–ë)"
                )
                return False
        
        # –ö–∞—Ä—É—Å–µ–ª—å
        elif photos and len(photos) > 1:
            media_group = []
            
            for idx, media_path in enumerate(photos[:10]):
                ext = Path(media_path).suffix.lower()
                
                if ext in ['.mp4', '.mov']:
                    media_group.append(
                        InputMediaVideo(
                            media=FSInputFile(media_path),
                            caption=description[:1024] if idx == 0 and description else None
                        )
                    )
                else:
                    media_group.append(
                        InputMediaPhoto(
                            media=FSInputFile(media_path),
                            caption=description[:1024] if idx == 0 and description else None
                        )
                    )
            
            await bot.send_media_group(chat_id=chat_id, media=media_group)
            return True
        
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        elif photos and len(photos) == 1:
            await bot.send_photo(
                chat_id=chat_id,
                photo=FSInputFile(photos[0]),
                caption=description[:1024] if description else None
            )
            return True
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

# === üì§ TIKTOK –§–û–¢–û ===
async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    try:
        clean_url = url.split('?')[0]
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Referer': 'https://www.tiktok.com/',
        }
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.get(clean_url, headers=headers, allow_redirects=True) as resp:
                if resp.status != 200:
                    return None, f"‚ùå TikTok –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}"
                html = await resp.text()

        json_match = re.search(r'<script id="__UNIVERSAL_DATA_FOR_REHYDRATION__" type="application/json">({.*})</script>', html)
        if not json_match:
            return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON-–±–ª–æ–∫"

        try:
            data = json.loads(json_match.group(1))
            item_info = data.get('__DEFAULT_SCOPE__', {}).get('webapp.photo.detail', {}).get('itemInfo', {})
            image_post = item_info.get('imagePost', {})
            images = image_post.get('images', [])
        except Exception as e:
            return None, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"

        if not images:
            return None, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        photos = []
        for i, img in enumerate(images[:10]):
            img_url = img.get('imageURL', {}).get('urlList', [])
            if not img_url:
                continue
            photo_path = os.path.join(tempfile.gettempdir(), f"tiktok_photo_{i}.jpg")
            if await download_file(img_url[0], photo_path, timeout=15):
                photos.append(photo_path)

        if photos:
            return (photos, "üì∏ TikTok")
        else:
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ"
    except Exception as e:
        return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}"

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û (YouTube, TikTok) ===
async def download_video(url: str, quality: str = "best") -> Optional[str]:
    try:
        logger.info("üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp...")
        ydl_opts = get_ydl_opts(quality)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp: {e}")
    return None

# === üì§ –û–¢–ü–†–ê–í–ö–ê –í–ò–î–ï–û ===
async def send_video_or_message(chat_id: int, file_path: str, caption: str = "") -> bool:
    file_size = Path(file_path).stat().st_size
    size_mb = file_size / (1024 * 1024)

    if size_mb <= 50:
        try:
            await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
            logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({size_mb:.1f} –ú–ë)")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    await bot.send_message(
        chat_id=chat_id,
        text=f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size_mb:.1f} –ú–ë)"
    )
    return False

# === üß≠ –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    )

def settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –õ—É—á—à–µ–µ")],
            [KeyboardButton(text="üé¨ 1080p"), KeyboardButton(text="üì∫ 720p")],
            [KeyboardButton(text="‚ö° 480p"), KeyboardButton(text="üì± 360p")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# === üöÄ –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    current_quality = get_quality_setting(message.from_user.id)
    welcome_text = (
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram (–ø–æ—Å—Ç—ã, reels, –∫–∞—Ä—É—Å–µ–ª–∏)\n\n"
        "üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!\n\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current_quality.upper()}</b>"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )

@dp.message(VideoStates.choosing_quality, F.text.in_([
    "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p"
]))
async def set_quality(message: types.Message, state: FSMContext):
    quality_map = {
        "üåü –õ—É—á—à–µ–µ": "best",
        "üé¨ 1080p": "1080p",
        "üì∫ 720p": "720p",
        "‚ö° 480p": "480p",
        "üì± 360p": "360p"
    }
    set_quality_setting(message.from_user.id, quality_map[message.text])
    await message.answer(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{message.text}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

@dp.message(VideoStates.choosing_quality, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    current_quality = get_quality_setting(message.from_user.id)
    await message.answer(
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current_quality.upper()}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )

# === üîó –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–°–´–õ–û–ö ===
@dp.message(
    F.text &
    ~F.text.startswith("/") &
    ~F.text.in_([
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p", "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    ])
)
async def handle_link(message: types.Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, TikTok –∏–ª–∏ Instagram")
        return
    
    await check_rate_limit(message.from_user.id)
    platform = detect_platform(url)
    status_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {platform.upper()}...")
    user_quality = get_quality_setting(message.from_user.id)
    
    temp_file = None
    temp_photos = []
    
    try:
        # === INSTAGRAM ===
        if platform == 'instagram':
            video_path, photos, description = await download_instagram(url, user_quality, message.from_user.id)
            
            # –û—à–∏–±–∫–∞
            if description and "‚ùå" in description:
                await status_msg.edit_text(description, parse_mode="HTML")
                return
            
            # –£—Å–ø–µ—Ö
            if video_path or photos:
                await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
                temp_file = video_path
                temp_photos = photos if photos else []
                
                success = await send_instagram_content(message.chat.id, video_path, photos, description)
                
                if success:
                    await status_msg.delete()
                else:
                    await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
                
                # –û—á–∏—Å—Ç–∫–∞
                if temp_file:
                    cleanup_file(temp_file)
                if temp_photos:
                    cleanup_files(temp_photos)
                return
            
            # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            return
        
        # === TIKTOK –§–û–¢–û ===
        elif platform == 'tiktok' and '/photo/' in url.lower():
            photos, description = await download_tiktok_photos(url)
            await status_msg.delete()
            
            if photos:
                temp_photos = photos
                media_group = [
                    InputMediaPhoto(
                        media=FSInputFile(photo),
                        caption=description if i == 0 else None
                    )
                    for i, photo in enumerate(photos[:10])
                ]
                await bot.send_media_group(chat_id=message.chat.id, media=media_group)
                cleanup_files(photos)
            else:
                await message.answer(description)
            return
        
        # === YOUTUBE / TIKTOK –í–ò–î–ï–û ===
        temp_file = await download_video(url, user_quality)
        
        if not temp_file or not os.path.exists(temp_file):
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
            return
        
        await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        await send_video_or_message(message.chat.id, temp_file)
        await status_msg.delete()
        cleanup_file(temp_file)
    
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        try:
            await status_msg.edit_text(error_msg)
        except:
            pass
    finally:
        if temp_file:
            cleanup_file(temp_file)
        if temp_photos:
            cleanup_files(temp_photos)

# === üöÄ –ó–ê–ü–£–°–ö ===
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    if WEBHOOK_HOST:
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        import aiohttp.web
        
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

        app = aiohttp.web.Application()
        webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)

        port = int(os.getenv("PORT", 8000))
        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, host="0.0.0.0", port=port)
        await site.start()

        logger.info(f"üì° Webhook-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        try:
            while True:
                await asyncio.sleep(3600)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await bot.delete_webhook(drop_pending_updates=True)
            await runner.cleanup()
            await bot.session.close()
    else:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é –≤ —Ä–µ–∂–∏–º–µ long polling")
        await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())