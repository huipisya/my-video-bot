import os
import tempfile
import asyncio
import logging
import uuid
import re
import json
import time
from pathlib import Path
from typing import Optional, Tuple, List, Dict
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InputMediaPhoto, InputMediaVideo
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
import yt_dlp
import sys
from playwright.async_api import async_playwright, Browser, BrowserContext, Page
sys.stdout.reconfigure(encoding='utf-8')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
load_dotenv()

def init_cookies_from_env():
    cookies_created = 0
    cookies_txt_content = os.getenv("COOKIES_TXT")
    if cookies_txt_content:
        cookies_file = Path("cookies.txt")
        with open(cookies_file, 'w', encoding='utf-8') as f:
            f.write(cookies_txt_content)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies.txt")
        cookies_created += 1
    for i in range(1, 4):
        env_var = f"COOKIES_BOT{i}"
        cookies_content = os.getenv(env_var)
        if cookies_content:
            cookies_file = Path(f"cookies_bot{i}")
            with open(cookies_file, 'w', encoding='utf-8') as f:
                f.write(cookies_content)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies_bot{i}")
            cookies_created += 1
    youtube_cookies = os.getenv("COOKIES_YOUTUBE")
    if youtube_cookies:
        cookies_file = Path("cookies_youtube.txt")
        with open(cookies_file, 'w', encoding='utf-8') as f:
            if not youtube_cookies.strip().startswith('#'):
                f.write("# Netscape HTTP Cookie File\n")
            f.write(youtube_cookies)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies_youtube.txt")
        cookies_created += 1
    instagram_cookies = os.getenv("COOKIES_INSTAGRAM")
    if instagram_cookies:
        cookies_file = Path("cookies_instagram.txt")
        with open(cookies_file, 'w', encoding='utf-8') as f:
            if not instagram_cookies.strip().startswith('#'):
                f.write("# Netscape HTTP Cookie File\n")
            f.write(instagram_cookies)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies_instagram.txt")
        cookies_created += 1
    if cookies_created == 0:
        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ cookies –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    else:
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {cookies_created} —Ñ–∞–π–ª–æ–≤ cookies")

init_cookies_from_env()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

WEBHOOK_PATH = "/"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_settings = {}
RATE_LIMIT_DELAY = {}

IG_BROWSER: Optional[Browser] = None
IG_CONTEXT: Optional[BrowserContext] = None
IG_PLAYWRIGHT_READY = False

async def init_instagram_playwright():
    global IG_BROWSER, IG_CONTEXT, IG_PLAYWRIGHT_READY
    logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Instagram Playwright...")
    try:
        pw = await async_playwright().start()
        IG_BROWSER = await pw.chromium.launch(headless=True)
        cookies_to_load = []
        instagram_cookies_content = os.getenv("COOKIES_INSTAGRAM") or os.getenv("COOKIES_TXT")
        if instagram_cookies_content:
            logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º Instagram cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Playwright")
            try:
                lines = instagram_cookies_content.strip().split('\n')
                for line in lines:
                    if line.startswith('#') or not line.strip():
                        continue
                    parts = line.strip().split('\t')
                    if len(parts) >= 7:
                        cookies_to_load.append({
                            "name": parts[5],
                            "value": parts[6],
                            "domain": parts[0],
                            "path": parts[2],
                            "expires": int(parts[4]) if parts[4].isdigit() else None,
                            "httpOnly": bool(int(parts[3])),
                            "secure": bool(int(parts[1]))
                        })
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {e}")
        else:
            logger.info(f"üç™ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è COOKIES_INSTAGRAM/COOKIES_TXT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è Playwright, –∑–∞–ø—É—Å–∫ –±–µ–∑ cookies.")
        IG_CONTEXT = await IG_BROWSER.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.5993.118 Safari/537.36'
        )
        if cookies_to_load:
            await IG_CONTEXT.add_cookies(cookies_to_load)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_to_load)} Instagram cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright.")
        IG_PLAYWRIGHT_READY = True
        logger.info("‚úÖ Instagram Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Instagram Playwright: {e}")
        IG_PLAYWRIGHT_READY = False
        if IG_BROWSER:
            await IG_BROWSER.close()
            IG_BROWSER = None
        if IG_CONTEXT:
            await IG_CONTEXT.close()
            IG_CONTEXT = None

YT_BROWSER: Optional[Browser] = None
YT_CONTEXT: Optional[BrowserContext] = None
YT_PLAYWRIGHT_READY = False

async def init_youtube_playwright():
    global YT_BROWSER, YT_CONTEXT, YT_PLAYWRIGHT_READY
    logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube Playwright...")
    try:
        pw = await async_playwright().start()
        YT_BROWSER = await pw.chromium.launch(headless=True)
        cookies_to_load = []
        cookie_file_path = Path("cookies_youtube.txt")
        if cookie_file_path.exists():
            logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º YouTube cookies –∏–∑ {cookie_file_path.name}")
            try:
                with open(cookie_file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    for line in lines:
                        if line.startswith('#') or not line.strip():
                            continue
                        parts = line.strip().split('\t')
                        if len(parts) >= 7:
                            cookies_to_load.append({
                                "name": parts[5],
                                "value": parts[6],
                                "domain": parts[0],
                                "path": parts[2],
                                "expires": int(parts[4]) if parts[4].isdigit() else None,
                                "httpOnly": bool(int(parts[3])),
                                "secure": bool(int(parts[1]))
                            })
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ {cookie_file_path.name} –¥–ª—è Playwright: {e}")
        else:
            logger.info(f"üç™ –§–∞–π–ª {cookie_file_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Playwright.")
        YT_CONTEXT = await YT_BROWSER.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        )
        if cookies_to_load:
            await YT_CONTEXT.add_cookies(cookies_to_load)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_to_load)} cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç YouTube Playwright.")
        YT_PLAYWRIGHT_READY = True
        logger.info("‚úÖ YouTube Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YouTube Playwright: {e}")
        YT_PLAYWRIGHT_READY = False
        if YT_BROWSER:
            await YT_BROWSER.close()
            YT_BROWSER = None
        if YT_CONTEXT:
            await YT_CONTEXT.close()
            YT_CONTEXT = None

class VideoStates(StatesGroup):
    choosing_quality = State()

QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio/best',
    "1080p": 'bestvideo[ext=mp4][height<=1920][width<=1920]+bestaudio[ext=m4a]/bestvideo[height<=1920]+bestaudio/best',
    "720p": 'bestvideo[ext=mp4][height<=1280][width<=1280]+bestaudio[ext=m4a]/bestvideo[height<=1280]+bestaudio/best',
    "480p": 'bestvideo[ext=mp4][height<=854][width<=854]+bestaudio[ext=m4a]/bestvideo[height<=854]+bestaudio/best',
    "360p": 'bestvideo[ext=mp4][height<=640][width<=640]+bestaudio[ext=m4a]/bestvideo[height<=640]+bestaudio/best'
}

def cleanup_file(file_path: str):
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            logger.debug(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {Path(file_path).name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

def cleanup_files(files: List[str]):
    for file_path in files:
        cleanup_file(file_path)

async def check_rate_limit(user_id: int):
    now = time.time()
    last_time = RATE_LIMIT_DELAY.get(user_id, 0)
    if now - last_time < 3:
        delay = 3 - (now - last_time)
        await asyncio.sleep(delay)
    RATE_LIMIT_DELAY[user_id] = time.time()

def get_quality_setting(user_id: int) -> str:
    return user_settings.get(user_id, "720p")

def set_quality_setting(user_id: int, quality: str):
    user_settings[user_id] = quality
    logger.info(f"üíæ –ö–∞—á–µ—Å—Ç–≤–æ '{quality}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è user {user_id}")

def get_ydl_opts(quality: str = "best", use_youtube_cookies: bool = True) -> dict:
    opts = {
        'format': QUALITY_FORMATS.get(quality, QUALITY_FORMATS["best"]),
        'merge_output_format': 'mp4',
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
    }
    if use_youtube_cookies and Path("cookies_youtube.txt").exists():
        opts['cookiefile'] = 'cookies_youtube.txt'
        logger.info("üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º YouTube cookies (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)")
    elif use_youtube_cookies:
         logger.debug("üç™ YouTube cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
    proxy = os.getenv("PROXY_URL")
    if proxy:
        opts['proxy'] = proxy
    return opts

def is_valid_url(url: str) -> bool:
    regex = re.compile(
        r'^(https?://)?(www\.)?'
        r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vm\.tiktok\.com|vt\.tiktok\.com)',
        re.IGNORECASE
    )
    return bool(re.match(regex, url))

def detect_platform(url: str) -> str:
    url_lower = url.lower()
    if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
        return 'youtube'
    elif 'tiktok.com' in url_lower:
        return 'tiktok'
    elif 'instagram.com' in url_lower:
        return 'instagram'
    return 'unknown'

async def download_file(url: str, save_path: str, timeout: int = 60) -> bool:
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                    return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {url}: {e}")
    return False

import random
USER_AGENTS_INSTAGRAM = [
    'Instagram 269.0.0.18.75 Android (30/11; 420dpi; 1080x2265; OnePlus; ONEPLUS A6000; OnePlus6; qcom; en_US; 314665256)',
    'Instagram 275.0.0.27.98 Android (31/12; 480dpi; 1080x2400; Samsung; SM-G998B; p3q; exynos2100; en_US)',
    'Instagram 280.0.0.33.109 Android (32/13; 560dpi; 1440x3120; Google; Pixel 7 Pro; cheetah; tensor; en_US)',
]

async def extract_instagram_shortcode(url: str) -> Optional[Tuple[str, bool]]:
    url_lower = url.lower()
    is_reel = '/reel/' in url_lower or '/reels/' in url_lower
    match = re.search(r'/(?:p|reel|reels|tv)/([A-Za-z0-9_-]+)', url)
    if match:
        shortcode = match.group(1).split('?')[0]
        logger.info(f"üìå Shortcode: {shortcode} ({'REEL' if is_reel else 'POST'})")
        return (shortcode, is_reel)
    if '/share/' in url or 'instagram.com/s/' in url_lower:
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            }
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
                async with session.get(url, headers=headers, allow_redirects=True) as resp:
                    final_url = str(resp.url)
                    final_url_lower = final_url.lower()
                    is_reel = '/reel/' in final_url_lower or '/reels/' in final_url_lower
                    match = re.search(r'/(?:p|reel|reels|tv)/([A-Za-z0-9_-]+)', final_url)
                    if match:
                        shortcode = match.group(1).split('?')[0]
                        logger.info(f"‚úÖ Shortcode: {shortcode}")
                        return (shortcode, is_reel)
        except Exception as e:
            logger.error(f"‚ùå –†–µ–∑–æ–ª–≤ share: {e}")
    return None

def load_cookies_from_file(cookies_file: Path) -> Dict[str, str]:
    cookies = {}
    try:
        with open(cookies_file, 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith('#') or not line.strip():
                    continue
                try:
                    parts = line.strip().split('\t')
                    if len(parts) >= 7:
                        cookies[parts[5]] = parts[6]
                except:
                    continue
        required = ['sessionid', 'ds_user_id']
        if all(key in cookies for key in required):
            logger.debug(f"‚úÖ {len(cookies)} cookies –∏–∑ {cookies_file.name}")
            return cookies
        else:
            logger.warning(f"‚ö†Ô∏è {cookies_file.name}: –Ω–µ—Ç sessionid/ds_user_id")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cookies_file.name}: {e}")
    return {}

async def download_file_ig(url: str, save_path: str, timeout: int = 60) -> bool:
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                    return True
                else:
                    logger.warning(f"HTTP {resp.status} –¥–ª—è {url[:50]}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
    return False

def select_video_quality(versions: List[Dict], quality: str) -> Optional[str]:
    if not versions:
        return None
    sorted_versions = sorted(versions, key=lambda x: x.get('height', 0), reverse=True)
    if quality == "best":
        return sorted_versions[0].get('url')
    quality_map = {"1080p": 1080, "720p": 720, "480p": 480, "360p": 360}
    target_height = quality_map.get(quality, 1080)
    for version in sorted_versions:
        if version.get('height', 0) <= target_height:
            return version.get('url')
    return sorted_versions[-1].get('url')

def select_image_quality(candidates: List[Dict], quality: str) -> Optional[str]:
    if not candidates:
        return None
    sorted_candidates = sorted(candidates, key=lambda x: x.get('width', 0), reverse=True)
    if quality == "best":
        return sorted_candidates[0].get('url')
    quality_map = {"1080p": 1080, "720p": 720, "480p": 480, "360p": 360}
    target_width = quality_map.get(quality, 1080)
    for candidate in sorted_candidates:
        if candidate.get('width', 0) <= target_width:
            return candidate.get('url')
    return sorted_candidates[-1].get('url')

async def download_instagram_mobile_api(
    shortcode: str,
    quality: str = "best",
    cookies_dict: Optional[Dict[str, str]] = None
) -> Tuple[Optional[str], Optional[List[str]], Optional[str], Optional[str]]:
    try:
        api_url = f"https://www.instagram.com/api/v1/media/{shortcode}/info/"
        headers = {
            'User-Agent': random.choice(USER_AGENTS_INSTAGRAM),
            'Accept': '*/*',
            'Accept-Language': 'en-US',
            'X-IG-App-ID': '567067343352427',
            'X-IG-Device-ID': str(uuid.uuid4()),
        }
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.get(api_url, headers=headers, cookies=cookies_dict or {}) as resp:
                status = resp.status
                if status == 404:
                    logger.warning("Mobile API: 404")
                    return None, None, None, '404'
                if status == 403:
                    logger.info("Mobile API: 403 (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π)")
                    return None, None, None, '403'
                if status != 200:
                    logger.warning(f"Mobile API: —Å—Ç–∞—Ç—É—Å {status}")
                    return None, None, None, 'other'
                try:
                    data = await resp.json()
                except:
                    logger.error("Mobile API: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                    return None, None, None, 'other'
                items = data.get('items', [])
                if not items:
                    logger.warning("Mobile API: –Ω–µ—Ç items")
                    return None, None, None, 'other'
                media = items[0]
                media_type = media.get('media_type', 0)
                caption = media.get('caption')
                description = caption.get('text', 'üì∏ Instagram') if caption else 'üì∏ Instagram'
                if description and len(description) > 200:
                    description = description[:200] + '...'
                prefix = "ig_auth" if cookies_dict else "ig_pub"
                if media_type == 2: # Video
                    video_versions = media.get('video_versions', [])
                    video_url = select_video_quality(video_versions, quality)
                    if video_url:
                        video_path = os.path.join(tempfile.gettempdir(), f"{prefix}_{shortcode}.mp4")
                        if await download_file_ig(video_url, video_path, timeout=120):
                            auth_tag = " + cookies" if cookies_dict else ""
                            logger.info(f"‚úÖ Mobile API: –≤–∏–¥–µ–æ {quality}{auth_tag}")
                            return (video_path, None, description, None)
                    else:
                        logger.warning("Mobile API: –Ω–µ—Ç video_versions")
                elif media_type == 8: # Carousel
                    carousel_media = media.get('carousel_media', [])
                    all_media = []
                    for idx, item in enumerate(carousel_media):
                        item_type = item.get('media_type', 0)
                        if item_type == 2: # Video in carousel
                            video_versions = item.get('video_versions', [])
                            video_url = select_video_quality(video_versions, quality)
                            if video_url:
                                video_path = os.path.join(tempfile.gettempdir(), f"{prefix}_{shortcode}_v{idx}.mp4")
                                if await download_file_ig(video_url, video_path, timeout=120):
                                    all_media.append(video_path)
                        elif item_type == 1: # Image in carousel
                            img_candidates = item.get('image_versions2', {}).get('candidates', [])
                            img_url = select_image_quality(img_candidates, quality)
                            if img_url:
                                photo_path = os.path.join(tempfile.gettempdir(), f"{prefix}_{shortcode}_p{idx}.jpg")
                                if await download_file_ig(img_url, photo_path, timeout=60):
                                    all_media.append(photo_path)
                    if all_media:
                        auth_tag = " + cookies" if cookies_dict else ""
                        logger.info(f"‚úÖ Mobile API: –∫–∞—Ä—É—Å–µ–ª—å ({len(all_media)} —Ñ–∞–π–ª–æ–≤){auth_tag}")
                        return (None, all_media, description, None)
                elif media_type == 1: # Single Image
                    img_candidates = media.get('image_versions2', {}).get('candidates', [])
                    img_url = select_image_quality(img_candidates, quality)
                    if img_url:
                        photo_path = os.path.join(tempfile.gettempdir(), f"{prefix}_{shortcode}.jpg")
                        if await download_file_ig(img_url, photo_path, timeout=60):
                            auth_tag = " + cookies" if cookies_dict else ""
                            logger.info(f"‚úÖ Mobile API: —Ñ–æ—Ç–æ {quality}{auth_tag}")
                            return (None, [photo_path], description, None)
                    else:
                        logger.warning("Mobile API: –Ω–µ—Ç image candidates")
                else:
                    logger.warning(f"Mobile API: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π media_type={media_type}")
    except Exception as e:
        logger.error(f"‚ùå Mobile API: {e}")
    return None, None, None, 'other'

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ù–°–¢–ê–ì–†–ê–ú ---
async def download_instagram_yt_dlp(
    url: str,
    quality: str = "best",
    cookies_file: Optional[Path] = None
) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ —Å Instagram.
    –ü—ã—Ç–∞–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ.
    """
    try:
        # yt-dlp —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç, –≤–∫–ª—é—á–∞—è –∫–∞—Ä—É—Å–µ–ª–∏
        format_str = 'best' # yt-dlp —Å–∞–º —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –ª—É—á—à–µ
        ydl_opts = {
            'format': format_str,
            'merge_output_format': 'mp4', # –¥–ª—è –≤–∏–¥–µ–æ
            'noplaylist': False, # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç–∞–º (–∫–∞—Ä—É—Å–µ–ª—è–º) —Ä–∞–±–æ—Ç–∞—Ç—å
            'outtmpl': os.path.join(tempfile.gettempdir(), 'ig_ytdlp_%(id)s_%(autonumber)s.%(ext)s'),
            'quiet': True,
            'no_warnings': False, # –û—Å—Ç–∞–≤–∏–º, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è yt-dlp –≤ –ª–æ–≥–∞—Ö –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
            'socket_timeout': 120,
            'extractor_args': {'instagram': {'skip_comments': True, 'skip_download_replies': True}},
        }
        if cookies_file and cookies_file.exists():
            ydl_opts['cookiefile'] = str(cookies_file)
            logger.info(f"üç™ yt-dlp: –∏—Å–ø–æ–ª—å–∑—É—é cookies –∏–∑ {cookies_file.name}")
        else:
            logger.debug("üç™ yt-dlp: —Ñ–∞–π–ª cookies –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            description = info.get('description', 'üì∏ Instagram')
            if description and len(description) > 200:
                description = description[:200] + '...'
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if info.get('_type') == 'playlist' or 'carousel_media' in info.get('entries', [info])[0] if info.get('entries') else False:
                # –≠—Ç–æ –∫–∞—Ä—É—Å–µ–ª—å
                downloaded_files = []
                entries = info.get('entries', [info])
                for entry in entries:
                    if entry:
                        file_path = ydl.prepare_filename(entry)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–µ–¥–∏–∞
                        if file_path and os.path.exists(file_path):
                            ext = Path(file_path).suffix.lower()
                            if ext in ['.mp4', '.mov', '.jpg', '.jpeg', '.png', '.webp']:
                                downloaded_files.append(file_path)
                            else:
                                logger.debug(f"yt-dlp: –ø—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª –Ω–µ-–º–µ–¥–∏–∞: {file_path}")
                if downloaded_files:
                    logger.info(f"‚úÖ yt-dlp: –∫–∞—Ä—É—Å–µ–ª—å ({len(downloaded_files)} —Ñ–∞–π–ª–æ–≤)")
                    return (None, downloaded_files, description)
                else:
                    logger.warning("yt-dlp: –∫–∞—Ä—É—Å–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ñ–∞–π–ª—ã –Ω–µ —Å–∫–∞—á–∞–ª–∏—Å—å")
            else:
                # –≠—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
                temp_file = ydl.prepare_filename(info)
                if temp_file and os.path.exists(temp_file):
                    ext = Path(temp_file).suffix.lower()
                    if ext in ['.mp4', '.mov']:
                        logger.info(f"‚úÖ yt-dlp: –≤–∏–¥–µ–æ")
                        return (temp_file, None, description)
                    elif ext in ['.jpg', '.jpeg', '.png', '.webp']:
                        logger.info(f"‚úÖ yt-dlp: —Ñ–æ—Ç–æ")
                        return (None, [temp_file], description)
                    else:
                        logger.warning(f"yt-dlp: —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞: {ext} ({temp_file})")
                else:
                    logger.warning(f"yt-dlp: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {temp_file}")
    except yt_dlp.DownloadError as e:
        if "There is no video in this post" in str(e):
             logger.info("yt-dlp: –ø–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ.")
        elif "Requested content is not available" in str(e):
             logger.info("yt-dlp: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç).")
        else:
             logger.debug(f"yt-dlp: {str(e)[:100]}") # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ debug, –µ—Å–ª–∏ –Ω–µ –æ–¥–Ω–∞ –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ yt-dlp: {e}")
    return None, None, None

async def download_instagram_with_playwright(url: str, quality: str = "best") -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Instagram —Å –ø–æ–º–æ—â—å—é Playwright.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    global IG_CONTEXT
    if not IG_PLAYWRIGHT_READY or not IG_CONTEXT:
        logger.error("‚ùå Instagram Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)")
        return None, None, "‚ùå Playwright –Ω–µ –≥–æ—Ç–æ–≤ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)"
    page: Optional[Page] = None
    temp_files = []
    try:
        logger.info(f"üåê [–†–ï–ó–ï–†–í] –û—Ç–∫—Ä—ã–≤–∞—é Instagram –≤ Playwright –¥–ª—è {url}")
        page = await IG_CONTEXT.new_page()
        page.set_default_timeout(60000)
        page.set_default_navigation_timeout(60000)
        await page.goto(url, wait_until='networkidle')
        logger.info("üåê [–†–ï–ó–ï–†–í] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫—É
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await page.title() –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        page_title = await page.title()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await page.content() –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        page_content = await page.content()
        if "Log in" in page_title or "error" in page_content.lower():
            logger.warning("‚ö†Ô∏è [–†–ï–ó–ï–†–í] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞")
            return None, None, "‚ùå [–†–ï–ó–ï–†–í] –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        content_selectors = ['#react-root', 'article', 'main', 'div[role="button"]']
        content_found = False
        for selector in content_selectors:
            try:
                await page.wait_for_selector(selector, timeout=10000)
                logger.debug(f"‚úÖ [–†–ï–ó–ï–†–í] –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {selector}")
                content_found = True
                break
            except:
                continue
        if not content_found:
            logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        video_selector = 'video'
        image_selector = 'img'
        carousel_selector = 'ul._ac-3' # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            await page.wait_for_selector(f'{video_selector}, {image_selector}', timeout=10000)
        except:
            logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ")
            return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"
        video_elements = await page.query_selector_all(video_selector)
        image_elements = await page.query_selector_all(image_selector)
        carousel_element = await page.query_selector(carousel_selector)
        description = None
        caption_selectors = [
            'article div._a9zs div', # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞—Ä–µ–≤–∞—Ç—å
            'article div._a9zs span',
            'article header + div div',
            'article div._aatl div._aato', # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
        ]
        for selector in caption_selectors:
            caption_elem = await page.query_selector(selector)
            if caption_elem:
                description = await caption_elem.inner_text()
                if description:
                    break
        if description:
            if len(description) > 200:
                description = description[:200] + '...'
        else:
            description = 'üì∏ Instagram'
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏ ---
        if carousel_element:
            logger.info("üñºÔ∏è [–†–ï–ó–ï–†–í] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—É—Å–µ–ª—å (Playwright)")
            # –ò—â–µ–º –º–µ–¥–∏–∞—ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—É—Å–µ–ª–∏
            media_elements = await carousel_element.query_selector_all('video, img')
            if not media_elements:
                logger.warning("‚ö†Ô∏è [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ–¥–∏–∞—ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ä—É—Å–µ–ª–∏")
                return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –∫–∞—Ä—É—Å–µ–ª–∏"
            media_info = []
            for i, elem in enumerate(media_elements):
                elem_tag = await elem.get_attribute('tagName')
                if elem_tag and elem_tag.lower() == 'video':
                    sources = await elem.query_selector_all('source')
                    video_url = None
                    if sources:
                        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
                        best_url = None
                        best_quality = 0
                        for source in sources:
                            src = await source.get_attribute('src')
                            if not src:
                                continue
                            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ URL
                            if '1080' in src or 'hd' in src.lower():
                                best_url = src
                                best_quality = 1080
                                break
                            elif '720' in src:
                                if best_quality < 720:
                                    best_url = src
                                    best_quality = 720
                            elif '480' in src:
                                if best_quality < 480:
                                    best_url = src
                                    best_quality = 480
                            elif not best_url:
                                best_url = src
                        video_url = best_url
                        logger.debug(f"[–†–ï–ó–ï–†–í] –í—ã–±—Ä–∞–Ω URL –∏–∑ source (–∫–∞—á–µ—Å—Ç–≤–æ ~{best_quality}): {best_url is not None}")
                    else:
                        video_url = await elem.get_attribute('src')
                        logger.debug(f"[–†–ï–ó–ï–†–í] –ü–æ–ª—É—á–µ–Ω URL –∏–∑ video.src: {video_url is not None}")
                    if video_url:
                        media_info.append({'url': video_url, 'type': 'video', 'index': i})
                elif elem_tag and elem_tag.lower() == 'img':
                    img_url = await elem.get_attribute('src') or await elem.get_attribute('data-src')
                    if img_url and 'placeholder' not in img_url.lower():
                        media_info.append({'url': img_url, 'type': 'image', 'index': i})
            if not media_info:
                logger.warning("‚ö†Ô∏è [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ URL –º–µ–¥–∏–∞ –≤ –∫–∞—Ä—É—Å–µ–ª–∏")
                return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –∫–∞—Ä—É—Å–µ–ª–∏"
            async def download_single_media(media_item):
                url = media_item['url']
                media_type = media_item['type']
                index = media_item['index']
                ext = '.mp4' if media_type == 'video' else '.jpg'
                path = os.path.join(tempfile.gettempdir(), f"ig_carousel_{index}{ext}")
                if await download_file(url, path, timeout=60):
                    logger.debug(f"‚úÖ [–†–ï–ó–ï–†–í] –°–∫–∞—á–∞–Ω {media_type} –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏: {Path(path).name}")
                    return path
                return None
            tasks = [download_single_media(item) for item in media_info]
            downloaded_paths = await asyncio.gather(*tasks, return_exceptions=True)
            successful_paths = [p for p in downloaded_paths if isinstance(p, str) and os.path.exists(p)]
            if successful_paths:
                logger.info(f"‚úÖ [–†–ï–ó–ï–†–í] –°–∫–∞—á–∞–Ω–æ {len(successful_paths)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏")
                return None, successful_paths, description
            else:
                logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏")
                return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏"
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤–∏–¥–µ–æ ---
        elif video_elements:
            logger.info("üé• [–†–ï–ó–ï–†–í] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ (Playwright)")
            video_elem = video_elements[0]
            sources = await video_elem.query_selector_all('source')
            video_url = None
            if sources:
                logger.debug(f"[–†–ï–ó–ï–†–í] –ù–∞–π–¥–µ–Ω–æ {len(sources)} source —Ç–µ–≥–æ–≤")
                best_url = None
                best_quality = 0
                for source in sources:
                    src = await source.get_attribute('src')
                    if not src:
                        continue
                    if '1080' in src or 'hd' in src.lower():
                        best_url = src
                        best_quality = 1080
                        break
                    elif '720' in src:
                        if best_quality < 720:
                            best_url = src
                            best_quality = 720
                    elif '480' in src:
                        if best_quality < 480:
                            best_url = src
                            best_quality = 480
                    elif not best_url:
                        best_url = src
                video_url = best_url
                logger.debug(f"[–†–ï–ó–ï–†–í] –í—ã–±—Ä–∞–Ω URL –∏–∑ source (–∫–∞—á–µ—Å—Ç–≤–æ ~{best_quality}): {best_url is not None}")
            else:
                video_url = await video_elem.get_attribute('src')
                logger.debug(f"[–†–ï–ó–ï–†–í] –ü–æ–ª—É—á–µ–Ω URL –∏–∑ video.src: {video_url is not None}")
            if video_url:
                video_path = os.path.join(tempfile.gettempdir(), f"ig_video.mp4")
                if await download_file(video_url, video_path, timeout=120):
                    logger.info(f"‚úÖ [–†–ï–ó–ï–†–í] –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {Path(video_path).name}")
                    return video_path, None, description
                else:
                    logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ URL")
                    return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"
            else:
                logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ")
                return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω URL –≤–∏–¥–µ–æ"
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ ---
        elif image_elements:
            logger.info("üñºÔ∏è [–†–ï–ó–ï–†–í] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ (Playwright)")
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ, —á–∞—Å—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            main_img_elem = None
            for img_elem in image_elements:
                img_url = await img_elem.get_attribute('src') or await img_elem.get_attribute('data-src')
                if img_url and 'placeholder' not in img_url.lower():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–æ—Ç–æ (–æ–±—ã—á–Ω–æ –æ–Ω–æ –∫—Ä—É–ø–Ω–µ–µ, –Ω–æ —Å–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–µ–∑ CSS)
                    # –ü—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
                    main_img_elem = img_elem
                    break
            if main_img_elem:
                img_url = await main_img_elem.get_attribute('src') or await main_img_elem.get_attribute('data-src')
                if img_url and 'placeholder' not in img_url.lower():
                    photo_path = os.path.join(tempfile.gettempdir(), f"ig_photo.jpg")
                    if await download_file(img_url, photo_path, timeout=60):
                        logger.info(f"‚úÖ [–†–ï–ó–ï–†–í] –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ: {Path(photo_path).name}")
                        return None, [photo_path], description
                    else:
                        logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ URL")
                        return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ"
                else:
                    logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–æ—Ç–æ")
                    return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω URL —Ñ–æ—Ç–æ"
            else:
                logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        else:
            logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_instagram_with_playwright: {e}")
        return None, None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if page:
            await page.close()

async def download_instagram(url: str, quality: str = "best", user_id: Optional[int] = None) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ —Å Instagram.
    """
    result = await extract_instagram_shortcode(url)
    if not result:
        return None, None, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram"
    shortcode, is_reel = result
    logger.info(f"üîÑ [1/4] Mobile API (–∫–∞—á–µ—Å—Ç–≤–æ={quality})...")
    # 1. –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ API
    video_path, photos, description, error_code = await download_instagram_mobile_api(shortcode, quality)
    if video_path or photos:
        final_description = None if is_reel else description
        return (video_path, photos, final_description)
    if error_code == '404':
        return None, None, "‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω"
    if error_code in ['403', 'other']:
        logger.info("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies...")
        cookies_files = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª cookies.txt
        if Path("cookies.txt").exists():
            cookies_files.append(Path("cookies.txt"))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies_bot1-3
        for i in range(1, 4):
            cookies_file = Path(f"cookies_bot{i}")
            if cookies_file.exists():
                cookies_files.append(cookies_file)
        # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ–∞–π–ª–∞–º cookies
        for idx, cookies_file in enumerate(cookies_files, 1):
            # 2a. –ü–æ–ø—ã—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ API —Å cookies
            logger.info(f"üîÑ [2/4] ({idx}/{len(cookies_files)}) Mobile API + {cookies_file.name}...")
            cookies_dict = load_cookies_from_file(cookies_file)
            if cookies_dict:
                video_path, photos, description, api_error = await download_instagram_mobile_api(
                    shortcode, quality, cookies_dict
                )
                if video_path or photos:
                    final_description = None if is_reel else description
                    return (video_path, photos, final_description)
                elif api_error == '400': # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 400, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª
                     logger.warning(f"Mobile API + {cookies_file.name}: –æ—à–∏–±–∫–∞ 400, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª.")
                     continue
            else:
                logger.warning(f"Mobile API + {cookies_file.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies.")
            # 2b. –ü–æ–ø—ã—Ç–∫–∞ yt-dlp —Å cookies
            logger.info(f"üîÑ [3/4] ({idx}/{len(cookies_files)}) yt-dlp + {cookies_file.name}...")
            video_path, photos, description = await download_instagram_yt_dlp(url, quality, cookies_file)
            if video_path or photos:
                final_description = None if is_reel else description
                return (video_path, photos, final_description)
        # 3. –ü–æ–ø—ã—Ç–∫–∞ yt-dlp –±–µ–∑ cookies (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
        logger.info("üîÑ [4/4] yt-dlp –ø—É–±–ª–∏—á–Ω—ã–π...")
        video_path, photos, description = await download_instagram_yt_dlp(url, quality)
        if video_path or photos:
            final_description = None if is_reel else description
            return (video_path, photos, final_description)
        # 4. –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ Playwright
        logger.info("üîÑ –í—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π Playwright...")
        if IG_PLAYWRIGHT_READY:
            logger.info("üåê [–†–ï–ó–ï–†–í] –ò—Å–ø–æ–ª—å–∑—É—é Playwright –¥–ª—è Instagram...")
            video_path, photos, description = await download_instagram_with_playwright(url, quality)
            if video_path or photos:
                final_description = None if is_reel else description
                return (video_path, photos, final_description)
            else:
                return None, None, (
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –≤—Å–µ –º–µ—Ç–æ–¥—ã, –≤–∫–ª—é—á–∞—è Playwright\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
                    f"‚Ä¢ Cookies —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n"
                    f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª—ë–Ω\n"
                    f"‚Ä¢ Rate-limit –æ—Ç Instagram\n"
                    f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Instagram –¥–ª—è Playwright\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å cookies –∏–ª–∏ –ø–æ–∑–∂–µ"
                )
        else:
            return None, None, (
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n"
                f"Playwright –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
                f"‚Ä¢ Cookies —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n"
                f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª—ë–Ω\n"
                f"‚Ä¢ Rate-limit –æ—Ç Instagram"
            )
    # –ï—Å–ª–∏ error_code –Ω–µ 404 –∏ –Ω–µ 403/other, –∑–Ω–∞—á–∏—Ç, –º–æ–±–∏–ª—å–Ω–æ–µ API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –º–µ–¥–∏–∞, –Ω–æ –∏ –Ω–µ —Å–æ–æ–±—â–∏–ª–æ –æ–± –æ—à–∏–±–∫–µ
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ –ø–æ—Å—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –∞ –º—ã –∏—Å–∫–∞–ª–∏ –≤–∏–¥–µ–æ.
    # –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, —Ç–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
    logger.info("üîÑ –ú–æ–±–∏–ª—å–Ω–æ–µ API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —à–∞–≥–æ–≤ 2b, 3, 4 –∏–∑ –±–ª–æ–∫–∞ –≤—ã—à–µ
    cookies_files = []
    if Path("cookies.txt").exists():
        cookies_files.append(Path("cookies.txt"))
    for i in range(1, 4):
        cookies_file = Path(f"cookies_bot{i}")
        if cookies_file.exists():
            cookies_files.append(cookies_file)
    for idx, cookies_file in enumerate(cookies_files, 1):
        logger.info(f"üîÑ [3/4] ({idx}/{len(cookies_files)}) yt-dlp + {cookies_file.name} (—Ä–µ–∑–µ—Ä–≤)...")
        video_path, photos, description = await download_instagram_yt_dlp(url, quality, cookies_file)
        if video_path or photos:
            final_description = None if is_reel else description
            return (video_path, photos, final_description)
    logger.info("üîÑ [4/4] yt-dlp –ø—É–±–ª–∏—á–Ω—ã–π (—Ä–µ–∑–µ—Ä–≤)...")
    video_path, photos, description = await download_instagram_yt_dlp(url, quality)
    if video_path or photos:
        final_description = None if is_reel else description
        return (video_path, photos, final_description)
    if IG_PLAYWRIGHT_READY:
        logger.info("üåê [–†–ï–ó–ï–†–í] –ò—Å–ø–æ–ª—å–∑—É—é Playwright –¥–ª—è Instagram (—Ä–µ–∑–µ—Ä–≤)...")
        video_path, photos, description = await download_instagram_with_playwright(url, quality)
        if video_path or photos:
            final_description = None if is_reel else description
            return (video_path, photos, final_description)
        else:
            return None, None, (
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –≤—Å–µ –º–µ—Ç–æ–¥—ã, –≤–∫–ª—é—á–∞—è Playwright (—Ä–µ–∑–µ—Ä–≤)\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
                f"‚Ä¢ Cookies —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n"
                f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª—ë–Ω\n"
                f"‚Ä¢ Rate-limit –æ—Ç Instagram\n"
                f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Instagram –¥–ª—è Playwright\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å cookies –∏–ª–∏ –ø–æ–∑–∂–µ"
            )
    else:
        return None, None, (
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—Ä–µ–∑–µ—Ä–≤)\n"
            f"Playwright –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        )
    return None, None, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô –ò–ù–°–¢–ê–ì–†–ê–ú ---

# === üì§ –ó–ê–ì–†–£–ó–ö–ê –ù–ê –§–ê–ô–õ–û–û–ë–ú–ï–ù–ù–ò–ö–ò ===
async def upload_to_fileio(file_path: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ file.io –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É."""
    try:
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ file.io... (—Ñ–∞–π–ª: {Path(file_path).name})")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=300)) as session: # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                async with session.post('https://file.io/', data=data) as resp:
                    if resp.status == 200:
                        response_json = await resp.json()
                        if response_json.get('success'):
                            link = response_json.get('link')
                            if link:
                                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ file.io: {link}")
                                return link
                        else:
                            logger.error(f"‚ùå file.io: –æ—Ç–≤–µ—Ç –Ω–µ success. {response_json}")
                    else:
                        logger.error(f"‚ùå file.io: HTTP {resp.status}")
    except Exception as e:
        logger.error(f"‚ùå file.io: {e}")
    return None

async def send_video_or_message(chat_id: int, file_path: str, caption: str = "") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ file.io, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π."""
    file_size = Path(file_path).stat().st_size
    size_mb = file_size / (1024 * 1024)

    if size_mb <= 50:
        try:
            await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
            logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({size_mb:.1f} –ú–ë)")
            return True
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            # –î–∞–∂–µ –µ—Å–ª–∏ TelegramBadRequest –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Ä–∞–∑–º–µ—Ä–æ–º, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫
            # –ù–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏—á–Ω–æ –Ω–µ –ø—Ä–æ–±–æ–≤–∞—Ç—å.
            # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
            # –û–¥–Ω–∞–∫–æ, –ø—Ä–æ—â–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä > 50 –∏–ª–∏ –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.
            # –í —Ç–µ–∫—É—â–µ–º —Å–ª—É—á–∞–µ, —Ä–∞–∑–º–µ—Ä <= 50, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫.
            # –ù–æ file.io –æ–±—ã—á–Ω–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤ > 50MB. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ < 50MB –Ω–∞ file.io –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞.
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ª–æ–≥–∏–∫—É –∫–∞–∫ –µ—Å—Ç—å: –µ—Å–ª–∏ –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫.
            # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ TelegramBadRequest *—Ç–æ—á–Ω–æ* —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "File is too big"),
            # —Ç–æ –ª–æ–≥–∏—á–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫—É.
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä <= 50 –∏ –æ—à–∏–±–∫–∞ - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –∞ –Ω–µ —Ä–∞–∑–º–µ—Ä.
            # –ù–æ –±—ã–≤–∞–µ—Ç, —á—Ç–æ Telegram "–≤—Ä—ë—Ç" –æ —Ä–∞–∑–º–µ—Ä–µ –∏–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤.
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä <= 50 –∏ –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫.
            # –û–¥–Ω–∞–∫–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤.
            # –í–ê–ñ–ù–û: –í —Ç–µ–∫—É—â–µ–º –≤–∏–¥–µ, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä <= 50 –∏ *–ª—é–±–∞—è* –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –±–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ file.io.
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ. –õ—É—á—à–µ –±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—à–∏–±–∫—É "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª".
            # –ù–æ aiogram –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–∞—ë—Ç —á—ë—Ç–∫–æ –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ. –ü–æ—ç—Ç–æ–º—É, –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫.
            # –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å–∫–∞–∑–∞–Ω–æ: "–µ—Å–ª–∏ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 50–º–±".
            # –ù–æ –∑–¥–µ—Å—å –º—ã –ª–æ–≤–∏–º *–ª—é–±—É—é* –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª <= 50MB.
            # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–Ω—É–∂–Ω—ã–º –∑–∞–≥—Ä—É–∑–∫–∞–º –Ω–∞ file.io.
            # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É > 50MB –∏–ª–∏ –µ—Å–ª–∏ TelegramBadRequest —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞.
            # –û–¥–Ω–∞–∫–æ, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å: –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä > 50 –∏–ª–∏ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–æ–±—É–µ–º file.io.
            # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–º, –¥–∞–∂–µ –µ—Å–ª–∏ —á—É—Ç—å –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è <=50MB —Ñ–∞–π–ª–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏.

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
    logger.info(f"üì¶ –§–∞–π–ª ({size_mb:.1f} –ú–ë) —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–±—É–µ–º file.io...")
    link = await upload_to_fileio(file_path)
    if link:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–æ–π
        await bot.send_message(
            chat_id=chat_id,
            text=f"üì¶ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram ({size_mb:.1f} –ú–ë), –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                 f"üì• –°–∫–∞—á–∞—Ç—å: {link}\n"
                 f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 50 –ú–ë –Ω–∞–ø—Ä—è–º—É—é."
        )
        logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ file.io")
        return True
    else:
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ ({size_mb:.1f} –ú–ë) –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫."
        )
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª ({size_mb:.1f} –ú–ë) –Ω–∏ –Ω–∞–ø—Ä—è–º—É—é, –Ω–∏ —á–µ—Ä–µ–∑ file.io.")
        return False

async def send_instagram_content(
    chat_id: int,
    video_path: Optional[str],
    photos: Optional[List[str]],
    description: Optional[str]
) -> bool:
    try:
        if video_path and not photos:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é send_video_or_message, –∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫
            success = await send_video_or_message(chat_id, video_path, description[:1024] if description else None)
            return success
        elif photos:
            total = len(photos)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {total} —Ñ–∞–π–ª–æ–≤...")
            for batch_start in range(0, total, 10):
                batch = photos[batch_start:batch_start + 10]
                media_group = []
                for idx, media_path in enumerate(batch):
                    if not os.path.exists(media_path):
                        continue
                    ext = Path(media_path).suffix.lower()
                    caption = None
                    if batch_start == 0 and idx == 0 and description:
                        caption = description[:1024]
                    if ext in ['.mp4', '.mov']:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –≤–∏–¥–µ–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏ Telegram *—Ç–∞–∫–∂–µ* –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 50MB.
                        # –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É.
                        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ > 50MB, –µ–≥–æ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É. –ï–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.
                        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä.
                        video_size_mb = os.path.getsize(media_path) / (1024 * 1024)
                        if video_size_mb > 50:
                             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ send_video_or_message
                             await send_video_or_message(chat_id, media_path, caption)
                             # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                             continue
                        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä <= 50MB, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
                        media_group.append(InputMediaVideo(
                            media=FSInputFile(media_path),
                            caption=caption
                        ))
                    else:
                        media_group.append(InputMediaPhoto(
                            media=FSInputFile(media_path),
                            caption=caption
                        ))
                if media_group:
                    if len(media_group) == 1:
                        item = media_group[0]
                        if isinstance(item, InputMediaPhoto):
                            await bot.send_photo(
                                chat_id=chat_id,
                                photo=item.media,
                                caption=item.caption
                            )
                        else:
                            # –≠—Ç–æ –≤–∏–¥–µ–æ <= 50MB, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–¥–∏–Ω–æ—á–∫—É –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
                            await bot.send_video(
                                chat_id=chat_id,
                                video=item.media,
                                caption=item.caption
                            )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–æ—Ç–æ —Å –≤–∏–¥–µ–æ <= 50MB
                        await bot.send_media_group(chat_id=chat_id, media=media_group)
                    if batch_start + 10 < total:
                        await asyncio.sleep(1)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total} —Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ < 50MB –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞—Ö)")
            return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False
    return False

async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    try:
        clean_url = url.split('?')[0]
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Referer': 'https://www.tiktok.com/',
        }
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.get(clean_url, headers=headers, allow_redirects=True) as resp:
                if resp.status != 200:
                    return None, f"‚ùå TikTok –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}"
                html = await resp.text()
        json_match = re.search(r'<script id="__UNIVERSAL_DATA_FOR_REHYDRATION__" type="application/json">({.*})</script>', html)
        if not json_match:
            return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON-–±–ª–æ–∫"
        try:
            data = json.loads(json_match.group(1))
            item_info = data.get('__DEFAULT_SCOPE__', {}).get('webapp.photo.detail', {}).get('itemInfo', {})
            image_post = item_info.get('imagePost', {})
            images = image_post.get('images', [])
        except Exception as e:
            return None, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
        if not images:
            return None, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        photos = []
        for i, img in enumerate(images[:10]):
            img_url = img.get('imageURL', {}).get('urlList', [])
            if not img_url:
                continue
            photo_path = os.path.join(tempfile.gettempdir(), f"tiktok_photo_{i}.jpg")
            if await download_file(img_url[0], photo_path, timeout=15):
                photos.append(photo_path)
        if photos:
            return (photos, "üì∏ TikTok")
        else:
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ"
    except Exception as e:
        return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}"

async def download_video(url: str, quality: str = "best", platform: str = "youtube") -> Tuple[Optional[str], Optional[str]]:
    try:
        logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å {platform.upper()} (–∫–∞—á–µ—Å—Ç–≤–æ={quality})...")
        use_yt_cookies = (platform.lower() == 'youtube')
        ydl_opts = get_ydl_opts(quality, use_youtube_cookies=use_yt_cookies)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {Path(temp_file).name}")
                return temp_file, None
    except yt_dlp.DownloadError as e:
        error_str = str(e)
        logger.error(f"‚ùå yt-dlp ({platform}): {error_str}")
        if "Sign in to confirm you're not a bot" in error_str or "requires authentication" in error_str.lower():
             logger.info("üîÑ –û—à–∏–±–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º Playwright...")
             return None, "auth_required"
        else:
             return None, error_str
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {platform}: {e}")
        return None, str(e)
    return None, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

async def download_youtube_with_playwright(url: str, quality: str = "best") -> Optional[str]:
    global YT_CONTEXT
    if not YT_PLAYWRIGHT_READY or not YT_CONTEXT:
        logger.error("‚ùå YouTube Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None
    page: Optional[Page] = None
    temp_cookies_file = None
    try:
        logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é YouTube –≤ Playwright –¥–ª—è {url}")
        page = await YT_CONTEXT.new_page()
        page.set_default_timeout(60000)
        page.set_default_navigation_timeout(60000)
        await page.goto(url, wait_until='networkidle')
        logger.info("üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        await page.wait_for_selector('video, #player', timeout=10000)
        logger.info("‚úÖ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")
        page_title = await page.title()
        if "Sign in" in page_title or "not a bot" in await page.content():
             logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Playwright")
             cookies = await YT_CONTEXT.cookies()
             logger.info(f"üç™ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(cookies)} –∫—É–∫–∏ –∏–∑ Playwright –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
             temp_cookies_file = Path(tempfile.mktemp(suffix='.txt', prefix='yt_cookies_'))
             with open(temp_cookies_file, 'w', encoding='utf-8') as f:
                 f.write("# Netscape HTTP Cookie File\n")
                 for cookie in cookies:
                     f.write(f"{cookie['domain']}\tTRUE\t{cookie['path']}\t{str(cookie['secure']).upper()}\t{cookie['expires'] or 0}\t{cookie['name']}\t{cookie['value']}\n")
             ydl_opts = get_ydl_opts(quality, use_youtube_cookies=False)
             ydl_opts['cookiefile'] = str(temp_cookies_file)
             logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright...")
             with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                 info = ydl.extract_info(url, download=True)
                 temp_file = ydl.prepare_filename(info)
                 if temp_file and os.path.exists(temp_file):
                     logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright: {Path(temp_file).name}")
                     return temp_file
                 else:
                     logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–∫–∏ –∏–∑ Playwright")
             return None
        cookies = await YT_CONTEXT.cookies()
        logger.info(f"üç™ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(cookies)} –∫—É–∫–∏ –∏–∑ Playwright –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)")
        temp_cookies_file = Path(tempfile.mktemp(suffix='.txt', prefix='yt_cookies_alt_'))
        with open(temp_cookies_file, 'w', encoding='utf-8') as f:
             f.write("# Netscape HTTP Cookie File\n")
             for cookie in cookies:
                 f.write(f"{cookie['domain']}\tTRUE\t{cookie['path']}\t{str(cookie['secure']).upper()}\t{cookie['expires'] or 0}\t{cookie['name']}\t{cookie['value']}\n")
        ydl_opts = get_ydl_opts(quality, use_youtube_cookies=False)
        ydl_opts['cookiefile'] = str(temp_cookies_file)
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)...")
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
             info = ydl.extract_info(url, download=True)
             temp_file = ydl.prepare_filename(info)
             if temp_file and os.path.exists(temp_file):
                 logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright (–∞–ª—å—Ç): {Path(temp_file).name}")
                 return temp_file
             else:
                 logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª (–∞–ª—å—Ç. —Å–ø–æ—Å–æ–±)")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_youtube_with_playwright: {e}")
    finally:
        if page:
            await page.close()
        if temp_cookies_file and temp_cookies_file.exists():
            temp_cookies_file.unlink(missing_ok=True)
    return None

def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    )

def settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –õ—É—á—à–µ–µ")],
            [KeyboardButton(text="üé¨ 1080p"), KeyboardButton(text="üì∫ 720p")],
            [KeyboardButton(text="‚ö° 480p"), KeyboardButton(text="üì± 360p")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    current_quality = get_quality_setting(message.from_user.id)
    welcome_text = (
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram (–ø–æ—Å—Ç—ã, reels, –∫–∞—Ä—É—Å–µ–ª–∏)\n"
        "üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current_quality.upper()}</b>"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )

@dp.message(VideoStates.choosing_quality, F.text.in_([
    "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p"
]))
async def set_quality(message: types.Message, state: FSMContext):
    quality_map = {
        "üåü –õ—É—á—à–µ–µ": "best",
        "üé¨ 1080p": "1080p",
        "üì∫ 720p": "720p",
        "‚ö° 480p": "480p",
        "üì± 360p": "360p"
    }
    set_quality_setting(message.from_user.id, quality_map[message.text])
    await message.answer(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{message.text}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

@dp.message(VideoStates.choosing_quality, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    current_quality = get_quality_setting(message.from_user.id)
    await message.answer(
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current_quality.upper()}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )

@dp.message(
    F.text &
    ~F.text.startswith("/") &
    ~F.text.in_([
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p", "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    ])
)
async def handle_link(message: types.Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, TikTok –∏–ª–∏ Instagram")
        return
    await check_rate_limit(message.from_user.id)
    platform = detect_platform(url)
    status_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {platform.upper()}...")
    user_quality = get_quality_setting(message.from_user.id)
    temp_file = None
    temp_photos = []
    status_msg_deleted = False
    async def safe_edit_status(text: str):
        nonlocal status_msg_deleted
        if not status_msg_deleted:
            try:
                await status_msg.edit_text(text)
            except TelegramBadRequest:
                status_msg_deleted = True
    async def safe_delete_status():
        nonlocal status_msg_deleted
        if not status_msg_deleted:
            try:
                await status_msg.delete()
                status_msg_deleted = True
            except TelegramBadRequest:
                status_msg_deleted = True
    try:
        if platform == 'instagram':
            video_path, photos, description = await download_instagram(url, user_quality, message.from_user.id)
            if description and "‚ùå" in description:
                await safe_edit_status(description)
                return
            if video_path or photos:
                await safe_edit_status("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
                temp_file = video_path
                temp_photos = photos if photos else []
                success = await send_instagram_content(message.chat.id, video_path, photos, description)
                if success:
                    await safe_delete_status()
                else:
                    await safe_edit_status("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
                if temp_file:
                    cleanup_file(temp_file)
                if temp_photos:
                    cleanup_files(temp_photos)
                return
            await safe_edit_status("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            return
        elif platform == 'tiktok' and '/photo/' in url.lower():
            photos, description = await download_tiktok_photos(url)
            await safe_delete_status()
            if photos:
                temp_photos = photos
                media_group = [
                    InputMediaPhoto(
                        media=FSInputFile(photo),
                        caption=description if i == 0 else None
                    )
                    for i, photo in enumerate(photos[:10])
                ]
                await bot.send_media_group(chat_id=message.chat.id, media=media_group)
                cleanup_files(photos)
            else:
                await message.answer(description)
            return
        temp_file, error_msg = await download_video(url, user_quality, platform)
        if error_msg == "auth_required" and platform == 'youtube':
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Playwright –¥–ª—è YouTube...")
            temp_file = await download_youtube_with_playwright(url, user_quality)
            if temp_file:
                error_msg = None
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ Playwright"
        if not temp_file or not os.path.exists(temp_file):
            await safe_edit_status(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {error_msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}")
            return
        await safe_edit_status("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è send_video_or_message
        await send_video_or_message(message.chat.id, temp_file)
        await safe_delete_status()
        cleanup_file(temp_file)
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        await safe_edit_status(error_msg)
    finally:
        if temp_file:
            cleanup_file(temp_file)
        if temp_photos:
            cleanup_files(temp_photos)

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await init_instagram_playwright()
    await init_youtube_playwright()
    if WEBHOOK_HOST:
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        import aiohttp.web
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        app = aiohttp.web.Application()
        webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)
        port = int(os.getenv("PORT", 8000))
        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, host="0.0.0.0", port=port)
        await site.start()
        logger.info(f"üì° Webhook-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        try:
            while True:
                await asyncio.sleep(3600)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await bot.delete_webhook(drop_pending_updates=True)
            await runner.cleanup()
            if IG_BROWSER:
                logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä Instagram Playwright...")
                await IG_BROWSER.close()
            if YT_BROWSER:
                logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä YouTube Playwright...")
                await YT_BROWSER.close()
            await bot.session.close()
    else:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é –≤ —Ä–µ–∂–∏–º–µ long polling")
        await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())