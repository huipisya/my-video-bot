import os
import tempfile
import asyncio
import logging
import re
import hashlib
import json
import time
from pathlib import Path
from typing import Optional, Tuple, List
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from dotenv import load_dotenv
import yt_dlp
import instaloader
import pickle
import sys

sys.stdout.reconfigure(encoding='utf-8')

# === üß∞ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === üîê –¢–û–ö–ï–ù –ò WEBHOOK ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

WEBHOOK_PATH = "/"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === üß† –•–†–ê–ù–ò–õ–ò–©–ï –ù–ê–°–¢–†–û–ï–ö ===
user_settings = {}
RATE_LIMIT_DELAY = {}  # {user_id: last_request_time}

# --- üÜï –•–†–ê–ù–ò–õ–ò–©–ï –î–õ–Ø –û–ñ–ò–î–ê–ù–ò–Ø –î–†–£–ì–û–ô –°–°–´–õ–ö–ò –ò –°–û–û–ë–©–ï–ù–ò–Ø –û –ó–ê–ì–†–£–ó–ö–ï ---
user_upload_info = {} # {user_id: {'file_path': str, 'original_message_id': int, 'original_caption': str, 'waiting_message_id': int}}
# === üé® –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class VideoStates(StatesGroup):
    choosing_quality = State()
    waiting_for_another_link = State() # <--- –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# === üì∫ –ö–ê–ß–ï–°–¢–í–ê –í–ò–î–ï–û ===
QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
    "1080p": 'bestvideo[ext=mp4][height<=1080]+bestaudio[ext=m4a]/best[height<=1080][ext=mp4]/best',
    "720p": 'bestvideo[ext=mp4][height<=720]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best',
    "480p": 'best[height<=480][ext=mp4]/best[ext=mp4]/best',
    "360p": 'best[height<=360][ext=mp4]/best[ext=mp4]/best'
}

# === üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í ===
def cleanup_file(file_path: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {Path(file_path).name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

def cleanup_files(files: List[str]):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
    for file_path in files:
        cleanup_file(file_path)

# === üõ† –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def check_rate_limit(user_id: int):
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∑–∞–ø—Ä–æ—Å –≤ 3 —Å–µ–∫—É–Ω–¥—ã"""
    now = time.time()
    last_time = RATE_LIMIT_DELAY.get(user_id, 0)
    if now - last_time < 3:
        delay = 3 - (now - last_time)
        logger.info(f"‚è±Ô∏è Rate limit –¥–ª—è user {user_id}: –∂–¥—ë–º {delay:.1f}—Å")
        await asyncio.sleep(delay)
    RATE_LIMIT_DELAY[user_id] = time.time()

def get_quality_setting(user_id: int) -> str:
    return user_settings.get(user_id, "best")

def get_ydl_opts(quality: str = "best") -> dict:
    opts = {
        'format': QUALITY_FORMATS.get(quality, QUALITY_FORMATS["best"]),
        'merge_output_format': 'mp4',
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
    }
    proxy = os.getenv("PROXY_URL")
    if proxy:
        opts['proxy'] = proxy
    return opts

def is_valid_url(url: str) -> bool:
    regex = re.compile(
        r'^(https?://)?(www\.)?'
        r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vm\.tiktok\.com|vt\.tiktok\.com)',
        re.IGNORECASE
    )
    return bool(re.match(regex, url))

def detect_platform(url: str) -> str:
    url_lower = url.lower()
    if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
        return 'youtube'
    elif 'tiktok.com' in url_lower:
        return 'tiktok'
    elif 'instagram.com' in url_lower:
        return 'instagram'
    return 'unknown'

async def download_file(url: str, save_path: str, timeout: int = 60) -> bool:
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                    return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {url}: {e}")
    return False

# === üì• INSTAGRAM: –£–õ–£–ß–®–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ ===

async def download_instagram_embedder(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """–ú–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π —ç–º–±–µ–¥ Instagram"""
    try:
        logger.info("üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Embed...")
        embed_url = f"https://www.instagram.com/p/{shortcode}/embed/captioned/"
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            headers = {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15',
                'Accept': 'text/html,application/xhtml+xml',
                'Accept-Language': 'en-US,en;q=0.9',
                'Referer': 'https://www.instagram.com/',
            }
            
            async with session.get(embed_url, headers=headers) as resp:
                if resp.status == 200:
                    html = await resp.text()
                    
                    # –ò—â–µ–º video_url –≤ HTML
                    video_match = re.search(r'"video_url":"([^"]+)"', html)
                    if video_match:
                        video_url = video_match.group(1).replace('\\u0026', '&')
                        temp_path = os.path.join(tempfile.gettempdir(), f"insta_embed_{shortcode}.mp4")
                        if await download_file(video_url, temp_path):
                            return (temp_path, None, None)
                    
                    # –ò—â–µ–º display_url –¥–ª—è —Ñ–æ—Ç–æ
                    image_match = re.search(r'"display_url":"([^"]+)"', html)
                    if image_match:
                        image_url = image_match.group(1).replace('\\u0026', '&')
                        photo_path = os.path.join(tempfile.gettempdir(), f"insta_embed_{shortcode}.jpg")
                        if await download_file(image_url, photo_path):
                            return (None, [photo_path], "üì∏ Instagram")
    except Exception as e:
        logger.error(f"‚ùå Instagram Embed: {e}")
    return None, None, None

async def download_instagram_oembed(url: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """–ú–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π oEmbed API"""
    try:
        logger.info("üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ oEmbed...")
        oembed_url = f"https://api.instagram.com/oembed/?url={url}"
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=20)) as session:
            async with session.get(oembed_url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    thumbnail_url = data.get('thumbnail_url')
                    
                    if thumbnail_url:
                        # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–∏–¥–µ–æ
                        async with session.get(url, headers={
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                        }) as page_resp:
                            if page_resp.status == 200:
                                html = await page_resp.text()
                                video_match = re.search(r'"video_url":"([^"]+)"', html)
                                if video_match:
                                    video_url = video_match.group(1).replace('\\/', '/')
                                    shortcode = re.search(r'/(?:p|reel)/([^/]+)', url).group(1)
                                    temp_path = os.path.join(tempfile.gettempdir(), f"insta_oembed_{shortcode}.mp4")
                                    if await download_file(video_url, temp_path):
                                        return (temp_path, None, None)
    except Exception as e:
        logger.error(f"‚ùå Instagram oEmbed: {e}")
    return None, None, None

async def download_instagram_ytdlp(url: str, quality: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    try:
        logger.info("üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp...")
        ydl_opts = {
            'format': 'best',
            'noplaylist': True,
            'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
            'quiet': True,
            'no_warnings': True,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
        }
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        cookies_file = Path("cookies.txt")
        if cookies_file.exists():
            ydl_opts['cookiefile'] = str(cookies_file)
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É–∫–∏ –∏–∑ cookies.txt (yt-dlp)")

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return (temp_file, None, None)
    except Exception as e:
        logger.error(f"‚ùå Instagram yt-dlp: {e}")
    return None, None, None

async def download_instagram_instaloader(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    try:
        logger.info("üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Instaloader...")
        L = instaloader.Instaloader(
            download_videos=True,
            download_pictures=True,
            download_geotags=False,
            download_comments=False,
            save_metadata=False,
            quiet=True
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        cookies_file = Path("cookies.txt")
        if cookies_file.exists():
            # L.load_session_from_file("your_username_or_session_name", str(cookies_file)) # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è –∏–∑ cookies.txt (Instaloader)")

        post = instaloader.Post.from_shortcode(L.context, shortcode)

        if post.is_video:
            video_url = post.video_url
            temp_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}.mp4")
            if await download_file(video_url, temp_path):
                return (temp_path, None, None)
        else:
            photos = []
            description = post.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            if post.typename == "GraphSidecar":
                for i, node in enumerate(post.get_sidecar_nodes()):
                    if node.is_video or i >= 10:
                        continue
                    photo_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}_{i}.jpg")
                    if await download_file(node.display_url, photo_path):
                        photos.append(photo_path)
            else:
                photo_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}.jpg")
                if await download_file(post.url, photo_path):
                    photos.append(photo_path)
            if photos:
                return (None, photos, description)
    except Exception as e:
        logger.error(f"‚ùå Instagram Instaloader: {e}")
    return None, None, None

async def download_instagram_api(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    try:
        logger.info("üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ API...")
        api_url = f"https://www.instagram.com/p/{shortcode}/?__a=1&__d=dis"
        async with aiohttp.ClientSession() as session:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
            async with session.get(api_url, headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    media = data.get('graphql', {}).get('shortcode_media', {})
                    if media.get('is_video'):
                        video_url = media.get('video_url')
                        if video_url:
                            temp_path = os.path.join(tempfile.gettempdir(), f"insta_api_{shortcode}.mp4")
                            if await download_file(video_url, temp_path):
                                return (temp_path, None, None)
                    else:
                        photos = []
                        edges = media.get('edge_sidecar_to_children', {}).get('edges', [])
                        if edges:
                            for i, edge in enumerate(edges[:10]):
                                node = edge.get('node', {})
                                img_url = node.get('display_url')
                                if img_url:
                                    photo_path = os.path.join(tempfile.gettempdir(), f"insta_api_{shortcode}_{i}.jpg")
                                    if await download_file(img_url, photo_path):
                                        photos.append(photo_path)
                        else:
                            img_url = media.get('display_url')
                            if img_url:
                                photo_path = os.path.join(tempfile.gettempdir(), f"insta_api_{shortcode}.jpg")
                                if await download_file(img_url, photo_path):
                                    photos.append(photo_path)
                        if photos:
                            description = media.get('edge_media_to_caption', {}).get('edges', [{}])[0].get('node', {}).get('text', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                            return (None, photos, description)
    except Exception as e:
        logger.error(f"‚ùå Instagram API: {e}")
    return None, None, None

# --- üÜï –ù–û–í–´–ô –ú–ï–¢–û–î –î–õ–Ø REELS –° –ú–û–ë–ò–õ–¨–ù–û–ô –≠–ú–£–õ–Ø–¶–ò–ï–ô ---
async def download_instagram_reels_ytdlp(url: str, quality: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """–ù–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Reels —á–µ—Ä–µ–∑ yt-dlp —Å —ç–º—É–ª—è—Ü–∏–µ–π –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    try:
        logger.info("üîÑ Instagram Reels: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp (–º–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)...")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å shortcode –∏–∑ /share/ URL
        share_match = re.search(r'/share/([^/]+)', url)
        if share_match:
            shortcode = share_match.group(1)
            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è —Ä–∏–ª—Å–∞
            reel_url = f"https://www.instagram.com/reel/{shortcode}/"
            logger.info(f"üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω URL /share/ –≤ /reel/: {reel_url}")
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ /share/, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
            reel_url = url

        ydl_opts = {
            'format': 'best',
            'noplaylist': True,
            'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
            'quiet': True,
            'no_warnings': True,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1',
                'Referer': 'https://www.instagram.com/',
                'Origin': 'https://www.instagram.com',
                'Accept-Language': 'en-US,en;q=0.9',
            },
            # –î–æ–±–∞–≤–∏–º –æ–ø—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Reels
            'extractor_args': {
                'instagram': {
                    'skip_download': False
                }
            }
        }

        # –ï—Å–ª–∏ –µ—Å—Ç—å cookies.txt, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        cookies_file = Path("cookies.txt")
        if cookies_file.exists():
            ydl_opts['cookiefile'] = str(cookies_file)
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É–∫–∏ –∏–∑ cookies.txt (Reels)")

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(reel_url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return (temp_file, None, None)

    except Exception as e:
        logger.error(f"‚ùå Instagram Reels yt-dlp: {e}")
    return None, None, None

# --- üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –ß–ï–†–ï–ó –°–¢–û–†–û–ù–ù–ò–ï –°–ï–†–í–ò–°–´ ---
async def get_video_from_third_party(url: str, service_name: str, service_func) -> Optional[str]:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å."""
    try:
        logger.info(f"üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {service_name}...")
        video_url = await service_func(url)
        if video_url:
            temp_path = os.path.join(tempfile.gettempdir(), f"insta_{service_name}.mp4")
            if await download_file(video_url, temp_path):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ {service_name}")
                return temp_path
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ {service_name}: {e}")
    return None

async def get_video_url_from_ssstik(url: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å ssstik.io"""
    # ssstik.io —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JS, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    # –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏/JS –Ω–∞ –∏—Ö —Å—Ç–æ—Ä–æ–Ω–µ
    # –ü—Ä–∏–º–µ—Ä: https://ssstik.io/abc?query=https://www.instagram.com/reel/XXXX/
    # –∏–ª–∏ https://ssstik.io/en - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Referer': 'https://ssstik.io/en',
            'Origin': 'https://ssstik.io',
        }
        # ssstik.io –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ /abc —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º query
        # –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã/—Å–∫—Ä–∏–ø—Ç—ã, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
        # –°–∞–π—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —ç—Ç–æ—Ç –∫–æ–¥ —Ö—Ä—É–ø–∫–∏–π
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ form-action –∏ token
            async with session.get('https://ssstik.io/en', headers=headers) as page_resp:
                if page_resp.status != 200:
                    return None
                page_html = await page_resp.text()
                # –ò—â–µ–º —Ñ–æ—Ä–º—É
                match = re.search(r'<form.*?action="(.*?)".*?>', page_html, re.S)
                if not match:
                    return None
                form_action = match.group(1)

                # –ò—â–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ —Å —Ç–æ–∫–µ–Ω–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'token'
                token_match = re.search(r'<input.*?name="token".*?value="(.*?)"', page_html)
                token = token_match.group(1) if token_match else ""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
            data = aiohttp.FormData()
            data.add_field('id', url)
            data.add_field('locale', 'en')
            data.add_field('token', token) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –Ω–∞—à–ª–∏
            # ssstik –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π, —ç—Ç–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∏–º –±–µ–∑ –Ω–µ–≥–æ
            if not token:
                data._fields = [f for f in data._fields if f[1] != 'token']

            async with session.post(f'https://ssstik.io{form_action}', data=data, headers=headers) as resp:
                if resp.status != 200:
                    return None
                html = await resp.text()

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
            # ssstik –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –≤ —ç–ª–µ–º–µ–Ω—Ç–µ <a> —Å data-url –∏–ª–∏ href
            # –∏–ª–∏ —á–µ—Ä–µ–∑ JS –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∫–Ω–æ–ø–∫–∏
            # –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ JSON –≤–Ω—É—Ç—Ä–∏ —Å–∫—Ä–∏–ø—Ç–∞
            # –≠—Ç–æ —Ö—Ä—É–ø–∫–æ, –Ω–æ –ø—Ä–æ–±—É–µ–º
            # –ß–∞—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞ –∏ —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞—É–¥–∏–æ
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (–æ–±—ã—á–Ω–æ mp4)
            video_match = re.search(r'download\.link.*?"(https?://[^"]*\.mp4[^"]*)"', html)
            if video_match:
                return video_match.group(1)

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            video_match = re.search(r'href="(https?://[^"]*\.mp4[^"]*)"[^>]*download', html)
            if video_match:
                return video_match.group(1)

            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏
            button_match = re.search(r'data-url="(https?://[^"]*\.mp4[^"]*)"', html)
            if button_match:
                return button_match.group(1)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ssstik.io: {e}")
    return None

async def get_video_url_from_ttdownloader(url: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å ttdownloader.com"""
    # ttdownloader.com —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ /api/ajax/search
    # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    # –ü—Ä–∏–º–µ—Ä: POST /api/ajax/search —Å  { query: url, lang: 'en' }
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Referer': 'https://ttdownloader.com/',
            'Origin': 'https://ttdownloader.com',
            'Content-Type': 'application/x-www-form-urlencoded',
        }
        data = aiohttp.FormData()
        data.add_field('query', url)
        data.add_field('lang', 'en') # –∏–ª–∏ 'en', –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∞–π—Ç–∞

        async with session.post('https://ttdownloader.com/api/ajax/search', data=data, headers=headers) as resp:
            if resp.status != 200:
                return None
            json_data = await resp.json()
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ã—á–Ω–æ –≤ json_data['data']
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ HD –≤–∏–¥–µ–æ
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
            # –ü—Ä–∏–º–µ—Ä: { "data": "<html>...<a href='...'>Download</a>...</html>" }
            html_content = json_data.get('data', '')
            if html_content:
                # –ò—â–µ–º href –≤ <a> —Ç–µ–≥–∞—Ö
                links = re.findall(r'<a[^>]+href="(https?://[^"]+\.mp4[^"]*)"', html_content)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ mp4 (–æ–±—ã—á–Ω–æ —ç—Ç–æ HD)
                if links:
                    return links[0]

    return None

async def get_video_url_from_snaptik(url: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å snaptik.app"""
    # snaptik.app —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ /snaptik.php —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º url
    # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    # –ü—Ä–∏–º–µ—Ä: GET /snaptik.php?url=...
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∏–ª–∏ JS
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Referer': 'https://snaptik.app/',
        }
        params = {'url': url}

        async with session.get('https://snaptik.app/snaptik.php', params=params, headers=headers) as resp:
            if resp.status != 200:
                return None
            html = await resp.text()

        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
        # snaptik —á–∞—Å—Ç–æ –∫–æ–¥–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ base64 –∏–ª–∏ –ø—Ä—è—á–µ—Ç –≤ JS
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ href –∏–ª–∏ data-url
        # –ü—Ä–∏–º–µ—Ä: <a href="https://...snaptik.app/download?token=..." download>
        # –∏–ª–∏ <button onclick="download_video('encoded_url')">
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JS
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è href
        # –ß–∞—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞, –∞—É–¥–∏–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        # –ò—â–µ–º —Å—Å—ã–ª–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é "download" –∏–ª–∏ "video"
        # –ü—Ä–∏–º–µ—Ä: <a href="https://.../get_video.php?token=...&title=...&id=...">
        # –ò–ª–∏ –≤ base64 –≤ JS: decodeURIComponent(atob('...'))
        # –≠—Ç–æ —Ö—Ä—É–ø–∫–æ
        # –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ —Å onclick
        # onclick="download_video('TOKEN')"
        # –ò —Ç–æ–∫–µ–Ω –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ URL: https://snaptik.app/download?token=TOKEN
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω
        token_match = re.search(r"download_video\(['\"]([^'\"]+)['\"]\)", html)
        if token_match:
            token = token_match.group(1)
            download_url = f"https://snaptik.app/download?token={token}"
            # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∏–∑ —ç—Ç–æ–≥–æ download URL
            # –ò–Ω–æ–≥–¥–∞ –æ–Ω –≤–µ–¥–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å <a href="...">, –∏–Ω–æ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç
            async with session.get(download_url, headers=headers) as dl_resp:
                if dl_resp.status == 200:
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Ä–µ–¥–∏—Ä–µ–∫—Ç –ª–∏ —ç—Ç–æ
                    final_url = str(dl_resp.url)
                    if final_url and final_url.endswith('.mp4'):
                         return final_url
                    # –ò–ª–∏ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º HTML –∏ –∏—â–µ–º —Å—Å—ã–ª–∫—É
                    dl_html = await dl_resp.text()
                    dl_link_match = re.search(r'<a[^>]+href="(https?://[^"]*\.mp4[^"]*)"', dl_html)
                    if dl_link_match:
                        return dl_link_match.group(1)

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –≤ href
        direct_match = re.search(r'<a[^>]+href="(https?://[^"]*\.mp4[^"]*)"[^>]*download', html)
        if direct_match:
            return direct_match.group(1)

    return None


# --- üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø download_instagram –° –†–ï–ó–ï–†–í–ù–´–ú–ò –°–ï–†–í–ò–°–ê–ú–ò ---
async def download_instagram(url: str, quality: str = "best") -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ shortcode (—É—á–∏—Ç—ã–≤–∞–µ—Ç /share/)
    shortcode_match = re.search(r'/(?:p|reel|share)/([^/]+)', url)
    if not shortcode_match:
        return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å shortcode –∏–∑ URL"
    shortcode = shortcode_match.group(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ URL
    is_reel = '/reel/' in url.lower() or '/share/' in url.lower()

    methods = []

    # –î–ª—è Reels: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    if is_reel:
        methods.append(lambda: download_instagram_reels_ytdlp(url, quality))

    # –ó–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    methods.extend([
        lambda: download_instagram_embedder(url, shortcode),
        lambda: download_instagram_oembed(url),
        lambda: download_instagram_ytdlp(url, quality),
        lambda: download_instagram_instaloader(url, shortcode),
        lambda: download_instagram_api(url, shortcode)
    ])

    # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    for method in methods:
        result = await method()
        if result and (result[0] or result[1]):
            return result

    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ)
    logger.info("üîÑ Instagram: –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã...")
    third_party_methods = [
        ("ssstik", lambda: get_video_from_third_party(url, "ssstik", get_video_url_from_ssstik)),
        ("ttdownloader", lambda: get_video_from_third_party(url, "ttdownloader", get_video_url_from_ttdownloader)),
        ("snaptik", lambda: get_video_from_third_party(url, "snaptik", get_video_url_from_snaptik)),
    ]

    for service_name, method in third_party_methods:
        result_file = await method()
        if result_file:
            # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å
            return (result_file, None, None) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ

    return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"

# === üì§ TIKTOK –§–û–¢–û ===
async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    try:
        clean_url = url.split('?')[0]
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Referer': 'https://www.tiktok.com/',
            'DNT': '1',
        }

        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.get(clean_url, headers=headers, allow_redirects=True) as resp:
                if resp.status != 200:
                    return None, f"‚ùå TikTok –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}"
                html = await resp.text()

        json_match = re.search(r'<script id="__UNIVERSAL_DATA_FOR_REHYDRATION__" type="application/json">({.*})</script>', html)
        if not json_match:
            return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON-–±–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏"

        try:
            data = json.loads(json_match.group(1))
            item_info = data.get('__DEFAULT_SCOPE__', {}).get('webapp.photo.detail', {}).get('itemInfo', {})
            image_post = item_info.get('imagePost', {})
            images = image_post.get('images', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"

        if not images:
            return None, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö"

        photos = []
        for i, img in enumerate(images[:10]):
            img_url = img.get('imageURL', {}).get('urlList', [])
            if not img_url:
                continue
            url_to_download = img_url[0]
            photo_path = os.path.join(tempfile.gettempdir(), f"tiktok_photo_{i}.jpg")
            if await download_file(url_to_download, photo_path, timeout=15):
                photos.append(photo_path)

        if photos:
            return (photos, "üì∏ –§–æ—Ç–æ –∏–∑ TikTok")
        else:
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ"

    except asyncio.TimeoutError:
        return None, "‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã TikTok"
    except Exception as e:
        logger.error(f"‚ùå TikTok —Ñ–æ—Ç–æ –æ—à–∏–±–∫–∞: {e}")
        return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}"

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û ===
async def download_video_ytdlp(url: str, quality: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp...")
        ydl_opts = get_ydl_opts(quality)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {e}")
    return None

async def download_video_ytdlp_cookies(url: str, quality: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp —Å cookies...")
        cookies_file = Path("cookies.txt")
        if not cookies_file.exists():
            return None
        ydl_opts = get_ydl_opts(quality)
        ydl_opts['cookiefile'] = str(cookies_file)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp —Å cookies: {e}")
    return None

async def download_video_ytdlp_alt(url: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)...")
        ydl_opts = {
            'format': 'best',
            'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
            'quiet': True,
            'no_warnings': True
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: {e}")
    return None

async def download_video(url: str, quality: str = "best") -> Optional[str]:
    methods = [
        lambda: download_video_ytdlp(url, quality),
        lambda: download_video_ytdlp_cookies(url, quality),
        lambda: download_video_ytdlp_alt(url)
    ]
    for method in methods:
        result = await method()
        if result:
            return result
    return None

# === üì§ –û–¢–ü–†–ê–í–ö–ê ===
async def send_photos_with_caption(chat_id: int, photos: List[str], caption: str) -> bool:
    if not photos:
        return False
    try:
        if len(photos) == 1:
            await bot.send_photo(chat_id=chat_id, photo=FSInputFile(photos[0]), caption=caption)
        else:
            media_group = [
                types.InputMediaPhoto(media=FSInputFile(photo), caption=caption if i == 0 else None)
                for i, photo in enumerate(photos[:10])
            ]
            await bot.send_media_group(chat_id=chat_id, media=media_group)
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –≤ Telegram")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return False

# === üì§ –ó–ê–ì–†–£–ó–ö–ê –ù–ê –§–ê–ô–õ–û–û–ë–ú–ï–ù–ù–ò–ö–ò ===
async def upload_to_filebin(file_path: str) -> Optional[str]:
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ filebin.net...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                async with session.post('https://filebin.net/', data=data, params={'expiry': '3d'}) as resp:
                    if resp.status == 200:
                        text = await resp.text()
                        lines = text.strip().split('\n')
                        if lines and lines[0].strip().startswith('http') and 'filebin.net' in lines[0]:
                            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ filebin.net")
                            return lines[0].strip()
    except Exception as e:
        logger.error(f"‚ùå filebin.net: {e}")
    return None

async def upload_to_gofile(file_path: str) -> Optional[str]:
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ gofile.io...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=300)) as session:
            async with session.get('https://api.gofile.io/servers') as resp:
                if resp.status != 200:
                    return None
                server_data = await resp.json()
                if not server_data.get('data', {}).get('servers'):
                    return None
                server = server_data['data']['servers'][0]['name']
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                upload_url = f'https://{server}.gofile.io/contents/uploadfile'
                async with session.post(upload_url, data=data) as upload_resp:
                    if upload_resp.status == 200:
                        result = await upload_resp.json()
                        if result.get('status') == 'ok':
                            return result['data']['downloadPage']
    except Exception as e:
        logger.error(f"‚ùå gofile.io: {e}")
    return None

# --- üö´ –£–î–ê–õ–ò–¢–¨ –≠–¢–û–¢ –ë–õ–û–ö ---
# async def send_video_or_link(chat_id: int, file_path: str, caption: str = "") -> bool:
#     file_size = Path(file_path).stat().st_size
#     size_mb = file_size / (1024 * 1024)
#
#     if size_mb <= 50:
#         try:
#             await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
#             logger.info(f"‚úÖ –í–∏–¥–µ–æ ({size_mb:.1f} –ú–ë) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
#             return True
#         except TelegramBadRequest as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
#
#     uploaders = [
#         ('gofile.io', upload_to_gofile),
#         ('filebin.net', upload_to_filebin),
#     ]
#
#     for name, uploader in uploaders:
#         link = await uploader(file_path)
#         if link:
#             await bot.send_message(
#                 chat_id=chat_id,
#                 text=f"üì¶ –§–∞–π–ª ({size_mb:.1f} –ú–ë) –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {name}\n\nüì• –°–∫–∞—á–∞—Ç—å: {link}\n\n‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"
#             )
#             return True
#
#     await bot.send_message(
#         chat_id=chat_id,
#         text=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë).\n–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
#     )
#     return False
# --- üÜï –ù–û–í–´–ô –ö–û–î ---
async def send_video_or_link(chat_id: int, file_path: str, caption: str = "", state: FSMContext = None) -> bool:
    file_size = Path(file_path).stat().st_size
    size_mb = file_size / (1024 * 1024)

    if size_mb <= 50:
        try:
            await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
            logger.info(f"‚úÖ –í–∏–¥–µ–æ ({size_mb:.1f} –ú–ë) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")

    uploaders = [
        ('gofile.io', upload_to_gofile),
        ('filebin.net', upload_to_filebin),
    ]

    for name, uploader in uploaders:
        link = await uploader(file_path)
        if link:
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ –§–∞–π–ª ({size_mb:.1f} –ú–ë) –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {name}\n\nüì• –°–∫–∞—á–∞—Ç—å: {link}\n\n‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π",
                reply_markup=get_another_link_kb() # <--- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            )
            # --- üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ ---
            user_upload_info[chat_id] = {
                'file_path': file_path,
                'original_message_id': sent_message.message_id,
                'original_caption': f"üì¶ –§–∞–π–ª ({size_mb:.1f} –ú–ë) –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {name}\n\nüì• –°–∫–∞—á–∞—Ç—å: {link}\n\n‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"
            }
            if state:
                await state.set_state(VideoStates.waiting_for_another_link)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–î—Ä—É–≥–æ–π —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫' —á–µ—Ä–µ–∑ {name}")
            return True

    await bot.send_message(
        chat_id=chat_id,
        text=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë).\n–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    )
    return False

# === üß≠ –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    )

def settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –õ—É—á—à–µ–µ")],
            [KeyboardButton(text="üé¨ 1080p"), KeyboardButton(text="üì∫ 720p")],
            [KeyboardButton(text="‚ö° 480p"), KeyboardButton(text="üì± 360p")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# === üöÄ –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    welcome_text = (
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram\n\n"
        "üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )

@dp.message(VideoStates.choosing_quality, F.text.in_([
    "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p"
]))
async def set_quality(message: types.Message, state: FSMContext):
    quality_map = {
        "üåü –õ—É—á—à–µ–µ": "best",
        "üé¨ 1080p": "1080p",
        "üì∫ 720p": "720p",
        "‚ö° 480p": "480p",
        "üì± 360p": "360p"
    }
    user_settings[message.from_user.id] = quality_map[message.text]
    await message.answer(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{message.text}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

@dp.message(VideoStates.choosing_quality, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())

# === üì• –û–ë–†–ê–ë–û–¢–ö–ê –°–°–´–õ–û–ö ===
@dp.message(F.text)
async def handle_link(message: types.Message, state: FSMContext):
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, TikTok –∏–ª–∏ Instagram")
        return

    # ‚úÖ RATE LIMITING
    await check_rate_limit(message.from_user.id)

    platform = detect_platform(url)
    status_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {platform.upper()}...")
    user_quality = get_quality_setting(message.from_user.id)
    temp_file = None
    temp_photos = []

    try:
        if platform == 'instagram':
            temp_file, photos, description = await download_instagram(url, user_quality)
            if description and "‚ùå" in description:
                await status_msg.edit_text(description)
                return
            if photos:
                temp_photos = photos
                await status_msg.delete()
                success = await send_photos_with_caption(message.chat.id, photos, description)
                # üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                cleanup_files(photos)
                return

        elif platform == 'tiktok':
            if '/photo/' in url.lower():
                photos, description = await download_tiktok_photos(url)
                await status_msg.delete()
                if photos:
                    temp_photos = photos
                    success = await send_photos_with_caption(message.chat.id, photos, description)
                    # üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    cleanup_files(photos)
                else:
                    await message.answer(description)
                return

        temp_file = await download_video(url, user_quality)
        if not temp_file or not os.path.exists(temp_file):
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
            return

        await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        await send_video_or_link(message.chat.id, temp_file, state=state) # <--- –ü–µ—Ä–µ–¥–∞–µ–º state
        await status_msg.delete()
        
        # üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        cleanup_file(temp_file)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        try:
            await status_msg.edit_text(error_msg)
        except:
            pass
    
    finally:
        # üßπ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫)
        if temp_file:
            cleanup_file(temp_file)
        if temp_photos:
            cleanup_files(temp_photos)

# --- üÜï –ù–û–í–´–ô –ö–û–î ---
from aiogram import Router
router = Router() # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è callback_query

def get_another_link_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–î—Ä—É–≥–æ–π —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫'."""
    kb = [
        [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫", callback_data="another_link")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.callback_query(F.data == "another_link", VideoStates.waiting_for_another_link)
async def on_another_link_click(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    info = user_upload_info.get(user_id)

    if not info:
        await call.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    file_path = info['file_path']
    original_message_id = info['original_message_id']

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        await bot.delete_message(chat_id=user_id, message_id=original_message_id)
    except TelegramBadRequest:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {original_message_id} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, –∏ –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–æ–π
    used_service = "gofile.io" if "gofile.io" in info['original_caption'] else "filebin.net" if "filebin.net" in info['original_caption'] else None

    # –í—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å
    alternative_uploaders = {
        'gofile.io': ('filebin.net', upload_to_filebin),
        'filebin.net': ('gofile.io', upload_to_gofile),
    }

    if used_service in alternative_uploaders:
        alt_name, alt_uploader = alternative_uploaders[used_service]
        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {alt_name}")
        alt_link = await alt_uploader(file_path)
        if alt_link:
            await bot.send_message(
                chat_id=user_id,
                text=f"üì¶ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ (—á–µ—Ä–µ–∑ {alt_name}):\n\nüì• –°–∫–∞—á–∞—Ç—å: {alt_link}\n\n‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"
            )
            logger.info(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ {alt_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            await bot.send_message(
                chat_id=user_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
            )
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ {alt_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
        )
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_upload_info.pop(user_id, None)
    await state.clear()

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ Telegram
    await call.answer()

# === üöÄ –ó–ê–ü–£–°–ö: –ì–ò–ë–ö–ò–ô –†–ï–ñ–ò–ú ===
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # --- üÜï –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è callback_query ---
    dp.include_router(router)

    if WEBHOOK_HOST:
        # === –†–µ–∂–∏–º Webhook (–¥–ª—è Railway) ===
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        import aiohttp.web

        WEBHOOK_PATH = "/"
        WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

        app = aiohttp.web.Application()
        webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)

        port = int(os.getenv("PORT", 8000))
        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, host="0.0.0.0", port=port)
        await site.start()
        logger.info(f"üì° Webhook-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

        try:
            while True:
                await asyncio.sleep(3600)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await bot.delete_webhook(drop_pending_updates=True)
            await runner.cleanup()
            await bot.session.close()
    else:
        # === –†–µ–∂–∏–º Long Polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞) ===
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling (–ª–æ–∫–∞–ª—å–Ω–æ)")
        await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())