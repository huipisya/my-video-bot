# bot.py
import asyncio
import json
import logging
import os
import tempfile
from pathlib import Path
from typing import Optional, List, Tuple, Dict, Any

import aiohttp.web
import yt_dlp
from aiogram import Bot, Dispatcher, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, FSInputFile, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton,
    CallbackQuery, FSInputFile
)
from dotenv import load_dotenv
from playwright.async_api import async_playwright, Browser, BrowserContext
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ stdout (–≤–∞–∂–Ω–æ –¥–ª—è Windows –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö —Å—Ä–µ–¥)
sys.stdout.reconfigure(encoding='utf-8')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook
YT_BROWSER: Optional[Browser] = None
YT_CONTEXT: Optional[BrowserContext] = None
YT_PLAYWRIGHT_READY = False
IG_BROWSER: Optional[Browser] = None
IG_CONTEXT: Optional[BrowserContext] = None
IG_PLAYWRIGHT_READY = False
bot: Optional[Bot] = None
dp = Dispatcher()
user_settings = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
RATE_LIMIT_DELAY = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM ---
class VideoStates(StatesGroup):
    choosing_quality = State()

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ ---
QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio/best',
    "1080p": 'bestvideo[ext=mp4][height<=1920][width<=1920]+bestaudio[ext=m4a]/bestvideo[height<=1920]+bestaudio/best',
    "720p": 'bestvideo[ext=mp4][height<=1280][width<=1280]+bestaudio[ext=m4a]/bestvideo[height<=1280]+bestaudio/best',
    "480p": 'bestvideo[ext=mp4][height<=854][width<=854]+bestaudio[ext=m4a]/bestvideo[height<=854]+bestaudio/best',
    "360p": 'bestvideo[ext=mp4][height<=640][width<=640]+bestaudio[ext=m4a]/bestvideo[height<=640]+bestaudio/best',
}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_quality_setting(user_id: int) -> str:
    return user_settings.get(user_id, "best") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "best"

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π yt-dlp ---
def get_ydl_opts(quality: str, use_youtube_cookies: bool = True) -> Dict[str, Any]:
    opts = {
        'format': quality,
        'outtmpl': '%(id)s.%(ext)s',
        'noplaylist': True,
        'extractaudio': False,
        'audioformat': 'mp4',
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'no_warnings': True,
        'quiet': True,
    }
    if use_youtube_cookies:
        cookie_file = Path("cookies_youtube.txt")
        if cookie_file.exists():
            opts['cookiefile'] = str(cookie_file)
            logger.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É—é cookies –∏–∑ {cookie_file.name}")
        else:
            logger.info(f"üç™ –§–∞–π–ª {cookie_file.name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫ –±–µ–∑ cookies.")
    return opts

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
def init_cookies_from_env():
    cookies_created = 0
    # Cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π COOKIES_TXT
    cookies_txt_content = os.getenv("COOKIES_TXT")
    if cookies_txt_content:
        cookies_file = Path("cookies.txt")
        with open(cookies_file, 'w', encoding='utf-8') as f:
            f.write(cookies_txt_content)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω {cookies_file.name}")
        cookies_created += 1

    # Cookies –¥–ª—è –±–æ—Ç–æ–≤
    for i in range(1, 4):
        env_var = f"COOKIES_BOT{i}"
        content = os.getenv(env_var)
        if content:
            cookies_file = Path(f"cookies_bot{i}")
            with open(cookies_file, 'w', encoding='utf-8') as f:
                f.write(content)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω {cookies_file.name}")
            cookies_created += 1

    # Cookies –¥–ª—è YouTube
    youtube_cookies_content = os.getenv("COOKIES_YOUTUBE")
    if youtube_cookies_content:
        cookies_file = Path("cookies_youtube.txt")
        with open(cookies_file, 'w', encoding='utf-8') as f:
            f.write(youtube_cookies_content)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω {cookies_file.name}")
        cookies_created += 1

    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {cookies_created} —Ñ–∞–π–ª–æ–≤ cookies")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright –¥–ª—è Instagram ---
async def init_instagram_playwright():
    global IG_BROWSER, IG_CONTEXT, IG_PLAYWRIGHT_READY
    logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Instagram Playwright...")
    try:
        pw = await async_playwright().start()
        IG_BROWSER = await pw.chromium.launch(headless=True)
        cookies_to_load = []
        instagram_cookies_content = os.getenv("COOKIES_INSTAGRAM") or os.getenv("COOKIES_TXT")
        if instagram_cookies_content:
            logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º Instagram cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Playwright")
            try:
                lines = instagram_cookies_content.strip().split('\n')
                for line in lines:
                    if line.startswith('#') or not line.strip():
                        continue
                    try:
                        parts = line.strip().split('\t')
                        if len(parts) < 7:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–π
                        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
                        expires_val = int(parts[4]) if parts[4].isdigit() else None
                        http_only_val = bool(int(parts[3])) if parts[3].isdigit() else False
                        secure_val = bool(int(parts[1])) if parts[1].isdigit() else False

                        cookies_to_load.append({
                            "name": parts[5],
                            "value": parts[6],
                            "domain": parts[0],
                            "path": parts[2],
                            "expires": expires_val,
                            "httpOnly": http_only_val,
                            "secure": secure_val
                        })
                    except (ValueError, IndexError) as e:
                        logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ cookie: {line[:50]} ({e})")
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {e}")
        else:
            logger.info(f"üç™ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è COOKIES_INSTAGRAM/COOKIES_TXT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è Playwright, –∑–∞–ø—É—Å–∫ –±–µ–∑ cookies.")
        IG_CONTEXT = await IG_BROWSER.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.5993.118 Safari/537.36'
        )
        if cookies_to_load:
            await IG_CONTEXT.add_cookies(cookies_to_load)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_to_load)} Instagram cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright.")
        IG_PLAYWRIGHT_READY = True
        logger.info("‚úÖ Instagram Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Instagram Playwright: {e}")
        IG_PLAYWRIGHT_READY = False
        if IG_BROWSER:
            await IG_BROWSER.close()
            IG_BROWSER = None
        if IG_CONTEXT:
            await IG_CONTEXT.close()
            IG_CONTEXT = None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright –¥–ª—è YouTube ---
async def init_youtube_playwright():
    global YT_BROWSER, YT_CONTEXT, YT_PLAYWRIGHT_READY
    logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube Playwright...")
    try:
        pw = await async_playwright().start()
        YT_BROWSER = await pw.chromium.launch(headless=True)
        cookies_to_load = []
        cookie_file_path = Path("cookies_youtube.txt")
        if cookie_file_path.exists():
            logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º YouTube cookies –∏–∑ {cookie_file_path.name}")
            try:
                with open(cookie_file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    for line in lines:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        if line.startswith('#') or not line.strip():
                            continue
                        try:
                            parts = line.strip().split('\t')
                            if len(parts) < 7:
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–π
                            # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
                            expires_val = int(parts[4]) if parts[4].isdigit() else None
                            http_only_val = bool(int(parts[3])) if parts[3].isdigit() else False
                            secure_val = bool(int(parts[1])) if parts[1].isdigit() else False

                            cookies_to_load.append({
                                "name": parts[5],
                                "value": parts[6],
                                "domain": parts[0],
                                "path": parts[2],
                                "expires": expires_val,
                                "httpOnly": http_only_val,
                                "secure": secure_val
                            })
                        except (ValueError, IndexError) as e:
                            logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ cookie: {line[:50]} ({e})")
                            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ {cookie_file_path.name} –¥–ª—è Playwright: {e}")
        else:
            logger.info(f"üç™ –§–∞–π–ª {cookie_file_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Playwright.")
        YT_CONTEXT = await YT_BROWSER.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        )
        if cookies_to_load:
            await YT_CONTEXT.add_cookies(cookies_to_load)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_to_load)} cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç YouTube Playwright.")
        YT_PLAYWRIGHT_READY = True
        logger.info("‚úÖ YouTube Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YouTube Playwright: {e}")
        YT_PLAYWRIGHT_READY = False
        if YT_BROWSER:
            await YT_BROWSER.close()
            YT_BROWSER = None
        if YT_CONTEXT:
            await YT_CONTEXT.close()
            YT_CONTEXT = None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
def cleanup_file(file_path: str):
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            # –ò–∑–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å debug –Ω–∞ info
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {Path(file_path).name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

def cleanup_files(files: List[str]):
    for file_path in files:
        cleanup_file(file_path)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube ---
async def download_youtube(url: str, quality: str = "best") -> Optional[str]:
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YOUTUBE (–∫–∞—á–µ—Å—Ç–≤–æ={quality})...")
    ydl_opts = get_ydl_opts(quality, use_youtube_cookies=True)
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {Path(temp_file).name}")
                return temp_file
            else:
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª")
                return None
    except yt_dlp.DownloadError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å YouTube: {e}")
        # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –∫—É–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –∫—É–∫–∏
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ cookies...")
        ydl_opts_no_cookie = get_ydl_opts(quality, use_youtube_cookies=False)
        try:
            with yt_dlp.YoutubeDL(ydl_opts_no_cookie) as ydl:
                info = ydl.extract_info(url, download=True)
                temp_file = ydl.prepare_filename(info)
                if temp_file and os.path.exists(temp_file):
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (–±–µ–∑ cookies): {Path(temp_file).name}")
                    return temp_file
                else:
                    logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª (–±–µ–∑ cookies)")
                    return None
        except Exception as e2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {e2}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å YouTube: {e}")
        return None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube —á–µ—Ä–µ–∑ Playwright (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç) ---
async def download_youtube_with_playwright(url: str, quality: str = "best") -> Optional[str]:
    global YT_CONTEXT
    if not YT_PLAYWRIGHT_READY or not YT_CONTEXT:
        logger.error("‚ùå YouTube Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None

    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YOUTUBE —á–µ—Ä–µ–∑ Playwright...")
    page = None
    temp_cookies_file = None
    try:
        page = await YT_CONTEXT.new_page()
        await page.goto(url, wait_until='networkidle')
        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await page.wait_for_selector('ytd-video-primary-info-renderer', timeout=10000)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Playwright
        cookies = await YT_CONTEXT.cookies()
        logger.info(f"üç™ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(cookies)} –∫—É–∫–∏ –∏–∑ Playwright –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—É–∫–∏ –¥–ª—è yt-dlp
        temp_cookies_file = Path(tempfile.mktemp(suffix='.txt', prefix='yt_cookies_'))
        with open(temp_cookies_file, 'w', encoding='utf-8') as f:
            f.write("# Netscape HTTP Cookie File\n") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ Netscape cookie file
            for cookie in cookies:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: domain flag path secure expires name value
                # flag: TRUE –µ—Å–ª–∏ –¥–æ–º–µ–Ω –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–æ–º–µ–Ω—ã, FALSE –µ—Å–ª–∏ –Ω–µ—Ç
                # secure: TRUE –µ—Å–ª–∏ –∫—É–∫–∏ —Ç—Ä–µ–±—É–µ—Ç HTTPS, FALSE –µ—Å–ª–∏ –Ω–µ—Ç
                # expires: timestamp (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
                domain = cookie['domain']
                flag = 'TRUE' if domain.startswith('.') else 'FALSE'
                path = cookie['path']
                secure = 'TRUE' if cookie['secure'] else 'FALSE'
                expires = str(cookie['expires']) if cookie['expires'] else '0'
                name = cookie['name']
                value = cookie['value']
                f.write(f"{domain}\t{flag}\t{path}\t{secure}\t{expires}\t{name}\t{value}\n")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫—É–∫–∏
        ydl_opts = get_ydl_opts(quality, use_youtube_cookies=False) # –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–∫–∏ –∏–∑ Playwright
        ydl_opts['cookiefile'] = str(temp_cookies_file)

        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright...")
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright: {Path(temp_file).name}")
                return temp_file
            else:
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–∫–∏ –∏–∑ Playwright")
                return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_youtube_with_playwright: {e}")
        return None
    finally:
        if page:
            await page.close()
        if temp_cookies_file and temp_cookies_file.exists():
            temp_cookies_file.unlink(missing_ok=True) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—É–∫–∏

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å TikTok ---
async def download_tiktok(url: str, quality: str = "1080p") -> Optional[str]:
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å TIKTOK (–∫–∞—á–µ—Å—Ç–≤–æ={quality})...")
    # yt-dlp —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è TikTok, –Ω–æ –º—ã –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç
    # –û–¥–Ω–∞–∫–æ, –¥–ª—è TikTok —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ 'best'
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'best' –∏–ª–∏ 'best[height<=1080]'
    format_str = 'best[height<=1080]' if quality == '1080p' else 'best'
    ydl_opts = {
        'format': format_str,
        'outtmpl': '%(id)s.%(ext)s',
        'noplaylist': True,
        'extractaudio': False,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'no_warnings': True,
        'quiet': True,
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {Path(temp_file).name}")
                return temp_file
            else:
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª")
                return None
    except yt_dlp.DownloadError as e:
        error_str = str(e).lower()
        if "Sign in to confirm you're not a bot" in error_str or "requires authentication" in error_str:
            logger.info("üîÑ –û—à–∏–±–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º Playwright...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å Playwright –¥–ª—è TikTok, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            pass
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å TikTok: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å TikTok: {e}")
        return None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å TikTok (–∫–∞—Ä—É—Å–µ–ª—å) ---
async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Å TIKTOK (–∫–∞—Ä—É—Å–µ–ª—å)...")
    ydl_opts = {
        'format': 'best',
        'outtmpl': '%(id)s/%(autonumber)s.%(ext)s',
        'noplaylist': False, # –ü–æ–∑–≤–æ–ª—è–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã (—Ñ–æ—Ç–æ –∫–∞–∫ –ø–ª–µ–π–ª–∏—Å—Ç)
        'extractaudio': False,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'no_warnings': True,
        'quiet': True,
        'playlistend': 10, # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_dir = ydl.prepare_filename(info).split('%(autonumber)s')[0].rstrip('/')
            if os.path.exists(temp_dir):
                photos = [os.path.join(temp_dir, f) for f in sorted(os.listdir(temp_dir)) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))]
                logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(photos)} —Ñ–æ—Ç–æ: {photos}")
                description = info.get('description', '') or info.get('title', '')
                return photos, description
            else:
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ")
                return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å TikTok: {e}")
        return None, str(e)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Instagram ---
async def download_instagram(url: str) -> Tuple[Optional[str], Optional[List[str]], str]:
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å INSTAGRAM...")
    # yt-dlp –¥–ª—è Instagram
    ydl_opts = {
        'format': 'best',
        'outtmpl': '%(id)s.%(ext)s',
        'noplaylist': True,
        'extractaudio': False,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'no_warnings': True,
        'quiet': True,
    }
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ yt-dlp
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            description = info.get('description', '') or info.get('title', '')
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –ú–µ–¥–∏–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ –≤–∏–¥–µ–æ) —Å–∫–∞—á–∞–Ω–æ: {Path(temp_file).name}")
                return temp_file, None, description
            else:
                # yt-dlp –º–æ–≥ –Ω–µ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ —ç—Ç–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ info
                entries = info.get('entries')
                if entries:
                    photos = []
                    for entry in entries:
                        # yt-dlp –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ entry
                        # –ò–ª–∏ —Ñ–æ—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ thumbnails
                        # –ü–æ–ø—Ä–æ–±—É–µ–º thumbnails
                        thumbnails = entry.get('thumbnails')
                        if thumbnails:
                            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–Ω–∞–∏–±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
                            best_thumb = thumbnails[-1]
                            thumb_url = best_thumb.get('url')
                            if thumb_url:
                                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
                                temp_photo = await download_file_ig(thumb_url, f"{entry.get('id', 'ig_photo')}.jpg")
                                if temp_photo:
                                    photos.append(temp_photo)
                        else:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å media –∏–∑ entry, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
                            # yt-dlp –Ω–µ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                            # –ü–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—Ç–∏–º None –∏ –ø–æ–ø—Ä–æ–±—É–µ–º Playwright
                            pass
                    if photos:
                        logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –∏–∑ Instagram: {photos}")
                        return None, photos, description
                logger.info("üîÑ yt-dlp –Ω–µ –≤–µ—Ä–Ω—É–ª –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º Playwright...")
                # –ï—Å–ª–∏ yt-dlp –Ω–µ –Ω–∞—à—ë–ª –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º Playwright
                return await download_instagram_with_playwright(url)
    except yt_dlp.DownloadError as e:
        error_str = str(e).lower()
        logger.info(f"üîÑ yt-dlp –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}. –ü—Ä–æ–±—É–µ–º Playwright...")
        if "login" in error_str or "private" in error_str or "requires authentication" in error_str:
            logger.info("üîê yt-dlp —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º Playwright...")
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ–±—É–µ–º Playwright
        return await download_instagram_with_playwright(url)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å Instagram (yt-dlp): {e}")
        # –ï—Å–ª–∏ yt-dlp –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Playwright
        return await download_instagram_with_playwright(url)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Instagram —á–µ—Ä–µ–∑ Playwright ---
async def download_instagram_with_playwright(url: str) -> Tuple[Optional[str], Optional[List[str]], str]:
    global IG_CONTEXT
    if not IG_PLAYWRIGHT_READY or not IG_CONTEXT:
        logger.error("‚ùå Instagram Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None, None, "‚ùå Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å INSTAGRAM —á–µ—Ä–µ–∑ Playwright...")
    page = None
    try:
        page = await IG_CONTEXT.new_page()
        await page.goto(url, wait_until='networkidle')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫—É
        page_title = await page.title()
        page_content = await page.content()
        if "Log in" in page_title or "error" in page_content.lower():
            logger.warning("‚ö†Ô∏è [–†–ï–ó–ï–†–í] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞")
            return None, None, "‚ùå [–†–ï–ó–ï–†–í] –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        content_selectors = ['#react-root', 'article', 'main', 'div[role="button"]']
        content_found = False
        for selector in content_selectors:
            try:
                await page.wait_for_selector(selector, timeout=10000)
                content_found = True
                break
            except:
                continue

        if not content_found:
            logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–µ–¥–∏–∞")
            return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–µ–¥–∏–∞"

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ
        video_selector = 'video'
        video_element = await page.query_selector(video_selector)
        if video_element:
            video_url = await video_element.get_attribute('src')
            if video_url:
                temp_file = await download_file_ig(video_url, f"ig_video_{hash(url)}.mp4")
                if temp_file:
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å Instagram —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ Playwright: {Path(temp_file).name}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                    description_element = await page.query_selector('article div[style*="margin"] span')
                    description = await description_element.inner_text() if description_element else ""
                    return temp_file, None, description
                else:
                    logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
                    return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"
            else:
                logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ")
                return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω URL –≤–∏–¥–µ–æ"

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–ª–∏ –≤ –∫–∞—Ä—É—Å–µ–ª–∏)
        img_selector = 'article img'
        img_elements = await page.query_selector_all(img_selector)
        if img_elements:
            photos = []
            for i, img_element in enumerate(img_elements):
                img_url = await img_element.get_attribute('src')
                if img_url:
                    temp_photo = await download_file_ig(img_url, f"ig_photo_{hash(url)}_{i}.jpg")
                    if temp_photo:
                        photos.append(temp_photo)
            if photos:
                logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(photos)} —Ñ–æ—Ç–æ —Å Instagram —á–µ—Ä–µ–∑ Playwright: {photos}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                description_element = await page.query_selector('article div[style*="margin"] span')
                description = await description_element.inner_text() if description_element else ""
                return None, photos, description
            else:
                logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ")
                return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ"
        else:
            logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        logger.error("‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return None, None, "‚ùå [–†–ï–ó–ï–†–í] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_instagram_with_playwright: {e}")
        return None, None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if page:
            await page.close()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ---
async def download_file_ig(url: str, save_path: str, timeout: int = 60) -> Optional[str]:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=timeout)) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        f.write(await resp.read())
                    return save_path
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {url}: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {url}: {e}")
        return None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ ---
async def send_video_or_message(chat_id: int, file_path: str, caption: str = ""):
    if not file_path or not os.path.exists(file_path):
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
        return False

    file_size = os.path.getsize(file_path)
    size_mb = file_size / (1024 * 1024)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    file_ext = Path(file_path).suffix.lower()
    is_photo = file_ext in ['.jpg', '.jpeg', '.png', '.webp']

    if size_mb > 50:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 50 –ú–ë, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫
        logger.info(f"üì¶ –§–∞–π–ª ({size_mb:.1f} –ú–ë) —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram. –ü—Ä–æ–±—É–µ–º file.io...")
        link = await upload_to_fileio(file_path)
        if link:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ –ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram ({size_mb:.1f} –ú–ë), –Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                     f"üì• –°–∫–∞—á–∞—Ç—å: {link}\n"
                     f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 50 –ú–ë –Ω–∞–ø—Ä—è–º—É—é."
            )
            logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ file.io")
            return True
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª ({size_mb:.1f} –ú–ë) –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫."
            )
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª ({size_mb:.1f} –ú–ë) –Ω–∏ –Ω–∞–ø—Ä—è–º—É—é, –Ω–∏ —á–µ—Ä–µ–∑ file.io.")
            return False
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª <= 50 –ú–ë, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        try:
            if is_photo:
                await bot.send_photo(chat_id=chat_id, photo=FSInputFile(file_path), caption=caption)
            else: # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ
                await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
            logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({size_mb:.1f} –ú–ë)")
            return True
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            # –î–∞–∂–µ –µ—Å–ª–∏ TelegramBadRequest –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Ä–∞–∑–º–µ—Ä–æ–º, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫
            logger.info(f"üì¶ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–æ–±—É–µ–º file.io... (—Ñ–∞–π–ª {size_mb:.1f} –ú–ë)")
            link = await upload_to_fileio(file_path)
            if link:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"üì¶ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é ({size_mb:.1f} –ú–ë), –Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                         f"üì• –°–∫–∞—á–∞—Ç—å: {link}"
                )
                logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ file.io")
                return True
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª ({size_mb:.1f} –ú–ë) –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫."
                )
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª ({size_mb:.1f} –ú–ë) –Ω–∏ –Ω–∞–ø—Ä—è–º—É—é, –Ω–∏ —á–µ—Ä–µ–∑ file.io.")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ file.io ---
async def upload_to_fileio(file_path: str) -> Optional[str]:
    try:
        async with aiohttp.ClientSession() as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                async with session.post('https://file.io/', data=data) as resp:
                    if resp.status == 200:
                        response_json = await resp.json()
                        if response_json.get('success'):
                            return response_json.get('link')
                        else:
                            logger.error(f"‚ùå file.io –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response_json.get('message')}")
                            return None
                    else:
                        logger.error(f"‚ùå file.io –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {resp.status}")
                        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ file.io: {e}")
        return None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üé¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    welcome_text = (
        f"üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n"
        f"–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        f"‚Ä¢ YouTube\n"
        f"‚Ä¢ TikTok\n"
        f"‚Ä¢ Instagram (–ø–æ—Å—Ç—ã, reels, –∫–∞—Ä—É—Å–µ–ª–∏)\n"
        f"üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{get_quality_setting(user_id).upper()}</b>"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ---
@dp.message(F.text == "üé¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_welcome(message: Message):
    help_text = (
        "üé¨ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VideoBot</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube, TikTok –∏–ª–∏ Instagram.\n"
        "2. –ë–æ—Ç —Å–∫–∞—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≤–∏–¥–µ–æ (–∏–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—É—Å–µ–ª—å).\n"
        "3. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏."
    )
    await message.answer(help_text, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings ---
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=q.upper()) for q in QUALITY_FORMATS.keys()],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ ---
@dp.message(VideoStates.choosing_quality, F.text.in_(list(QUALITY_FORMATS.keys()) + ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]))
async def process_quality_choice(message: Message, state: FSMContext):
    choice = message.text.lower()
    if choice == "–Ω–∞–∑–∞–¥":
        await state.clear()
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.", reply_markup=main_keyboard())
        return

    if choice in QUALITY_FORMATS:
        user_settings[message.from_user.id] = choice
        await state.clear()
        await message.answer(
            f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>{choice.upper()}</b>.",
            reply_markup=main_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ ---
@dp.message(F.text)
async def handle_link(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    state = await dp.current_state(chat=message.chat.id, user=message.from_user.id)
    if state == VideoStates.choosing_quality:
        # –ï—Å–ª–∏ –¥–∞, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Å—ã–ª–æ–∫ –∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        return await process_quality_choice(message, state)

    url = message.text.strip()
    user_id = message.from_user.id
    chat_id = message.chat.id
    quality = get_quality_setting(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if "youtube.com" in url or "youtu.be" in url:
        platform = "youtube"
    elif "tiktok.com" in url or "vm.tiktok.com" in url or "vt.tiktok.com" in url:
        platform = "tiktok"
    elif "instagram.com" in url or "instagr.am" in url:
        platform = "instagram"
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: YouTube, TikTok, Instagram.")
        return

    status_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    temp_file = None
    temp_photos = []

    try:
        # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –≤—ã–∑–æ–≤—ã –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if platform == "youtube":
            temp_file = await download_youtube(url, quality)
            if not temp_file:
                 # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Playwright
                temp_file = await download_youtube_with_playwright(url, quality)
        elif platform == "tiktok":
            if '/photo/' in url.lower() or '/photos/' in url.lower():
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–∫–∞—Ä—É—Å–µ–ª–∏ TikTok
                photos, description = await download_tiktok_photos(url)
                await bot.delete_message(chat_id=chat_id, message_id=status_msg.message_id)
                if photos:
                    temp_photos = photos
                    media_group = [
                        InputMediaPhoto(
                            media=FSInputFile(photo),
                            caption=description if i == 0 else None # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                        )
                        for i, photo in enumerate(photos)
                    ]
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram - 10 —Ñ–æ—Ç–æ –∑–∞ —Ä–∞–∑)
                    batch_size = 10
                    for i in range(0, len(media_group), batch_size):
                        batch = media_group[i:i + batch_size]
                        await bot.send_media_group(chat_id=message.chat.id, media=batch)
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –∏–∑ TikTok")
                    cleanup_files(photos)
                    return # –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ —Å TikTok.")
                    return
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ TikTok
                temp_file = await download_tiktok(url, quality)
        elif platform == "instagram":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Instagram (–≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –∫–∞—Ä—É—Å–µ–ª—å)
            video_path, photos, description = await download_instagram(url)
            await bot.delete_message(chat_id=chat_id, message_id=status_msg.message_id)
            if video_path:
                temp_file = video_path
                await send_video_or_message(message.chat.id, temp_file, caption=description)
                cleanup_file(temp_file)
                return
            elif photos:
                temp_photos = photos
                media_group = [
                    InputMediaPhoto(
                        media=FSInputFile(photo),
                        caption=description if i == 0 else None
                    )
                    for i, photo in enumerate(photos)
                ]
                batch_size = 10
                for i in range(0, len(media_group), batch_size):
                    batch = media_group[i:i + batch_size]
                    await bot.send_media_group(chat_id=message.chat.id, media=batch)
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –∏–∑ Instagram")
                cleanup_files(photos)
                return
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ —Å Instagram.")
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ (YouTube, TikTok)
        await bot.delete_message(chat_id=chat_id, message_id=status_msg.message_id)

        if temp_file:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è send_video_or_message
            await send_video_or_message(message.chat.id, temp_file)
            cleanup_file(temp_file) # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        try:
            await bot.edit_message_text(text=error_msg, chat_id=chat_id, message_id=status_msg.message_id)
        except:
            await message.answer(error_msg)
    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if temp_file:
            cleanup_file(temp_file)
        if temp_photos:
            cleanup_files(temp_photos)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    global bot
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    init_cookies_from_env()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright
    await init_instagram_playwright()
    await init_youtube_playwright()

    bot = Bot(token=BOT_TOKEN, session=AiohttpSession())

    WEBHOOK_PATH = "/"
    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

    if WEBHOOK_URL:
        # --- –†–µ–∂–∏–º Webhook ---
        logger.info(f"üì° –†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ Webhook: {WEBHOOK_URL}")
        await bot.set_webhook(WEBHOOK_URL)
        app = aiohttp.web.Application()
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)
        port = int(os.getenv("PORT", 8000))
        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, host="0.0.0.0", port=port)
        await site.start()
        logger.info(f"üì° Webhook-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        try:
            while True:
                await asyncio.sleep(3600)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Webhook)")
        finally:
            await bot.delete_webhook(drop_pending_updates=True)
            await runner.cleanup()
    else:
        # --- –†–µ–∂–∏–º Polling ---
        logger.info("üîÑ –†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ Polling")
        try:
            await dp.start_polling(bot, skip_updates=True)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Polling)")
        finally:
            await bot.session.close()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if IG_BROWSER:
        logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä Instagram Playwright...")
        await IG_BROWSER.close()
    if YT_BROWSER:
        logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä YouTube Playwright...")
        await YT_BROWSER.close()

if __name__ == "__main__":
    asyncio.run(main())