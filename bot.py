import os
import tempfile
import asyncio
import logging
import re
from pathlib import Path
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
import yt_dlp
import instaloader
import pickle

# === üß∞ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === üîê –ó–ê–ì–†–£–ó–ö–ê –¢–û–ö–ï–ù–ê ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === üß† –•–†–ê–ù–ò–õ–ò–©–ï –ù–ê–°–¢–†–û–ï–ö ===
user_settings = {}

# === üé® –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class VideoStates(StatesGroup):
    choosing_quality = State()

# === üì∫ –ö–ê–ß–ï–°–¢–í–ê –í–ò–î–ï–û ===
QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
    "1080p": 'bestvideo[ext=mp4][height<=1080]+bestaudio[ext=m4a]/best[height<=1080][ext=mp4]/best',
    "720p": 'bestvideo[ext=mp4][height<=720]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best',
    "480p": 'best[height<=480][ext=mp4]/best[ext=mp4]/best',
    "360p": 'best[height<=360][ext=mp4]/best[ext=mp4]/best'
}

# === üõ† –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_quality_setting(user_id):
    return user_settings.get(user_id, "best")

def get_ydl_opts(quality="best"):
    return {
        'format': QUALITY_FORMATS.get(quality, QUALITY_FORMATS["best"]),
        'merge_output_format': 'mp4',
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        'extractor_args': {
            'youtube': {
                'skip': ['hls', 'dash'],
            }
        }
    }

def is_valid_url(url):
    regex = re.compile(
        r'^(https?://)?(www\.)?'
        r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vm\.tiktok\.com|vt\.tiktok\.com)/',
        re.IGNORECASE
    )
    return re.match(regex, url) is not None

def detect_platform(url):
    if 'youtube.com' in url or 'youtu.be' in url:
        return 'youtube'
    elif 'tiktok.com' in url or 'vm.tiktok.com' in url or 'vt.tiktok.com' in url:
        return 'tiktok'
    elif 'instagram.com' in url:
        return 'instagram'
    return 'unknown'

# === üß∫ –ö–≠–® (–≤ –ø–∞–ø–∫–µ cache) ===
CACHE_DIR = Path("cache")
CACHE_DIR.mkdir(exist_ok=True)

def save_to_cache(key, data):
    cache_file = CACHE_DIR / f"{key}.pkl"
    with open(cache_file, 'wb') as f:
        pickle.dump(data, f)

def load_from_cache(key):
    cache_file = CACHE_DIR / f"{key}.pkl"
    if cache_file.exists():
        with open(cache_file, 'rb') as f:
            return pickle.load(f)
    return None

def get_cache_key(url):
    # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
    import hashlib
    return hashlib.md5(url.encode()).hexdigest()

# === üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï ===
async def download_instagram(url):
    cache_key = get_cache_key(url)
    cached_result = load_from_cache(cache_key)
    if cached_result:
        logger.info("‚úÖ Instagram: –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞")
        return cached_result

    # –ü–æ–ø—ã—Ç–∫–∞ 1: instaloader
    try:
        L = instaloader.Instaloader(
            download_videos=True,
            download_pictures=True,
            download_geotags=False,
            download_comments=False,
            save_metadata=False,
            quiet=True
        )
        shortcode = re.search(r'/p/([^/]+)|/reel/([^/]+)', url)
        if not shortcode:
            pass
        else:
            shortcode = shortcode.group(1) or shortcode.group(2)
            post = instaloader.Post.from_shortcode(L.context, shortcode)

            if post.is_video:
                # –≠—Ç–æ –≤–∏–¥–µ–æ
                video_url = post.video_url
                temp_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}.mp4")

                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
                    async with session.get(video_url) as resp:
                        if resp.status == 200:
                            with open(temp_path, 'wb') as f:
                                async for chunk in resp.content.iter_chunked(8192):
                                    f.write(chunk)
                            result = temp_path, None, None  # —Ñ–∞–π–ª, —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ
                            save_to_cache(cache_key, result)
                            return result
                        else:
                            pass
            else:
                # –≠—Ç–æ —Ñ–æ—Ç–æ/—Ñ–æ—Ç–æ-–≥–∞–ª–µ—Ä–µ—è
                photos = []
                if post.typename == "GraphSidecar":
                    # –≠—Ç–æ –≥–∞–ª–µ—Ä–µ—è
                    for i, node in enumerate(post.get_sidecar_nodes()):
                        if node.is_video:
                            continue
                        if i >= 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ
                            break
                        else:
                            photo_url = node.display_url
                            photo_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}_{i}.jpg")
                            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
                                async with session.get(photo_url) as resp:
                                    if resp.status == 200:
                                        with open(photo_path, 'wb') as f:
                                            async for chunk in resp.content.iter_chunked(8192):
                                                f.write(chunk)
                                        photos.append(photo_path)
                else:
                    # –≠—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
                    photo_url = post.url
                    photo_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}.jpg")
                    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
                        async with session.get(photo_url) as resp:
                            if resp.status == 200:
                                with open(photo_path, 'wb') as f:
                                    async for chunk in resp.content.iter_chunked(8192):
                                        f.write(chunk)
                                photos.append(photo_path)

                description = post.caption if post.caption else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                result = None, photos, description
                save_to_cache(cache_key, result)
                return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Instagram (—Å–ø–æ—Å–æ–± 1): {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ 2: yt-dlp
    try:
        ydl_opts = get_ydl_opts(get_quality_setting(0))
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
        result = temp_file, None, None
        save_to_cache(cache_key, result)
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Instagram (—Å–ø–æ—Å–æ–± 2): {e}")

    return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–æ—Å—Ç —Å Instagram."

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï TIKTOK –§–û–¢–û ===
async def download_tiktok_photos(url):
    cache_key = get_cache_key(url)
    cached_result = load_from_cache(cache_key)
    if cached_result:
        logger.info("‚úÖ TikTok: –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞")
        return cached_result

    # –ü–æ–ø—ã—Ç–∫–∞ 1: yt-dlp
    try:
        ydl_opts = get_ydl_opts(get_quality_setting(0))
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

            if info.get('_type') == 'playlist' or 'entries' in info:
                # –≠—Ç–æ TikTok –≥–∞–ª–µ—Ä–µ—è (—Ñ–æ—Ç–æ)
                photos = []
                for i, entry in enumerate(info['entries']):
                    if i >= 30:  # –ú–∞–∫—Å–∏–º—É–º 30 —Ñ–æ—Ç–æ
                        break
                    img_url = entry.get('thumbnail')
                    if img_url:
                        img_path = os.path.join(tempfile.gettempdir(), f"tiktok_{entry.get('id', 'unknown')}_{i}.jpg")
                        async with aiohttp.ClientSession() as session:
                            async with session.get(img_url) as img_resp:
                                if img_resp.status == 200:
                                    with open(img_path, 'wb') as f:
                                        async for chunk in img_resp.content.iter_chunked(8192):
                                            f.write(chunk)
                                    photos.append(img_path)

                description = info.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                result = photos, description
                save_to_cache(cache_key, result)
                return result
            else:
                # –≠—Ç–æ –≤–∏–¥–µ–æ
                return None, "‚ùå –≠—Ç–æ TikTok –≤–∏–¥–µ–æ, –∞ –Ω–µ —Ñ–æ—Ç–æ."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ TikTok (—Å–ø–æ—Å–æ–± 1): {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ 2: —á–µ—Ä–µ–∑ oembed API
    try:
        api_url = f"https://www.tiktok.com/oembed?url={url}"
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    title = data.get('title', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                    author = data.get('author_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')

                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    photos = []
                    # TikTok API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "slide"
                    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    ydl_opts = get_ydl_opts(get_quality_setting(0))
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        info = ydl.extract_info(url, download=False)

                        if info.get('_type') == 'playlist' or 'entries' in info:
                            for i, entry in enumerate(info['entries']):
                                if i >= 30:  # –ú–∞–∫—Å–∏–º—É–º 30 —Ñ–æ—Ç–æ
                                    break
                                img_url = entry.get('thumbnail')
                                if img_url:
                                    img_path = os.path.join(tempfile.gettempdir(), f"tiktok_{info.get('id', 'unknown')}_{i}.jpg")
                                    async with session.get(img_url) as img_resp:
                                        if img_resp.status == 200:
                                            with open(img_path, 'wb') as f:
                                                async for chunk in img_resp.content.iter_chunked(8192):
                                                    f.write(chunk)
                                            photos.append(img_path)

                    description = f"{title} (@{author})"
                    result = photos, description
                    save_to_cache(cache_key, result)
                    return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ TikTok (—Å–ø–æ—Å–æ–± 2): {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ 3: —á–µ—Ä–µ–∑ Selenium (–æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã)
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        import undetected_chromedriver as uc

        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)

        driver = uc.Chrome(options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        driver.get(url)
        await asyncio.sleep(5)  # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏

        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        img_elements = driver.find_elements("tag name", "img")
        photos = []
        for i, img in enumerate(img_elements):
            if i >= 30:  # –ú–∞–∫—Å–∏–º—É–º 30 —Ñ–æ—Ç–æ
                break
            img_url = img.get_attribute('src')
            if img_url and 'tiktok' in img_url:
                img_path = os.path.join(tempfile.gettempdir(), f"tiktok_selenium_{i}.jpg")
                async with aiohttp.ClientSession() as session:
                    async with session.get(img_url) as img_resp:
                        if img_resp.status == 200:
                            with open(img_path, 'wb') as f:
                                async for chunk in img_resp.content.iter_chunked(8192):
                                    f.write(chunk)
                            photos.append(img_path)

        driver.quit()

        description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Selenium)"
        result = photos, description
        save_to_cache(cache_key, result)
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ TikTok (—Å–ø–æ—Å–æ–± 3 - Selenium): {e}")

    result = None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ TikTok."
    save_to_cache(cache_key, result)
    return result

# === üì§ –û–¢–ü–†–ê–í–ö–ê –§–û–¢–û –ò –û–ü–ò–°–ê–ù–ò–Ø (–í –û–î–ù–û–ú –°–û–û–ë–©–ï–ù–ò–ò) ===
async def send_photos_and_caption(chat_id, photos, caption):
    if not photos:
        return False

    if len(photos) == 1:
        # –û–¥–Ω–æ —Ñ–æ—Ç–æ
        await bot.send_photo(chat_id=chat_id, photo=FSInputFile(photos[0]), caption=caption)
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 10 –¥–ª—è Instagram, 30 –¥–ª—è TikTok)
        media_group = []
        for i, photo_path in enumerate(photos):
            if i == 0:
                media_group.append(types.InputMediaPhoto(media=FSInputFile(photo_path), caption=caption))
            else:
                media_group.append(types.InputMediaPhoto(media=FSInputFile(photo_path)))
        await bot.send_media_group(chat_id=chat_id, media=media_group)

    return True

# === üì§ –û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–û–í ===
async def upload_to_filebin_net(file_path):
    try:
        timeout = aiohttp.ClientTimeout(total=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                resp = await session.post('https://filebin.net/', data=data, params={'expiry': '3d'})
                if resp.status == 200:
                    result = await resp.text()
                    import re
                    match = re.search(r'https://filebin\.net/[^"\s<>\)]+', result)
                    if match:
                        return match.group(0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ filebin.net: {e}")
    return None

async def upload_to_gofile_io(file_path):
    try:
        timeout = aiohttp.ClientTimeout(total=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                resp = await session.post('https://store2.gofile.io/UploadServer', data=data)
                if resp.status == 200:
                    result = await resp.json()
                    url = result.get('data', {}).get('downloadPage', '')
                    if url:
                        return url.replace('?c=', '/?c=')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ gofile.io: {e}")
    return None

async def upload_to_tmpfiles_org(file_path):
    try:
        timeout = aiohttp.ClientTimeout(total=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                resp = await session.post('https://tmpfiles.org/api/v1/upload', data=data)
                if resp.status == 200:
                    result = await resp.json()
                    url = result.get('data', {}).get('url', '')
                    if url:
                        direct_url = url.replace('tmpfiles.org/', 'tmpfiles.org/dl/')
                        return direct_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ tmpfiles.org: {e}")
    return None

async def send_video_or_link(chat_id, file_path, caption=""):
    file_size = Path(file_path).stat().st_size
    size_mb = file_size / (1024 * 1024)

    if size_mb <= 50:
        try:
            await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
            return True
        except TelegramBadRequest as e:
            logger.error(f"Telegram error: {e}")
            return False
    else:
        # –ü—Ä–æ–±—É–µ–º filebin.net
        download_link = await upload_to_filebin_net(file_path)
        if download_link:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë)\n\n"
                     f"üì• –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: {download_link}\n\n"
                     f"‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ 3 –¥–Ω—è."
            )
            return True

        # –ï—Å–ª–∏ filebin.net –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ–±—É–µ–º gofile.io
        download_link = await upload_to_gofile_io(file_path)
        if download_link:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë)\n\n"
                     f"üì• –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: {download_link}\n\n"
                     f"‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ 3 –¥–Ω—è."
            )
            return True

        # –ï—Å–ª–∏ gofile.io –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ–±—É–µ–º tmpfiles.org
        download_link = await upload_to_tmpfiles_org(file_path)
        if download_link:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë)\n\n"
                     f"üì• –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: {download_link}\n\n"
                     f"‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ 3 –¥–Ω—è."
            )
            return True

        # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë). –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç."
        )
        return False

# === üß≠ –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    )

def settings_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –õ—É—á—à–µ–µ")],
            [KeyboardButton(text="üé¨ 1080p"), KeyboardButton(text="üì∫ 720p")],
            [KeyboardButton(text="‚ö° 480p"), KeyboardButton(text="üì± 360p")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# === üöÄ –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    welcome_text = (
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram\n\n"
        " –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é –∑–∞ —Ç–µ–±—è!"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )

@dp.message(VideoStates.choosing_quality, F.text.in_(["üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p"]))
async def set_quality(message: types.Message, state: FSMContext):
    quality_map = {
        "üåü –õ—É—á—à–µ–µ": "best",
        "üé¨ 1080p": "1080p",
        "üì∫ 720p": "720p",
        "‚ö° 480p": "480p",
        "üì± 360p": "360p"
    }
    user_settings[message.from_user.id] = quality_map[message.text]
    await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{message.text}</b>", reply_markup=main_keyboard(), parse_mode="HTML")
    await state.clear()

@dp.message(VideoStates.choosing_quality, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())

# === üì• –û–ë–†–ê–ë–û–¢–ö–ê –°–°–´–õ–û–ö ===
@dp.message(F.text)
async def handle_link(message: types.Message):
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, TikTok –∏–ª–∏ Instagram.")
        return

    platform = detect_platform(url)
    status_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {platform.upper()}...")
    user_quality = get_quality_setting(message.from_user.id)
    temp_file = None

    try:
        # Instagram
        if platform == 'instagram':
            temp_file, photos, description = await download_instagram(url)
            if description and "‚ùå" in description:
                await status_msg.edit_text(description)
                return

            if photos:
                # –≠—Ç–æ —Ñ–æ—Ç–æ/—Ñ–æ—Ç–æ-–≥–∞–ª–µ—Ä–µ—è
                await status_msg.delete()
                await send_photos_and_caption(message.chat.id, photos, description)
                return

        # TikTok
        elif platform == 'tiktok':
            if '/photo/' in url:
                # –≠—Ç–æ TikTok —Ñ–æ—Ç–æ
                photos, description = await download_tiktok_photos(url)
                if photos:
                    await status_msg.delete()
                    await send_photos_and_caption(message.chat.id, photos, description)
                    return
                else:
                    await status_msg.edit_text(description)
                    return
            else:
                # –≠—Ç–æ TikTok –≤–∏–¥–µ–æ
                ydl_opts = get_ydl_opts(user_quality)
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(url, download=True)
                    temp_file = ydl.prepare_filename(info)

        # YouTube
        else:
            ydl_opts = get_ydl_opts(user_quality)
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                temp_file = ydl.prepare_filename(info)

        if not temp_file or not os.path.exists(temp_file):
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ.")
            return

        await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
        await send_video_or_link(message.chat.id, temp_file, caption="üé• –í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ!")

    except Exception as e:
        if "Unsupported URL" in str(e):
            # –≠—Ç–æ TikTok —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º Selenium
            if platform == 'tiktok' and '/photo/' in url:
                logger.info("üîÑ yt-dlp –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç URL, –ø—Ä–æ–±—É–µ–º Selenium...")
                photos, description = await download_tiktok_photos(url)
                if photos:
                    await status_msg.delete()
                    await send_photos_and_caption(message.chat.id, photos, description)
                    return
                else:
                    await status_msg.edit_text(description)
                    return
        await status_msg.edit_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if temp_file and os.path.exists(temp_file):
            try:
                os.remove(temp_file)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

# === üèÅ –ó–ê–ü–£–°–ö ===
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")