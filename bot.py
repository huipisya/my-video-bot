import os
import tempfile
import asyncio
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import yt_dlp

# üîë –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway Variables.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}

class VideoStates(StatesGroup):
    choosing_quality = State()

def get_quality_setting(user_id):
    return user_settings.get(user_id, "1080p")

def get_ydl_opts(quality="1080p"):
    base_opts = {
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(title).50s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'retries': 5,
        'fragment_retries': 5,
        'extractor_retries': 5,
    }
    if quality == "480p":
        base_opts['format'] = 'best[height<=480][ext=mp4]/best[ext=mp4]/best'
    else:  # 1080p
        base_opts['format'] = 'bestvideo[ext=mp4][height<=1080]+bestaudio[ext=m4a]/best[ext=mp4]/best'
        base_opts['merge_output_format'] = 'mp4'
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists("cookies.txt"):
        base_opts['cookiefile'] = "cookies.txt"
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é cookies.txt –¥–ª—è YouTube")
    
    return base_opts

def upload_to_fileio(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ file.io, —Å—Å—ã–ª–∫–∞ –∂–∏–≤—ë—Ç 3 –¥–Ω—è"""
    try:
        with open(file_path, 'rb') as f:
            response = requests.post('https://file.io/?expires=3d', files={'file': f}, timeout=600)
        if response.status_code == 200:
            data = response.json()
            return data.get('link')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    return None

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer(
        "üé• –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ YouTube Shorts!\n\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1080p.\n"
        "–ù–∞–∂–º–∏ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ.",
        reply_markup=kb
    )

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé¨ 1080p ‚Äî –ö–∞—á–µ—Å—Ç–≤–æ")],
            [KeyboardButton(text="‚ö° 480p ‚Äî –°–∫–æ—Ä–æ—Å—Ç—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", reply_markup=kb)

@dp.message(VideoStates.choosing_quality, F.text.contains("1080p"))
async def set_quality_1080p(message: types.Message, state: FSMContext):
    user_settings[message.from_user.id] = "1080p"
    await state.clear()
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer("‚úÖ –í—ã–±—Ä–∞–Ω–æ: **1080p (–∫–∞—á–µ—Å—Ç–≤–æ)**", reply_markup=kb)

@dp.message(VideoStates.choosing_quality, F.text.contains("480p"))
async def set_quality_480p(message: types.Message, state: FSMContext):
    user_settings[message.from_user.id] = "480p"
    await state.clear()
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer("‚úÖ –í—ã–±—Ä–∞–Ω–æ: **480p (—Å–∫–æ—Ä–æ—Å—Ç—å)**", reply_markup=kb)

@dp.message()
async def download_video(message: types.Message):
    url = message.text.strip()
    if not url.startswith(('http://', 'https://')):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    user_id = message.from_user.id
    quality = get_quality_setting(user_id)
    await message.answer(f"‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤ {quality}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã.")

    temp_file = None
    try:
        ydl_opts = get_ydl_opts(quality)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)

        if not os.path.exists(temp_file):
            raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

        file_size = os.path.getsize(temp_file)
        file_size_mb = file_size / (1024 * 1024)

        if file_size <= 50 * 1024 * 1024:
            await bot.send_video(
                chat_id=message.chat.id,
                video=types.FSInputFile(temp_file),
                caption=f"‚úÖ –í–æ—Ç —Ç–≤–æ—ë –≤–∏–¥–µ–æ ({quality})!"
            )
        else:
            await message.answer(
                f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size_mb:.1f} –ú–ë), "
                "–Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ!"
            )
            await message.answer("üì§ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ –æ–±–ª–∞–∫–æ...")

            download_link = await asyncio.get_event_loop().run_in_executor(None, upload_to_fileio, temp_file)

            if download_link:
                await message.answer(
                    f"üî• –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{download_link}\n\n"
                    "üìé –°—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 3 –¥–Ω—è."
                )
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –æ–±–ª–∞–∫–æ.")

    except Exception as e:
        error_msg = str(e)
        if "private" in error_msg.lower() or "login" in error_msg.lower():
            await message.answer("‚ùå –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ.")
        elif "404" in error_msg or "not found" in error_msg.lower():
            await message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        elif "Sign in to confirm" in error_msg:
            await message.answer("‚ùå YouTube –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–≥—Ä—É–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")
        elif "ffmpeg" in error_msg.lower():
            await message.answer("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π 480p –∫–∞—á–µ—Å—Ç–≤–æ.")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg[:150]}")
    finally:
        if temp_file and os.path.exists(temp_file):
            try:
                os.remove(temp_file)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {e}")

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())