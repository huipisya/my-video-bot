# bot.py
import asyncio
import json
import logging
import os
import tempfile
from pathlib import Path
from typing import Optional, List, Tuple, Dict, Any

import aiohttp.web
import yt_dlp
from aiogram import Bot, Dispatcher, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    FSInputFile,
    InputMediaPhoto,
    ReplyKeyboardMarkup,
    KeyboardButton,
    CallbackQuery,
    FSInputFile
)

from dotenv import load_dotenv
from playwright.async_api import async_playwright, Browser, BrowserContext
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ stdout (–≤–∞–∂–Ω–æ –¥–ª—è Windows –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö —Å—Ä–µ–¥)
sys.stdout.reconfigure(encoding='utf-8')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ -
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook

YT_BROWSER: Optional[Browser] = None
YT_CONTEXT: Optional[BrowserContext] = None
YT_PLAYWRIGHT_READY = False

IG_BROWSER: Optional[Browser] = None
IG_CONTEXT: Optional[BrowserContext] = None
IG_PLAYWRIGHT_READY = False

bot: Optional[Bot] = None
dp = Dispatcher()

user_settings = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SETTINGS_FILE = 'user_settings.json' # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
RATE_LIMIT_DELAY = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ -
def load_user_settings():
    global user_settings
    try:
        with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
            user_settings = json.load(f)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_settings)} –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {SETTINGS_FILE}")
    except FileNotFoundError:
        logger.info(f"üìÅ –§–∞–π–ª {SETTINGS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        user_settings = {}
        save_user_settings() # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
    except json.JSONDecodeError:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ {SETTINGS_FILE}, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        user_settings = {}
        save_user_settings() # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        user_settings = {} # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª -
def save_user_settings():
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_settings, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {SETTINGS_FILE}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ {SETTINGS_FILE}: {e}")

# - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM -
class VideoStates(StatesGroup):
    choosing_quality = State()

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è -
def init_cookies_from_env():
    """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª—ã cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    cookie_env_to_file = {
        "COOKIES_BOT1": "cookies_bot1",
        "COOKIES_BOT2": "cookies_bot2",
        "COOKIES_BOT3": "cookies_bot3",
        "COOKIES_YOUTUBE": "cookies_youtube.txt",
    }

    created_files = []
    for env_var, filename in cookie_env_to_file.items():
        cookies_json = os.getenv(env_var)
        if cookies_json:
            try:
                cookies_data = json.loads(cookies_json)
                with open(filename, 'w', encoding='utf-8') as f:
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è yt-dlp
                    json.dump(cookies_data, f, ensure_ascii=False, indent=2)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω {filename}")
                created_files.append(filename)
            except json.JSONDecodeError:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è {env_var}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        else:
            logger.info(f"üç™ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_var} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ {filename}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ cookies_youtube.txt, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if "cookies_youtube.txt" not in created_files:
        if not os.path.exists("cookies_youtube.txt"):
            Path("cookies_youtube.txt").touch()
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª cookies_youtube.txt")

    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_files)} —Ñ–∞–π–ª–æ–≤ cookies")

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -
def get_quality_setting(user_id: int) -> str:
    return user_settings.get(user_id, "best") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "best"

# - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π yt-dlp -
def get_ydl_opts(quality: str = "best", use_youtube_cookies: bool = True) -> Dict[str, Any]:
    cookie_file = "cookies_youtube.txt" if use_youtube_cookies else None
    ydl_opts = {
        'format': quality if quality != 'best' else 'best',
        'outtmpl': '%(title)s.%(ext)s',
        'noplaylist': True,
        'extractaudio': False,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'no_warnings': False,
        'quiet': False,
    }
    if cookie_file and os.path.exists(cookie_file):
        ydl_opts['cookiefile'] = cookie_file
    return ydl_opts

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright –¥–ª—è Instagram -
async def init_instagram_playwright():
    global IG_BROWSER, IG_CONTEXT, IG_PLAYWRIGHT_READY
    logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Instagram Playwright...")
    try:
        pw = await async_playwright().start()
        IG_BROWSER = await pw.chromium.launch(headless=True)
        IG_CONTEXT = await IG_BROWSER.new_context(
            # viewport={'width': 1920, 'height': 1080}, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        )

        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies –¥–ª—è Instagram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        cookies_json = os.getenv("COOKIES_INSTAGRAM") or os.getenv("COOKIES_TXT")
        if cookies_json:
            try:
                cookies_data = json.loads(cookies_json)
                # yt-dlp —Ñ–æ—Ä–º–∞—Ç cookies -> Playwright —Ñ–æ—Ä–º–∞—Ç cookies
                cookies_to_load = []
                for cookie in cookies_data:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    # yt-dlp –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {'name', 'value', 'domain', 'path', 'expires', 'secure', 'httpOnly'}
                    # Playwright –æ–∂–∏–¥–∞–µ—Ç {'name', 'value', 'domain', 'path', 'expires', 'secure', 'httpOnly', 'sameSite'}
                    pw_cookie = {
                        'name': cookie.get('name', ''),
                        'value': cookie.get('value', ''),
                        'domain': cookie.get('domain', ''),
                        'path': cookie.get('path', '/'),
                        'expires': int(cookie.get('expires', 0)) if cookie.get('expires') else None,
                        'secure': bool(cookie.get('secure', False)),
                        'httpOnly': bool(cookie.get('httpOnly', False)),
                        'sameSite': 'Lax' # –∏–ª–∏ 'Strict', 'None' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    }
                    # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
                    pw_cookie = {k: v for k, v in pw_cookie.items() if v is not None}
                    cookies_to_load.append(pw_cookie)

                await IG_CONTEXT.add_cookies(cookies_to_load)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_to_load)} Instagram cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright.")
            except json.JSONDecodeError:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è COOKIES_INSTAGRAM/COOKIES_TXT")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright: {e}")
        else:
            logger.info("üç™ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è COOKIES_INSTAGRAM/COOKIES_TXT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è Playwright, –∑–∞–ø—É—Å–∫ –±–µ–∑ cookies.")

        IG_PLAYWRIGHT_READY = True
        logger.info("‚úÖ Instagram Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Instagram Playwright: {e}")
        IG_PLAYWRIGHT_READY = False
        if IG_BROWSER:
            await IG_BROWSER.close()
        IG_BROWSER = None
        if IG_CONTEXT:
            await IG_CONTEXT.close()
        IG_CONTEXT = None

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright –¥–ª—è YouTube -
async def init_youtube_playwright():
    global YT_BROWSER, YT_CONTEXT, YT_PLAYWRIGHT_READY
    logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube Playwright...")
    try:
        pw = await async_playwright().start()
        YT_BROWSER = await pw.chromium.launch(headless=True)
        YT_CONTEXT = await YT_BROWSER.new_context(
            # viewport={'width': 1920, 'height': 1080}, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ cookies –∏–∑ —Ñ–∞–π–ª–∞
        cookie_file_path = Path("cookies_youtube.txt")
        if cookie_file_path.exists():
            logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º YouTube cookies –∏–∑ {cookie_file_path.name}")
            try:
                with open(cookie_file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                cookies_to_load = []
                for line in lines:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if line.startswith('#') or not line.strip():
                        continue
                    try:
                        parts = line.strip().split('\t')
                        if len(parts) >= 7:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ Netscape cookie –≤ —Ñ–æ—Ä–º–∞—Ç Playwright
                            domain, flag, path, secure, expiration, name, value = parts[:7]
                            pw_cookie = {
                                'name': name,
                                'value': value,
                                'domain': domain.lstrip('.'), # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
                                'path': path,
                                'expires': int(expiration) if expiration.isdigit() else None,
                                'secure': secure.lower() == 'true',
                                'httpOnly': False, # yt-dlp –Ω–µ –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ
                                'sameSite': 'Lax' # –∏–ª–∏ 'Strict', 'None' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                            }
                            # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
                            pw_cookie = {k: v for k, v in pw_cookie.items() if v is not None}
                            cookies_to_load.append(pw_cookie)
                    except ValueError:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ cookie: {line.strip()}")
                        continue

                if cookies_to_load:
                    await YT_CONTEXT.add_cookies(cookies_to_load)
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_to_load)} YouTube cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright.")
                else:
                    logger.info("üç™ –§–∞–π–ª cookies_youtube.txt –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö cookies –¥–ª—è Playwright.")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        else:
            logger.info("üç™ –§–∞–π–ª cookies_youtube.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫ –±–µ–∑ cookies.")

        YT_PLAYWRIGHT_READY = True
        logger.info("‚úÖ YouTube Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YouTube Playwright: {e}")
        YT_PLAYWRIGHT_READY = False
        if YT_BROWSER:
            await YT_BROWSER.close()
        YT_BROWSER = None
        if YT_CONTEXT:
            await YT_CONTEXT.close()
        YT_CONTEXT = None

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ -
def cleanup_file(file_path: str):
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            # –ò–∑–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å debug –Ω–∞ info
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {Path(file_path).name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

def cleanup_files(files: List[str]):
    for file_path in files:
        cleanup_file(file_path)

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube -
async def download_youtube(url: str, quality: str = "best") -> Optional[str]:
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YOUTUBE (–∫–∞—á–µ—Å—Ç–≤–æ={quality})...")
    ydl_opts = get_ydl_opts(quality, use_youtube_cookies=True)
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {Path(temp_file).name}")
                return temp_file
            else:
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª")
                return None
    except yt_dlp.DownloadError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å YouTube: {e}")
        return None

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube —á–µ—Ä–µ–∑ Playwright –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ -
async def download_youtube_with_playwright(url: str, quality: str = "best") -> Optional[str]:
    global YT_CONTEXT
    if not YT_PLAYWRIGHT_READY or not YT_CONTEXT:
        logger.error("‚ùå YouTube Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None

    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YOUTUBE —á–µ—Ä–µ–∑ Playwright (–∫–∞—á–µ—Å—Ç–≤–æ={quality})...")
    page = None
    temp_cookies_file = None
    try:
        page = await YT_CONTEXT.new_page()
        await page.goto(url, wait_until='networkidle')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫—É
        if "consent.youtube.com" in page.url or page.url == "https://www.youtube.com/":
            logger.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫—É–∫–∏ –Ω–∞ YouTube (Playwright).")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç—å –∫—É–∫–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                accept_button = page.get_by_text("I agree", exact=True).or_(page.get_by_text("–ü—Ä–∏–Ω—è—Ç—å", exact=True))
                if await accept_button.count() > 0:
                    await accept_button.click()
                    await page.wait_for_load_state('networkidle')
            except Exception as e:
                logger.info(f"‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ cookies –∏–∑ Playwright –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è yt-dlp
        cookies = await YT_CONTEXT.cookies()
        if not cookies:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cookies –∏–∑ Playwright –¥–ª—è yt-dlp.")
            # –í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –±–µ–∑ –∫—É–∫–∏
            ydl_opts = get_ydl_opts(quality, use_youtube_cookies=False)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Netscape
            temp_cookies_file = Path(tempfile.mktemp(suffix='.txt'))
            with open(temp_cookies_file, 'w', encoding='utf-8') as f:
                f.write("# Netscape HTTP Cookie File\n")
                f.write("# This is a generated file! Do not edit.\n\n")
                for cookie in cookies:
                    f.write(f"{cookie['domain']}\t")
                    f.write(f"{'TRUE' if cookie['domain'].startswith('.') else 'FALSE'}\t")
                    f.write(f"{cookie['path']}\t")
                    f.write(f"{'TRUE' if cookie['secure'] else 'FALSE'}\t")
                    f.write(f"{int(cookie['expires']) if cookie['expires'] else 0}\t")
                    f.write(f"{cookie['name']}\t")
                    f.write(f"{cookie['value']}\n")

            ydl_opts = get_ydl_opts(quality, use_youtube_cookies=False) # –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–∫–∏ –∏–∑ Playwright
            ydl_opts['cookiefile'] = str(temp_cookies_file)
            logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright...")

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright: {Path(temp_file).name}")
                return temp_file
            else:
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–∫–∏ –∏–∑ Playwright")
                return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_youtube_with_playwright: {e}")
        return None
    finally:
        if page:
            await page.close()
        if temp_cookies_file and temp_cookies_file.exists():
            temp_cookies_file.unlink(missing_ok=True) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—É–∫–∏

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å TikTok -
async def download_tiktok(url: str, quality: str = "1080p") -> Optional[str]:
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å TIKTOK (–∫–∞—á–µ—Å—Ç–≤–æ={quality})...")
    # yt-dlp —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è TikTok, –Ω–æ –º—ã –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç
    # –û–¥–Ω–∞–∫–æ, –¥–ª—è TikTok —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ 'best'
    ydl_opts = {
        'format': 'best', # yt-dlp –æ–±—ã—á–Ω–æ —Å–∞–º –Ω–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è TikTok
        'outtmpl': '%(title)s.%(ext)s',
        'noplaylist': True,
        'extractaudio': False,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'no_warnings': False,
        'quiet': False,
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ TikTok —Å–∫–∞—á–∞–Ω–æ: {Path(temp_file).name}")
                return temp_file
            else:
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –¥–ª—è TikTok")
                return None
    except yt_dlp.DownloadError as e:
        error_str = str(e).lower()
        if "Sign in to confirm you're not a bot" in error_str or "requires authentication" in error_str:
            logger.info("üîÑ –û—à–∏–±–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º Playwright...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å Playwright –¥–ª—è TikTok, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            pass
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å TikTok: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å TikTok: {e}")
        return None

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å TikTok (–∫–∞—Ä—É—Å–µ–ª—å) -
async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Å TIKTOK (–∫–∞—Ä—É—Å–µ–ª—å)...")
    ydl_opts = {
        'format': 'best',
        'outtmpl': '%(id)s/%(autonumber)s.%(ext)s',
        'noplaylist': False, # –ü–æ–∑–≤–æ–ª—è–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã (—Ñ–æ—Ç–æ –∫–∞–∫ –ø–ª–µ–π–ª–∏—Å—Ç)
        'extractaudio': False,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'no_warnings': True,
        'quiet': True,
        'playlistend': 10, # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_dir = info.get('id') # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID TikTok –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
            if temp_dir and os.path.isdir(temp_dir):
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏
                photo_files = [os.path.join(temp_dir, f) for f in sorted(os.listdir(temp_dir)) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))]
                if photo_files:
                    description = info.get('description', '') or info.get('title', '')
                    logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(photo_files)} —Ñ–æ—Ç–æ –∏–∑ TikTok –∫–∞—Ä—É—Å–µ–ª–∏.")
                    return photo_files, description
                else:
                    logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ TikTok.")
                    return None, ""
            else:
                logger.error("‚ùå –ü–∞–ø–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ TikTok –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return None, ""
    except yt_dlp.DownloadError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å TikTok: {e}")
        return None, ""
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å TikTok: {e}")
        return None, ""

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Instagram -
async def download_instagram(url: str) -> Tuple[Optional[str], Optional[List[str]], str]:
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å INSTAGRAM...")
    ydl_opts = get_ydl_opts(quality="best", use_youtube_cookies=False) # –ö—É–∫–∏ –¥–ª—è YouTube, –Ω–æ yt-dlp —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ yt-dlp
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –ú–µ–¥–∏–∞ Instagram —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp: {Path(temp_file).name}")
                description = info.get('description', '') or info.get('title', '')
                return temp_file, None, description # –í–∏–¥–µ–æ, –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ
            else:
                # –ï—Å–ª–∏ –Ω–µ –≤–∏–¥–µ–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—É—Å–µ–ª—å
                # yt-dlp –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–ø–∫—É
                temp_dir = info.get('id') # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –∏–º—è –ø–∞–ø–∫–∏
                if temp_dir and os.path.isdir(temp_dir):
                    photo_files = [os.path.join(temp_dir, f) for f in sorted(os.listdir(temp_dir)) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))]
                    if photo_files:
                        logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(photo_files)} —Ñ–æ—Ç–æ –∏–∑ Instagram.")
                        description = info.get('description', '') or info.get('title', '')
                        return None, photo_files, description # –ù–µ—Ç –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É –¥–ª—è Instagram.")
                return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ yt-dlp."
    except yt_dlp.DownloadError as e:
        error_str = str(e).lower()
        logger.info(f"üîÑ yt-dlp –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}. –ü—Ä–æ–±—É–µ–º Playwright...")
        if "login" in error_str or "private" in error_str or "requires authentication" in error_str:
            logger.info("üîê yt-dlp —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º Playwright...")
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ–±—É–µ–º Playwright
            return await download_instagram_with_playwright(url)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å Instagram (yt-dlp): {e}")
        # –ï—Å–ª–∏ yt-dlp –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Playwright
        return await download_instagram_with_playwright(url)

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Instagram —á–µ—Ä–µ–∑ Playwright -
async def download_instagram_with_playwright(url: str) -> Tuple[Optional[str], Optional[List[str]], str]:
    global IG_CONTEXT
    if not IG_PLAYWRIGHT_READY or not IG_CONTEXT:
        logger.error("‚ùå Instagram Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None, None, "‚ùå Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å INSTAGRAM —á–µ—Ä–µ–∑ Playwright...")
    page = None
    try:
        page = await IG_CONTEXT.new_page()
        await page.goto(url, wait_until='networkidle')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫—É
        if "accounts/login" in page.url or "challenge" in page.url:
            logger.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ Instagram (Playwright).")
            return None, None, "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ö—É–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã."

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        description_element = page.locator('article div[data-testid="tweet"] div[dir="auto"] span, article div._ab1k._ab1l div._aa99._aamp span')
        description = await description_element.first.text_content() if await description_element.count() > 0 else ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
        video_element = page.locator('article video source')
        if await video_element.count() > 0:
            video_url = await video_element.first.get_attribute('src')
            if video_url:
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp
                ydl_opts = {
                    'format': 'best',
                    'outtmpl': '%(title)s.%(ext)s',
                    'noplaylist': True,
                    'extractaudio': False,
                    'nocheckcertificate': True,
                    'ignoreerrors': False,
                    'no_warnings': False,
                    'quiet': False,
                }
                try:
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        info = ydl.extract_info(video_url, download=True)
                        temp_file = ydl.prepare_filename(info)
                        if temp_file and os.path.exists(temp_file):
                            logger.info(f"‚úÖ –í–∏–¥–µ–æ Instagram (—á–µ—Ä–µ–∑ Playwright) —Å–∫–∞—á–∞–Ω–æ: {Path(temp_file).name}")
                            return temp_file, None, description
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ URL: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–ª–∏ –∫–∞—Ä—É—Å–µ–ª—å)
        photo_elements = page.locator('article img')
        photo_count = await photo_elements.count()
        if photo_count > 0:
            photo_urls = []
            for i in range(photo_count):
                photo_url = await photo_elements.nth(i).get_attribute('src')
                if photo_url:
                    photo_urls.append(photo_url)

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            if photo_urls:
                temp_dir = tempfile.mkdtemp()
                photo_paths = []
                for i, photo_url in enumerate(photo_urls):
                    async with aiohttp.ClientSession() as session:
                        async with session.get(photo_url) as resp:
                            if resp.status == 200:
                                photo_path = os.path.join(temp_dir, f"ig_photo_{i+1}.jpg")
                                with open(photo_path, 'wb') as f:
                                    f.write(await resp.read())
                                photo_paths.append(photo_path)
                if photo_paths:
                    logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(photo_paths)} —Ñ–æ—Ç–æ –∏–∑ Instagram (—á–µ—Ä–µ–∑ Playwright).")
                    return None, photo_paths, description

        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Instagram (Playwright).")
        return None, None, "‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_instagram_with_playwright: {e}")
        return None, None, f"‚ùå –û—à–∏–±–∫–∞ Playwright: {e}"
    finally:
        if page:
            await page.close()

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ file.io -
async def upload_to_fileio(file_path: str) -> Optional[str]:
    url = 'https://file.io/'
    max_size = 50 * 1024 * 1024 # 50 MB –≤ –±–∞–π—Ç–∞—Ö
    file_size = os.path.getsize(file_path)
    if file_size > max_size:
        logger.info(f"üìÅ –§–∞–π–ª {Path(file_path).name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 MB, –∑–∞–≥—Ä—É–∂–∞—é –Ω–∞ file.io...")
        try:
            async with aiohttp.ClientSession() as session:
                with open(file_path, 'rb') as f:
                    data = aiohttp.FormData()
                    data.add_field('file', f, filename=Path(file_path).name)
                    async with session.post(url, data=data) as resp:
                        if resp.status == 200:
                            response_json = await resp.json()
                            if response_json.get('success'):
                                fileio_link = response_json.get('link')
                                logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ file.io: {fileio_link}")
                                return fileio_link
                            else:
                                logger.error(f"‚ùå file.io –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response_json.get('message')}")
                                return None
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ file.io: —Å—Ç–∞—Ç—É—Å {resp.status}")
                            return None
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ file.io: {e}")
            return None
    else:
        logger.info(f"üìÅ –§–∞–π–ª {Path(file_path).name} –º–µ–Ω—å—à–µ 50 MB, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø—Ä—è–º—É—é.")
        return None # –§–∞–π–ª –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–∞ file.io

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ -
async def send_video_or_message(chat_id: int, file_path: str, caption: str = ""):
    max_telegram_file_size = 50 * 1024 * 1024 # 50 MB –≤ –±–∞–π—Ç–∞—Ö
    file_size = os.path.getsize(file_path)
    if file_size > max_telegram_file_size:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ file.io
        fileio_link = await upload_to_fileio(file_path)
        if fileio_link:
            await bot.send_message(chat_id, f"üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram. –í–æ—Ç —Å—Å—ã–ª–∫–∞: {fileio_link}")
        else:
            await bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ file.io –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
        input_file = FSInputFile(file_path)
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ
            await bot.send_video(chat_id=chat_id, video=input_file, caption=caption)
            logger.info("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é.")
        except TelegramBadRequest as e:
            if "Wrong type of the web page content" in str(e) or "PHOTO_AS_DOCUMENT" in str(e):
                try:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                    await bot.send_photo(chat_id=chat_id, photo=input_file, caption=caption)
                    logger.info("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é.")
                except TelegramBadRequest as e2:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e2}")
                    # –ï—Å–ª–∏ –∏ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
                    await bot.send_document(chat_id=chat_id, document=input_file, caption=caption)
                    logger.info("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
                await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await bot.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
def settings_menu_keyboard() -> ReplyKeyboardMarkup:
    QUALITY_FORMATS = {
        "best": "best",
        "1080p": "1080p",
        "720p": "720p",
        "480p": "480p",
        "360p": "360p"
    }
    keyboard = [
        [KeyboardButton(text=q.upper()) for q in QUALITY_FORMATS.keys()],
        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ ---
@dp.message(VideoStates.choosing_quality)
async def process_quality_choice(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    choice = message.text.strip().lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±–æ—Ä "–Ω–∞–∑–∞–¥", –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if choice in ["–Ω–∞–∑–∞–¥", "‚óÄÔ∏è –Ω–∞–∑–∞–¥"]:
        await state.clear()
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.", reply_markup=main_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±–æ—Ä –æ–¥–Ω–æ–º—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ (—Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    # QUALITY_FORMATS.keys() = ["best", "1080p", "720p", "480p", "360p"]
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ "BEST", "1080P", "720p" –∏ —Ç.–¥.
    # –ü–æ—Å–ª–µ .lower() —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç "best", "1080p", "720p"
    QUALITY_FORMATS = {
        "best": "best",
        "1080p": "1080p",
        "720p": "720p",
        "480p": "480p",
        "360p": "360p"
    }
    if choice in QUALITY_FORMATS:
        user_settings[message.from_user.id] = choice
        save_user_settings()
        await state.clear()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞—á–µ–Ω–∏–µ choice (–≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
        # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>{choice.upper()}</b>.",
            reply_markup=main_keyboard(),
            parse_mode="HTML"
        )
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ—á–∏—â–µ–Ω–æ, –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏
        return
    else:
        # –ï—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        # –∏ *–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º* —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        current = get_quality_setting(message.from_user.id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = settings_menu_keyboard() # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(
            f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º state.clear(), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∞–ª—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É

# - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -
def main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üé¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start -
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    welcome_text = (
        f"üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n"
        f"–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        f"‚Ä¢ YouTube\n"
        f"‚Ä¢ TikTok\n"
        f"‚Ä¢ Instagram (–ø–æ—Å—Ç—ã, reels, –∫–∞—Ä—É—Å–µ–ª–∏)\n\n"
        f"üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{get_quality_setting(user_id).upper()}</b>"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

# - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help -
@dp.message(F.text == "üé¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_welcome(message: Message):
    help_text = (
        "üé¨ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VideoBot</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube, TikTok –∏–ª–∏ Instagram.\n"
        "2. –ë–æ—Ç —Å–∫–∞—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≤–∏–¥–µ–æ (–∏–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—É—Å–µ–ª—å)."
    )
    await message.answer(help_text, reply_markup=main_keyboard(), parse_mode="HTML")

# - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings -
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message, state: FSMContext):
    current = get_quality_setting(message.from_user.id)
    keyboard = settings_menu_keyboard()
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.set_state(VideoStates.choosing_quality)

# - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —Å—Å—ã–ª–æ–∫) -
@dp.message(F.text)
async def handle_link(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    current_state = await state.get_state()
    if current_state == VideoStates.choosing_quality.state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —Å—é–¥–∞ –ø–æ–ø–∞–ª,
        # —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ process_quality_choice –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º—ã.
        # –õ–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ process_quality_choice –¥–æ–ª–∂–Ω–∞ –ø–æ–∫—Ä—ã–≤–∞—Ç—å –≤—Å–µ —Å–ª—É—á–∞–∏.
        # –ï—Å–ª–∏ —Å—é–¥–∞ –≤—Å—ë –∂–µ –¥–æ–π–¥—ë—Ç, –±–æ—Ç –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–µ—Ç, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É.
        # –ù–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤ process_quality_choice, —ç—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏.
        # –û–¥–Ω–∞–∫–æ, –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        # await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        # await settings_menu(message, state) # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ–Ω—é
        # return
        # –õ—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ process_quality_choice –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å—ë.
        return # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ FSM –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ FSM.

    url = message.text.strip()
    user_id = message.from_user.id
    chat_id = message.chat.id
    quality = get_quality_setting(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if "youtube.com" in url or "youtu.be" in url:
        platform = "youtube"
    elif "tiktok.com" in url or "vm.tiktok.com" in url or "vt.tiktok.com" in url:
        platform = "tiktok"
    elif "instagram.com" in url or "instagr.am" in url:
        platform = "instagram"
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: YouTube, TikTok, Instagram.")
        return

    status_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    temp_file = None
    temp_photos = [] # –î–ª—è —Ñ–æ—Ç–æ –∏–∑ Instagram/TikTok

    try:
        if platform == "youtube":
            temp_file = await download_youtube(url, quality)
            if not temp_file:
                # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Playwright
                temp_file = await download_youtube_with_playwright(url, quality)
        elif platform == "tiktok":
            if '/photo/' in url.lower() or '/photos/' in url.lower():
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–∫–∞—Ä—É—Å–µ–ª–∏ TikTok
                photos, description = await download_tiktok_photos(url)
                await bot.delete_message(chat_id=chat_id, message_id=status_msg.message_id)
                if photos:
                    temp_photos = photos
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                    media_group = [InputMediaPhoto(media=FSInputFile(photo),
                                                   caption=description if i == 0 else None # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                                                  ) for i, photo in enumerate(photos)]
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram - 10 —Ñ–æ—Ç–æ –∑–∞ —Ä–∞–∑)
                    batch_size = 10
                    for i in range(0, len(media_group), batch_size):
                        batch = media_group[i:i + batch_size]
                        await bot.send_media_group(chat_id=message.chat.id, media=batch)
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –∏–∑ TikTok")
                    cleanup_files(photos)
                    return # –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ —Å TikTok.")
                    return
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ TikTok
                temp_file = await download_tiktok(url, quality)
        elif platform == "instagram":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Instagram (–≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –∫–∞—Ä—É—Å–µ–ª—å)
            video_path, photos, description = await download_instagram(url)
            await bot.delete_message(chat_id=chat_id, message_id=status_msg.message_id)
            if video_path:
                temp_file = video_path
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ Reel
                is_reel = '/reel/' in url.lower()
                # –ï—Å–ª–∏ —ç—Ç–æ Reel, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                caption_to_send = "" if is_reel else description
                await send_video_or_message(message.chat.id, temp_file, caption=caption_to_send)
                cleanup_file(temp_file)
                return
            elif photos:
                temp_photos = photos
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                media_group = [InputMediaPhoto(media=FSInputFile(photo),
                                               caption=description if i == 0 else None # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                                              ) for i, photo in enumerate(photos)]
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram - 10 —Ñ–æ—Ç–æ –∑–∞ —Ä–∞–∑)
                batch_size = 10
                for i in range(0, len(media_group), batch_size):
                    batch = media_group[i:i + batch_size]
                    await bot.send_media_group(chat_id=message.chat.id, media=batch)
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –∏–∑ Instagram")
                cleanup_files(photos)
                return
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ —Å Instagram.")
                return

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ (YouTube, TikTok)
        await bot.delete_message(chat_id=chat_id, message_id=status_msg.message_id)
        if temp_file:
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–û ---
            # –î–ª—è YouTube –∏ TikTok –≤–∏–¥–µ–æ caption (–æ–ø–∏—Å–∞–Ω–∏–µ) –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è description –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–ª—è YouTube, –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É.
            # –î–ª—è Instagram Reels caption —Ç–∞–∫–∂–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (is_reel).
            # –î–ª—è –¥—Ä—É–≥–∏—Ö Instagram –≤–∏–¥–µ–æ caption –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤—ã—à–µ.
            if platform == "youtube":
                 # –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º caption –¥–ª—è YouTube
                await send_video_or_message(message.chat.id, temp_file) # caption –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
            elif platform == "tiktok":
                 # –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º caption –¥–ª—è TikTok –≤–∏–¥–µ–æ
                await send_video_or_message(message.chat.id, temp_file) # caption –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
            else: # platform == "instagram" (–∏ —ç—Ç–æ –≤–∏–¥–µ–æ, –∞ –Ω–µ —Ñ–æ—Ç–æ)
                 # –ó–¥–µ—Å—å description –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ –¥–ª—è Instagram
                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Reel
                is_reel = '/reel/' in url.lower()
                caption_to_send = "" if is_reel else description
                await send_video_or_message(message.chat.id, temp_file, caption=caption_to_send)
            # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
            cleanup_file(temp_file) # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        try:
            await bot.edit_message_text(text=error_msg, chat_id=chat_id, message_id=status_msg.message_id)
        except:
            await message.answer(error_msg)
    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if temp_file:
            cleanup_file(temp_file)
        if temp_photos:
            cleanup_files(temp_photos)


# - –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ -
async def main():
    global bot
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    init_cookies_from_env()
    load_user_settings()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright
    await init_instagram_playwright()
    await init_youtube_playwright()

    bot = Bot(token=BOT_TOKEN, session=AiohttpSession())

    WEBHOOK_PATH = "/"
    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

    if WEBHOOK_URL:
        # - –†–µ–∂–∏–º Webhook -
        logger.info(f"üì° –†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ Webhook: {WEBHOOK_URL}")
        await bot.set_webhook(WEBHOOK_URL)
        app = aiohttp.web.Application()
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        await dp.start_polling(bot) # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –≤–µ–±—Ö—É–∫–∞, —Å–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é aiogram

        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, '0.0.0.0', 8080) # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        await site.start()
        logger.info("üöÄ –í–µ–±—Ö—É–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª)
        await asyncio.Event().wait()
    else:
        # - –†–µ–∂–∏–º Polling -
        logger.info("üîÑ –†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ Polling")
        try:
            await dp.start_polling(bot)
        finally:
            save_user_settings()
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Polling)")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if IG_BROWSER:
        logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä Instagram Playwright...")
        await IG_BROWSER.close()
    if YT_BROWSER:
        logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä YouTube Playwright...")
        await YT_BROWSER.close()

if __name__ == "__main__":
    asyncio.run(main())