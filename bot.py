import os
import tempfile
import asyncio
import logging
import re
import hashlib
import json
import time
from pathlib import Path
from typing import Optional, Tuple, List
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from dotenv import load_dotenv
import yt_dlp
import instaloader
import pickle
import sys
 
sys.stdout.reconfigure(encoding='utf-8')

# === üß∞ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === üîê –¢–û–ö–ï–ù –ò WEBHOOK ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

WEBHOOK_PATH = "/"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === üß† –•–†–ê–ù–ò–õ–ò–©–ï –ù–ê–°–¢–†–û–ï–ö ===
user_settings = {}
RATE_LIMIT_DELAY = {}  # {user_id: last_request_time}

# === üé® –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class VideoStates(StatesGroup):
    choosing_quality = State()

# === üì∫ –ö–ê–ß–ï–°–¢–í–ê –í–ò–î–ï–û ===
QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
    "1080p": 'bestvideo[ext=mp4][height<=1080]+bestaudio[ext=m4a]/best[height<=1080][ext=mp4]/best',
    "720p": 'bestvideo[ext=mp4][height<=720]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best',
    "480p": 'best[height<=480][ext=mp4]/best[ext=mp4]/best',
    "360p": 'best[height<=360][ext=mp4]/best[ext=mp4]/best'
}

# === üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í ===
def cleanup_file(file_path: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {Path(file_path).name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

def cleanup_files(files: List[str]):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
    for file_path in files:
        cleanup_file(file_path)

# === üõ† –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def check_rate_limit(user_id: int):
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∑–∞–ø—Ä–æ—Å –≤ 3 —Å–µ–∫—É–Ω–¥—ã"""
    now = time.time()
    last_time = RATE_LIMIT_DELAY.get(user_id, 0)
    if now - last_time < 3:
        delay = 3 - (now - last_time)
        logger.info(f"‚è±Ô∏è Rate limit –¥–ª—è user {user_id}: –∂–¥—ë–º {delay:.1f}—Å")
        await asyncio.sleep(delay)
    RATE_LIMIT_DELAY[user_id] = time.time()

def get_quality_setting(user_id: int) -> str:
    return user_settings.get(user_id, "best")

def get_ydl_opts(quality: str = "best") -> dict:
    opts = {
        'format': QUALITY_FORMATS.get(quality, QUALITY_FORMATS["best"]),
        'merge_output_format': 'mp4',
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
    }
    proxy = os.getenv("PROXY_URL")
    if proxy:
        opts['proxy'] = proxy
    return opts

def is_valid_url(url: str) -> bool:
    regex = re.compile(
        r'^(https?://)?(www\.)?'
        r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vm\.tiktok\.com|vt\.tiktok\.com)',
        re.IGNORECASE
    )
    return bool(re.match(regex, url))

def detect_platform(url: str) -> str:
    url_lower = url.lower()
    if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
        return 'youtube'
    elif 'tiktok.com' in url_lower:
        return 'tiktok'
    elif 'instagram.com' in url_lower:
        return 'instagram'
    return 'unknown'

async def download_file(url: str, save_path: str, timeout: int = 60) -> bool:
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                    return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {url}: {e}")
    return False

# === üì• INSTAGRAM: –£–õ–£–ß–®–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ (2025) ===

async def download_instagram_mobile_api(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ú–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π Instagram API (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –≤ 2025)
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏, reels –∏ IGTV
    """
    try:
        logger.info("üîÑ Instagram: Mobile API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥)...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º API URL
        api_url = f"https://www.instagram.com/api/v1/media/{shortcode}/info/"
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            headers = {
                'User-Agent': 'Instagram 269.0.0.18.75 Android (30/11; 420dpi; 1080x2265; OnePlus; ONEPLUS A6000; OnePlus6; qcom; en_US; 314665256)',
                'Accept': '*/*',
                'Accept-Language': 'en-US',
                'Accept-Encoding': 'gzip, deflate',
                'X-IG-App-Locale': 'en_US',
                'X-IG-Device-Locale': 'en_US',
                'X-IG-Mapped-Locale': 'en_US',
                'X-IG-App-ID': '567067343352427',
                'X-IG-Bandwidth-Speed-KBPS': '2000.000',
                'X-IG-Bandwidth-TotalBytes-B': '5000000',
                'X-IG-Bandwidth-TotalTime-MS': '2000',
                'X-IG-EU-DC-ENABLED': 'true',
                'X-IG-Capabilities': '3brTvx0=',
                'X-FB-HTTP-Engine': 'Liger',
                'Connection': 'keep-alive',
            }
            
            async with session.get(api_url, headers=headers) as resp:
                if resp.status == 404:
                    logger.warning("Mobile API: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    return None, None, None
                
                if resp.status != 200:
                    logger.warning(f"Mobile API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None, None, None
                
                try:
                    data = await resp.json()
                except:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç Mobile API")
                    return None, None, None
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º items
                items = data.get('items', [])
                if not items:
                    logger.warning("Mobile API: –Ω–µ—Ç items –≤ –æ—Ç–≤–µ—Ç–µ")
                    return None, None, None
                
                media = items[0]
                media_type = media.get('media_type', 0)
                
                # media_type: 1 = —Ñ–æ—Ç–æ, 2 = –≤–∏–¥–µ–æ, 8 = –∫–∞—Ä—É—Å–µ–ª—å
                
                # –ö–∞—Ä—É—Å–µ–ª—å (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
                if media_type == 8:
                    carousel_media = media.get('carousel_media', [])
                    if carousel_media:
                        logger.info(f"üì∏ –ö–∞—Ä—É—Å–µ–ª—å: {len(carousel_media)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        photos = []
                        videos = []
                        
                        for idx, item in enumerate(carousel_media[:10]):
                            item_type = item.get('media_type', 0)
                            
                            # –í–∏–¥–µ–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏
                            if item_type == 2:
                                video_versions = item.get('video_versions', [])
                                if video_versions:
                                    video_url = video_versions[0].get('url')
                                    if video_url:
                                        videos.append(video_url)
                            
                            # –§–æ—Ç–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏
                            elif item_type == 1:
                                img_candidates = item.get('image_versions2', {}).get('candidates', [])
                                if img_candidates:
                                    img_url = img_candidates[0].get('url')
                                    if img_url:
                                        photo_path = os.path.join(
                                            tempfile.gettempdir(), 
                                            f"insta_mobile_{shortcode}_{idx}.jpg"
                                        )
                                        if await download_file(img_url, photo_path):
                                            photos.append(photo_path)
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ - —Å–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ
                        if videos:
                            video_path = os.path.join(tempfile.gettempdir(), f"insta_mobile_{shortcode}.mp4")
                            if await download_file(videos[0], video_path):
                                logger.info("‚úÖ –í–∏–¥–µ–æ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ —Å–∫–∞—á–∞–Ω–æ (Mobile API)")
                                return (video_path, None, None)
                        
                        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
                        if photos:
                            caption = media.get('caption', {})
                            description = caption.get('text', "üì∏ Instagram") if caption else "üì∏ Instagram"
                            logger.info(f"‚úÖ {len(photos)} —Ñ–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ (Mobile API)")
                            return (None, photos, description)
                
                # –û–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ
                elif media_type == 2:
                    video_versions = media.get('video_versions', [])
                    if video_versions:
                        video_url = video_versions[0].get('url')
                        if video_url:
                            video_path = os.path.join(tempfile.gettempdir(), f"insta_mobile_{shortcode}.mp4")
                            if await download_file(video_url, video_path):
                                logger.info("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (Mobile API)")
                                return (video_path, None, None)
                
                # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
                elif media_type == 1:
                    img_candidates = media.get('image_versions2', {}).get('candidates', [])
                    if img_candidates:
                        img_url = img_candidates[0].get('url')
                        if img_url:
                            photo_path = os.path.join(tempfile.gettempdir(), f"insta_mobile_{shortcode}.jpg")
                            if await download_file(img_url, photo_path):
                                caption = media.get('caption', {})
                                description = caption.get('text', "üì∏ Instagram") if caption else "üì∏ Instagram"
                                logger.info("‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ (Mobile API)")
                                return (None, [photo_path], description)
    
    except asyncio.TimeoutError:
        logger.error("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç Mobile API")
    except Exception as e:
        logger.error(f"‚ùå Instagram Mobile API: {e}")
    
    return None, None, None


async def download_instagram_graphql(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ú–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Instagram GraphQL API
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    """
    try:
        logger.info("üîÑ Instagram: GraphQL API...")
        
        # GraphQL query hash –¥–ª—è media info
        query_hash = "2b0673e0dc4580674a88d426fe00ea90"
        variables = json.dumps({"shortcode": shortcode})
        
        graphql_url = f"https://www.instagram.com/graphql/query/?query_hash={query_hash}&variables={variables}"
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            headers = {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15',
                'Accept': '*/*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Referer': f'https://www.instagram.com/p/{shortcode}/',
                'X-Requested-With': 'XMLHttpRequest',
                'X-IG-App-ID': '936619743392459',
            }
            
            async with session.get(graphql_url, headers=headers) as resp:
                if resp.status != 200:
                    logger.warning(f"GraphQL –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None, None, None
                
                try:
                    data = await resp.json()
                except:
                    return None, None, None
                
                media = data.get('data', {}).get('shortcode_media', {})
                if not media:
                    return None, None, None
                
                is_video = media.get('is_video', False)
                
                # –ö–∞—Ä—É—Å–µ–ª—å
                carousel = media.get('edge_sidecar_to_children', {}).get('edges', [])
                if carousel:
                    logger.info(f"üì∏ –ö–∞—Ä—É—Å–µ–ª—å GraphQL: {len(carousel)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    photos = []
                    videos = []
                    
                    for item in carousel[:10]:
                        node = item.get('node', {})
                        if node.get('is_video', False):
                            video_url = node.get('video_url')
                            if video_url:
                                videos.append(video_url)
                        else:
                            img_url = node.get('display_url')
                            if img_url:
                                photo_path = os.path.join(
                                    tempfile.gettempdir(), 
                                    f"insta_graphql_{shortcode}_{len(photos)}.jpg"
                                )
                                if await download_file(img_url, photo_path):
                                    photos.append(photo_path)
                    
                    if videos:
                        video_path = os.path.join(tempfile.gettempdir(), f"insta_graphql_{shortcode}.mp4")
                        if await download_file(videos[0], video_path):
                            logger.info("‚úÖ –í–∏–¥–µ–æ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ (GraphQL)")
                            return (video_path, None, None)
                    
                    if photos:
                        caption = media.get('edge_media_to_caption', {}).get('edges', [])
                        description = caption[0]['node']['text'] if caption else "üì∏ Instagram"
                        logger.info(f"‚úÖ {len(photos)} —Ñ–æ—Ç–æ (GraphQL)")
                        return (None, photos, description)
                
                # –í–∏–¥–µ–æ
                elif is_video:
                    video_url = media.get('video_url')
                    if video_url:
                        video_path = os.path.join(tempfile.gettempdir(), f"insta_graphql_{shortcode}.mp4")
                        if await download_file(video_url, video_path):
                            logger.info("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (GraphQL)")
                            return (video_path, None, None)
                
                # –§–æ—Ç–æ
                else:
                    img_url = media.get('display_url')
                    if img_url:
                        photo_path = os.path.join(tempfile.gettempdir(), f"insta_graphql_{shortcode}.jpg")
                        if await download_file(img_url, photo_path):
                            caption = media.get('edge_media_to_caption', {}).get('edges', [])
                            description = caption[0]['node']['text'] if caption else "üì∏ Instagram"
                            logger.info("‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ (GraphQL)")
                            return (None, [photo_path], description)
    
    except Exception as e:
        logger.error(f"‚ùå Instagram GraphQL: {e}")
    
    return None, None, None


async def download_instagram_oembed(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ú–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Instagram oEmbed API
    –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    """
    try:
        logger.info("üîÑ Instagram: oEmbed API...")
        
        oembed_url = f"https://www.instagram.com/p/{shortcode}/embed/captioned/"
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'text/html',
            }
            
            async with session.get(oembed_url, headers=headers) as resp:
                if resp.status != 200:
                    return None, None, None
                
                html = await resp.text()
                
                # –ò—â–µ–º video_url
                video_match = re.search(r'"video_url":"([^"]+)"', html)
                if video_match:
                    video_url = video_match.group(1).replace('\\u0026', '&').replace('\\/', '/')
                    video_path = os.path.join(tempfile.gettempdir(), f"insta_oembed_{shortcode}.mp4")
                    if await download_file(video_url, video_path):
                        logger.info("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (oEmbed)")
                        return (video_path, None, None)
                
                # –ò—â–µ–º display_url –¥–ª—è —Ñ–æ—Ç–æ
                image_match = re.search(r'"display_url":"([^"]+)"', html)
                if image_match:
                    image_url = image_match.group(1).replace('\\u0026', '&').replace('\\/', '/')
                    photo_path = os.path.join(tempfile.gettempdir(), f"insta_oembed_{shortcode}.jpg")
                    if await download_file(image_url, photo_path):
                        logger.info("‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ (oEmbed)")
                        return (None, [photo_path], "üì∏ Instagram")
    
    except Exception as e:
        logger.error(f"‚ùå Instagram oEmbed: {e}")
    
    return None, None, None


async def download_instagram_ytdlp_premium(url: str, quality: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ú–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ yt-dlp —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã + –æ–±—Ö–æ–¥ geo-restrictions
    """
    try:
        logger.info("üîÑ Instagram: yt-dlp (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)...")
        
        ydl_opts = {
            'format': 'best',
            'noplaylist': True,
            'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
            'quiet': False,
            'no_warnings': False,
            'socket_timeout': 30,
            'retries': 3,
            'fragment_retries': 3,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': '*/*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Referer': 'https://www.instagram.com/',
            },
            'geo_bypass': True,
            'geo_bypass_country': 'US',
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
        cookies_file = Path("cookies.txt")
        if cookies_file.exists():
            ydl_opts['cookiefile'] = str(cookies_file)
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        
        # –ü—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        proxy = os.getenv("PROXY_URL")
        if proxy:
            ydl_opts['proxy'] = proxy
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy[:20]}...")

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            
            if temp_file and os.path.exists(temp_file):
                logger.info("‚úÖ –°–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)")
                return (temp_file, None, None)
    
    except yt_dlp.utils.DownloadError as e:
        error_str = str(e).lower()
        if 'inappropriate' in error_str or '18+' in error_str or 'age' in error_str:
            logger.warning("‚ö†Ô∏è yt-dlp: –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")
        else:
            logger.error(f"‚ùå yt-dlp download error: {e}")
    except Exception as e:
        logger.error(f"‚ùå Instagram yt-dlp: {e}")
    
    return None, None, None


async def download_instagram_instaloader_auth(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ú–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Instaloader —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ—ë
    """
    try:
        logger.info("üîÑ Instagram: Instaloader (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)...")
        
        L = instaloader.Instaloader(
            download_videos=True,
            download_pictures=True,
            download_geotags=False,
            download_comments=False,
            save_metadata=False,
            quiet=True,
            user_agent='Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15'
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        session_file = Path("session/instagram_session")
        if session_file.exists():
            try:
                username = os.getenv("INSTAGRAM_USERNAME")
                if username:
                    L.load_session_from_file(username, str(session_file))
                    logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è Instagram")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")
        
        post = instaloader.Post.from_shortcode(L.context, shortcode)

        if post.is_video:
            video_url = post.video_url
            temp_path = os.path.join(tempfile.gettempdir(), f"insta_loader_{shortcode}.mp4")
            if await download_file(video_url, temp_path):
                logger.info("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (Instaloader)")
                return (temp_path, None, None)
        else:
            photos = []
            description = post.caption or "üì∏ Instagram"
            
            if post.typename == "GraphSidecar":
                for i, node in enumerate(post.get_sidecar_nodes()):
                    if node.is_video or i >= 10:
                        continue
                    photo_path = os.path.join(tempfile.gettempdir(), f"insta_loader_{shortcode}_{i}.jpg")
                    if await download_file(node.display_url, photo_path):
                        photos.append(photo_path)
            else:
                photo_path = os.path.join(tempfile.gettempdir(), f"insta_loader_{shortcode}.jpg")
                if await download_file(post.url, photo_path):
                    photos.append(photo_path)
            
            if photos:
                logger.info(f"‚úÖ {len(photos)} —Ñ–æ—Ç–æ (Instaloader)")
                return (None, photos, description)
    
    except instaloader.exceptions.LoginRequiredException:
        logger.warning("‚ö†Ô∏è Instaloader: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå Instagram Instaloader: {e}")
    
    return None, None, None


# === üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–Ø INSTAGRAM (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø) ===
async def download_instagram(url: str, quality: str = "best") -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Instagram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç 5 –º–µ—Ç–æ–¥–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ (2025).
    
    Returns:
        Tuple[video_path, photos_list, description/error_message]
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º shortcode –∏–∑ URL
    shortcode_match = re.search(r'/(?:p|reel|share|tv)/([^/\?]+)', url)
    if not shortcode_match:
        return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å shortcode –∏–∑ URL"
    
    shortcode = shortcode_match.group(1)
    logger.info(f"üìå Instagram shortcode: {shortcode}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    is_reel = '/reel/' in url.lower() or '/share/' in url.lower()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (2025)
    methods = [
        ("Mobile API", lambda: download_instagram_mobile_api(url, shortcode)),
        ("GraphQL", lambda: download_instagram_graphql(url, shortcode)),
        ("yt-dlp Premium", lambda: download_instagram_ytdlp_premium(url, quality)),
        ("oEmbed", lambda: download_instagram_oembed(url, shortcode)),
        ("Instaloader Auth", lambda: download_instagram_instaloader_auth(url, shortcode)),
    ]
    
    # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for method_name, method in methods:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: {method_name}")
            result = await method()
            
            if result and (result[0] or result[1]):
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –º–µ—Ç–æ–¥–æ–º: {method_name}")
                return result
        except Exception as e:
            logger.error(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_msg = (
        "<b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram</b>\n\n"
        "<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
        "  ‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç 18+ (–≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)\n"
        "  ‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "  ‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
        "  ‚Ä¢ Instagram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø\n\n"
        "<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
        "  1. <a href='https://t.me/skacattthelp/2'>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ</a> –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 18+ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Instagram\n"
        "  2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø—É–±–ª–∏—á–Ω—ã–π\n"
        "  3. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ\n"
        "  4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Instagram –Ω–∞ —Å–≤–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n\n"
    )
    
    return None, None, error_msg
    

# === üì§ TIKTOK –§–û–¢–û ===
async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    try:
        clean_url = url.split('?')[0]
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Referer': 'https://www.tiktok.com/',
            'DNT': '1',
        }

        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.get(clean_url, headers=headers, allow_redirects=True) as resp:
                if resp.status != 200:
                    return None, f"‚ùå TikTok –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}"
                html = await resp.text()

        json_match = re.search(r'<script id="__UNIVERSAL_DATA_FOR_REHYDRATION__" type="application/json">({.*})</script>', html)
        if not json_match:
            return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON-–±–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏"

        try:
            data = json.loads(json_match.group(1))
            item_info = data.get('__DEFAULT_SCOPE__', {}).get('webapp.photo.detail', {}).get('itemInfo', {})
            image_post = item_info.get('imagePost', {})
            images = image_post.get('images', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"

        if not images:
            return None, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö"

        photos = []
        for i, img in enumerate(images[:10]):
            img_url = img.get('imageURL', {}).get('urlList', [])
            if not img_url:
                continue
            url_to_download = img_url[0]
            photo_path = os.path.join(tempfile.gettempdir(), f"tiktok_photo_{i}.jpg")
            if await download_file(url_to_download, photo_path, timeout=15):
                photos.append(photo_path)

        if photos:
            return (photos, "üì∏ –§–æ—Ç–æ –∏–∑ TikTok")
        else:
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ"

    except asyncio.TimeoutError:
        return None, "‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã TikTok"
    except Exception as e:
        logger.error(f"‚ùå TikTok —Ñ–æ—Ç–æ –æ—à–∏–±–∫–∞: {e}")
        return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}"

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û ===
async def download_video_ytdlp(url: str, quality: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp...")
        ydl_opts = get_ydl_opts(quality)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {e}")
    return None

async def download_video_ytdlp_cookies(url: str, quality: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp —Å cookies...")
        cookies_file = Path("cookies.txt")
        if not cookies_file.exists():
            return None
        ydl_opts = get_ydl_opts(quality)
        ydl_opts['cookiefile'] = str(cookies_file)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp —Å cookies: {e}")
    return None

async def download_video_ytdlp_alt(url: str) -> Optional[str]:
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)...")
        ydl_opts = {
            'format': 'best',
            'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
            'quiet': True,
            'no_warnings': True
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: {e}")
    return None

async def download_video(url: str, quality: str = "best") -> Optional[str]:
    methods = [
        lambda: download_video_ytdlp(url, quality),
        lambda: download_video_ytdlp_cookies(url, quality),
        lambda: download_video_ytdlp_alt(url)
    ]
    for method in methods:
        result = await method()
        if result:
            return result
    return None

# === üì§ –û–¢–ü–†–ê–í–ö–ê ===
async def send_photos_with_caption(chat_id: int, photos: List[str], caption: str) -> bool:
    if not photos:
        return False
    try:
        if len(photos) == 1:
            await bot.send_photo(chat_id=chat_id, photo=FSInputFile(photos[0]), caption=caption)
        else:
            media_group = [
                types.InputMediaPhoto(media=FSInputFile(photo), caption=caption if i == 0 else None)
                for i, photo in enumerate(photos[:10])
            ]
            await bot.send_media_group(chat_id=chat_id, media=media_group)
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –≤ Telegram")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return False

# === üì§ –ó–ê–ì–†–£–ó–ö–ê –ù–ê –§–ê–ô–õ–û–û–ë–ú–ï–ù–ù–ò–ö–ò ===
async def upload_to_filebin(file_path: str) -> Optional[str]:
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ filebin.net...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                async with session.post('https://filebin.net/', data=data, params={'expiry': '3d'}) as resp:
                    if resp.status == 200:
                        text = await resp.text()
                        lines = text.strip().split('\n')
                        if lines and lines[0].strip().startswith('http') and 'filebin.net' in lines[0]:
                            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ filebin.net")
                            return lines[0].strip()
    except Exception as e:
        logger.error(f"‚ùå filebin.net: {e}")
    return None

async def upload_to_gofile(file_path: str) -> Optional[str]:
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ gofile.io...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=300)) as session:
            async with session.get('https://api.gofile.io/servers') as resp:
                if resp.status != 200:
                    return None
                server_data = await resp.json()
                if not server_data.get('data', {}).get('servers'):
                    return None
                server = server_data['data']['servers'][0]['name']
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                upload_url = f'https://{server}.gofile.io/contents/uploadfile'
                async with session.post(upload_url, data=data) as upload_resp:
                    if upload_resp.status == 200:
                        result = await upload_resp.json()
                        if result.get('status') == 'ok':
                            return result['data']['downloadPage']
    except Exception as e:
        logger.error(f"‚ùå gofile.io: {e}")
    return None

async def send_video_or_link(chat_id: int, file_path: str, caption: str = "") -> bool:
    file_size = Path(file_path).stat().st_size
    size_mb = file_size / (1024 * 1024)

    if size_mb <= 50:
        try:
            await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
            logger.info(f"‚úÖ –í–∏–¥–µ–æ ({size_mb:.1f} –ú–ë) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")

    uploaders = [
        ('gofile.io', upload_to_gofile),
        ('filebin.net', upload_to_filebin),
    ]

    for name, uploader in uploaders:
        link = await uploader(file_path)
        if link:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ –§–∞–π–ª ({size_mb:.1f} –ú–ë) –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {name}\n\nüì• –°–∫–∞—á–∞—Ç—å: {link}\n\n‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"
            )
            return True

    await bot.send_message(
        chat_id=chat_id,
        text=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë).\n–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    )
    return False

# === üß≠ –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    )

def settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –õ—É—á—à–µ–µ")],
            [KeyboardButton(text="üé¨ 1080p"), KeyboardButton(text="üì∫ 720p")],
            [KeyboardButton(text="‚ö° 480p"), KeyboardButton(text="üì± 360p")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# === üöÄ –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    welcome_text = (
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram\n"
        "üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )

# --- ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–û–ö –ù–ê–°–¢–†–û–ï–ö ---
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
# –û–Ω –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —á–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫.
@dp.message(VideoStates.choosing_quality, F.text.in_([
    "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p", "‚óÄÔ∏è –ù–∞–∑–∞–¥"
]))
async def handle_settings_buttons(message: types.Message, state: FSMContext):
    quality_map = {
        "üåü –õ—É—á—à–µ–µ": "best",
        "üé¨ 1080p": "1080p",
        "üì∫ 720p": "720p",
        "‚ö° 480p": "480p",
        "üì± 360p": "360p"
    }

    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
    else:
        user_settings[message.from_user.id] = quality_map[message.text]
        await message.answer(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{message.text}</b>",
            reply_markup=main_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()

@dp.message(
    F.text &  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    ~F.text.startswith("/") &  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    ~F.text.in_([  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p", "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    ])
)
async def handle_link(message: types.Message, state: FSMContext):
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, TikTok –∏–ª–∏ Instagram")
        return

    # ‚úÖ RATE LIMITING
    await check_rate_limit(message.from_user.id)
    platform = detect_platform(url)
    status_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {platform.upper()}...")
    user_quality = get_quality_setting(message.from_user.id)
    temp_file = None
    temp_photos = []

    try:
        if platform == 'instagram':
            temp_file, photos, description = await download_instagram(url, user_quality)
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º description –Ω–∞ –æ—à–∏–±–∫–∏
            if description and "‚ùå" in description:
                await status_msg.edit_text(description, parse_mode="HTML")
                return
            if photos:
                temp_photos = photos
                await status_msg.delete()
                success = await send_photos_with_caption(message.chat.id, photos, description)
                cleanup_files(photos)
                return
            # üî• –ù–û–í–û–ï: –ï—Å–ª–∏ temp_file –µ—Å—Ç—å (–≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ)
            if temp_file and os.path.exists(temp_file):
                await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
                await send_video_or_link(message.chat.id, temp_file)
                await status_msg.delete()
                cleanup_file(temp_file)
                return
            # üî• –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞—á–∞–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
            if not temp_file and not photos:
                error_detail = description if description else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
                await status_msg.edit_text(error_detail, parse_mode="HTML")
                return

        elif platform == 'tiktok':
            if '/photo/' in url.lower():
                photos, description = await download_tiktok_photos(url)
                await status_msg.delete()
                if photos:
                    temp_photos = photos
                    success = await send_photos_with_caption(message.chat.id, photos, description)
                    cleanup_files(photos)
                else:
                    await message.answer(description)
                return

        # –î–ª—è YouTube –∏ TikTok –≤–∏–¥–µ–æ
        temp_file = await download_video(url, user_quality)
        if not temp_file or not os.path.exists(temp_file):
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
            return

        await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        await send_video_or_link(message.chat.id, temp_file)
        await status_msg.delete()
        cleanup_file(temp_file)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        try:
            await status_msg.edit_text(error_msg)
        except:
            pass

    finally:
        # üßπ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê
        if temp_file:
            cleanup_file(temp_file)
        if temp_photos:
            cleanup_files(temp_photos)

# === üöÄ –ó–ê–ü–£–°–ö: –ì–ò–ë–ö–ò–ô –†–ï–ñ–ò–ú ===
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    if WEBHOOK_HOST:
        # === –†–µ–∂–∏–º Webhook (–¥–ª—è Railway) ===
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        import aiohttp.web

        WEBHOOK_PATH = "/"
        WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

        app = aiohttp.web.Application()
        webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)

        port = int(os.getenv("PORT", 8000))
        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, host="0.0.0.0", port=port)
        await site.start()
        logger.info(f"üì° Webhook-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

        try:
            while True:
                await asyncio.sleep(3600)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await bot.delete_webhook(drop_pending_updates=True)
            await runner.cleanup()
            await bot.session.close()
    else:
        # === –†–µ–∂–∏–º Long Polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞) ===
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling (–ª–æ–∫–∞–ª—å–Ω–æ)")
        await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())