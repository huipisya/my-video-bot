import os
import tempfile
import asyncio
import logging
import re
import hashlib
import json
from pathlib import Path
from typing import Optional, Tuple, List
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
import yt_dlp
import instaloader
import pickle
import sys
sys.stdout.reconfigure(encoding='utf-8')
# === üß∞ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === üîê –ó–ê–ì–†–£–ó–ö–ê –¢–û–ö–ï–ù–ê ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === üß† –•–†–ê–ù–ò–õ–ò–©–ï –ù–ê–°–¢–†–û–ï–ö ===
user_settings = {}

# === üé® –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class VideoStates(StatesGroup):
    choosing_quality = State()

# === üì∫ –ö–ê–ß–ï–°–¢–í–ê –í–ò–î–ï–û ===
QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
    "1080p": 'bestvideo[ext=mp4][height<=1080]+bestaudio[ext=m4a]/best[height<=1080][ext=mp4]/best',
    "720p": 'bestvideo[ext=mp4][height<=720]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best',
    "480p": 'best[height<=480][ext=mp4]/best[ext=mp4]/best',
    "360p": 'best[height<=360][ext=mp4]/best[ext=mp4]/best'
}

# === üß∫ –ù–ê–°–¢–†–û–ô–ö–ò –ö–≠–®–ê ===
CACHE_DIR = Path("cache")
CACHE_DIR.mkdir(exist_ok=True)
CACHE_TTL = 3600  # 1 —á–∞—Å

# === üõ† –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_quality_setting(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_settings.get(user_id, "best")

def get_ydl_opts(quality: str = "best") -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp"""
    return {
        'format': QUALITY_FORMATS.get(quality, QUALITY_FORMATS["best"]),
        'merge_output_format': 'mp4',
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        'extractor_args': {
            'youtube': {
                'skip': ['hls', 'dash'],
            }
        }
    }

def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL"""
    regex = re.compile(
        r'^(https?://)?(www\.)?'
        r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vm\.tiktok\.com|vt\.tiktok\.com)',
        re.IGNORECASE
    )
    return bool(re.match(regex, url))

def detect_platform(url: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL"""
    url_lower = url.lower()
    if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
        return 'youtube'
    elif 'tiktok.com' in url_lower or 'vm.tiktok.com' in url_lower or 'vt.tiktok.com' in url_lower:
        return 'tiktok'
    elif 'instagram.com' in url_lower:
        return 'instagram'
    return 'unknown'

def get_cache_key(url: str) -> str:
    """–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞"""
    return hashlib.md5(url.encode()).hexdigest()

def save_to_cache(key: str, data: any) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
    try:
        cache_file = CACHE_DIR / f"{key}.pkl"
        with open(cache_file, 'wb') as f:
            pickle.dump(data, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")

def load_from_cache(key: str) -> Optional[any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
    try:
        cache_file = CACHE_DIR / f"{key}.pkl"
        if cache_file.exists():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ –∫—ç—à–∞
            if (os.path.getmtime(cache_file) + CACHE_TTL) > asyncio.get_event_loop().time():
                with open(cache_file, 'rb') as f:
                    return pickle.load(f)
            else:
                cache_file.unlink()  # –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞: {e}")
    return None

async def download_file(url: str, save_path: str, timeout: int = 60) -> bool:
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ URL"""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                    return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {url}: {e}")
    return False

# === üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï INSTAGRAM - –ú–ï–¢–û–î 1 (Instaloader) ===
async def download_instagram_instaloader(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram —á–µ—Ä–µ–∑ Instaloader"""
    try:
        logger.info("üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Instaloader...")
        L = instaloader.Instaloader(
            download_videos=True,
            download_pictures=True,
            download_geotags=False,
            download_comments=False,
            save_metadata=False,
            quiet=True
        )
        
        post = instaloader.Post.from_shortcode(L.context, shortcode)

        if post.is_video:
            # –í–∏–¥–µ–æ
            video_url = post.video_url
            temp_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}.mp4")
            
            if await download_file(video_url, temp_path):
                logger.info("‚úÖ Instagram: –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ Instaloader")
                return (temp_path, None, None)
        else:
            # –§–æ—Ç–æ
            photos = []
            description = post.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            
            if post.typename == "GraphSidecar":
                # –ì–∞–ª–µ—Ä–µ—è
                for i, node in enumerate(post.get_sidecar_nodes()):
                    if node.is_video or i >= 10:
                        continue
                    
                    photo_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}_{i}.jpg")
                    if await download_file(node.display_url, photo_path):
                        photos.append(photo_path)
            else:
                # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
                photo_path = os.path.join(tempfile.gettempdir(), f"insta_{shortcode}.jpg")
                if await download_file(post.url, photo_path):
                    photos.append(photo_path)

            if photos:
                logger.info("‚úÖ Instagram: —Ñ–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ Instaloader")
                return (None, photos, description)

    except Exception as e:
        logger.error(f"‚ùå Instagram Instaloader: {e}")
    
    return None, None, None

# === üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï INSTAGRAM - –ú–ï–¢–û–î 2 (yt-dlp) ===
async def download_instagram_ytdlp(url: str, quality: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram —á–µ—Ä–µ–∑ yt-dlp"""
    try:
        logger.info("üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp...")
        ydl_opts = get_ydl_opts(quality)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info("‚úÖ Instagram: —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp")
                return (temp_file, None, None)
    except Exception as e:
        logger.error(f"‚ùå Instagram yt-dlp: {e}")
    
    return None, None, None

# === üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï INSTAGRAM - –ú–ï–¢–û–î 3 (API) ===
async def download_instagram_api(url: str, shortcode: str) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API"""
    try:
        logger.info("üîÑ Instagram: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ API...")
        api_url = f"https://www.instagram.com/p/{shortcode}/?__a=1&__d=dis"
        
        async with aiohttp.ClientSession() as session:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            async with session.get(api_url, headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    media = data.get('graphql', {}).get('shortcode_media', {})
                    
                    if media.get('is_video'):
                        video_url = media.get('video_url')
                        if video_url:
                            temp_path = os.path.join(tempfile.gettempdir(), f"insta_api_{shortcode}.mp4")
                            if await download_file(video_url, temp_path):
                                logger.info("‚úÖ Instagram: –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ API")
                                return (temp_path, None, None)
                    else:
                        photos = []
                        edges = media.get('edge_sidecar_to_children', {}).get('edges', [])
                        
                        if edges:
                            # –ì–∞–ª–µ—Ä–µ—è
                            for i, edge in enumerate(edges[:10]):
                                node = edge.get('node', {})
                                img_url = node.get('display_url')
                                if img_url:
                                    photo_path = os.path.join(tempfile.gettempdir(), f"insta_api_{shortcode}_{i}.jpg")
                                    if await download_file(img_url, photo_path):
                                        photos.append(photo_path)
                        else:
                            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
                            img_url = media.get('display_url')
                            if img_url:
                                photo_path = os.path.join(tempfile.gettempdir(), f"insta_api_{shortcode}.jpg")
                                if await download_file(img_url, photo_path):
                                    photos.append(photo_path)
                        
                        if photos:
                            description = media.get('edge_media_to_caption', {}).get('edges', [{}])[0].get('node', {}).get('text', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                            logger.info("‚úÖ Instagram: —Ñ–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ API")
                            return (None, photos, description)
    
    except Exception as e:
        logger.error(f"‚ùå Instagram API: {e}")
    
    return None, None, None

# === üì• –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø INSTAGRAM ===
async def download_instagram(url: str, quality: str = "best") -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram (–ø—Ä–æ–±—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã)"""
    cache_key = get_cache_key(url)
    cached_result = load_from_cache(cache_key)
    if cached_result:
        logger.info("‚úÖ Instagram: –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞")
        return cached_result

    # –ò–∑–≤–ª–µ–∫–∞–µ–º shortcode
    shortcode_match = re.search(r'/(?:p|reel)/([^/]+)', url)
    if not shortcode_match:
        return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å shortcode –∏–∑ URL"
    
    shortcode = shortcode_match.group(1)

    # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
    methods = [
        lambda: download_instagram_instaloader(url, shortcode),
        lambda: download_instagram_ytdlp(url, quality),
        lambda: download_instagram_api(url, shortcode)
    ]

    for method in methods:
        result = await method()
        if result and (result[0] or result[1]):
            save_to_cache(cache_key, result)
            return result

    return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï TIKTOK –§–û–¢–û ===
async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    """–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ TikTok —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥"""
    cache_key = get_cache_key(url)
    cached_result = load_from_cache(cache_key)
    if cached_result:
        logger.info("‚úÖ TikTok: –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞")
        return cached_result

    try:
        logger.info("üîÑ TikTok: –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ç–æ...")
        
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        clean_url = url.split('?')[0]
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Referer': 'https://www.tiktok.com/',
            'DNT': '1'
        }
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.get(clean_url, headers=headers, allow_redirects=True) as resp:
                if resp.status != 200:
                    logger.error(f"TikTok: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None, f"‚ùå TikTok –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}"
                
                html = await resp.text()
                
                photos = []
                
                # –ò—â–µ–º –≤—Å–µ img —Ç–µ–≥–∏ —Å imagePost
                img_patterns = [
                    r'<img[^>]*?src="([^"]*imagePost[^"]*?)"',
                    r'srcSet="([^"]*imagePost[^"]*?)"',
                    r'"imagePost":"([^"]*)"',
                    r'"images":\[([^\]]*)\]',
                    r'<img[^>]*?src="(https://[^"]*tiktok[^"]*\.jpg)"',
                    r'<img[^>]*?data-src="(https://[^"]*\.jpg)"'
                ]
                
                urls_found = set()
                
                for pattern in img_patterns:
                    matches = re.finditer(pattern, html, re.DOTALL)
                    for match in matches:
                        raw_url = match.group(1)
                        
                        # –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if '[' in raw_url or '{' in raw_url:
                            json_matches = re.findall(r'"([https://][^"]*\.jpg)"', raw_url)
                            for url_str in json_matches:
                                urls_found.add(url_str)
                        else:
                            # –û—á–∏—â–∞–µ–º URL
                            url_str = raw_url.replace(r'\/', '/').split('?')[0]
                            if url_str.startswith('http') and '.jpg' in url_str.lower():
                                urls_found.add(url_str)
                
                logger.info(f"TikTok: –Ω–∞–π–¥–µ–Ω–æ {len(urls_found)} URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
                for i, img_url in enumerate(list(urls_found)[:10]):  # –õ–∏–º–∏—Ç 10 —Ñ–æ—Ç–æ
                    try:
                        img_path = os.path.join(tempfile.gettempdir(), f"tiktok_photo_{i}.jpg")
                        logger.info(f"–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ {i+1}: {img_url[:80]}...")
                        
                        if await download_file(img_url, img_path, timeout=15):
                            photos.append(img_path)
                            logger.info(f"‚úÖ –§–æ—Ç–æ {i+1} —Å–∫–∞—á–∞–Ω–æ")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ {i+1}: {e}")
                        continue
                
                if photos:
                    logger.info(f"‚úÖ TikTok: —Å–∫–∞—á–∞–Ω–æ {len(photos)} —Ñ–æ—Ç–æ")
                    result = (photos, "üì∏ –§–æ—Ç–æ –∏–∑ TikTok")
                    save_to_cache(cache_key, result)
                    return result
                else:
                    logger.warning("TikTok: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ HTML")
                    return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
    
    except asyncio.TimeoutError:
        logger.error("TikTok: timeout")
        return None, "‚ùå –ò—Å—Ç—ë–∫ timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ TikTok"
    except Exception as e:
        logger.error(f"‚ùå TikTok –ø–∞—Ä—Å–∏–Ω–≥: {e}")
        return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}"

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û - –ú–ï–¢–û–î 1 (yt-dlp —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π) ===
async def download_video_ytdlp(url: str, quality: str) -> Optional[str]:
    """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp"""
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp...")
        ydl_opts = get_ydl_opts(quality)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info("‚úÖ –í–∏–¥–µ–æ: —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp")
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {e}")
    
    return None

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û - –ú–ï–¢–û–î 2 (yt-dlp —Å cookies) ===
async def download_video_ytdlp_cookies(url: str, quality: str) -> Optional[str]:
    """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp —Å cookies"""
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp —Å cookies...")
        cookies_file = Path("cookies.txt")
        if not cookies_file.exists():
            return None
        
        ydl_opts = get_ydl_opts(quality)
        ydl_opts['cookiefile'] = str(cookies_file)
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info("‚úÖ –í–∏–¥–µ–æ: —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp —Å cookies")
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp —Å cookies: {e}")
    
    return None

# === üì§ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û - –ú–ï–¢–û–î 3 (yt-dlp –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) ===
async def download_video_ytdlp_alt(url: str) -> Optional[str]:
    """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        logger.info("üîÑ –í–∏–¥–µ–æ: –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ yt-dlp (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)...")
        ydl_opts = {
            'format': 'best',
            'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
            'quiet': True,
            'no_warnings': True
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info("‚úÖ –í–∏–¥–µ–æ: —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)")
                return temp_file
    except Exception as e:
        logger.error(f"‚ùå yt-dlp –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: {e}")
    
    return None

# === üì§ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –í–ò–î–ï–û ===
async def download_video(url: str, quality: str = "best") -> Optional[str]:
    """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (–ø—Ä–æ–±—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã)"""
    methods = [
        lambda: download_video_ytdlp(url, quality),
        lambda: download_video_ytdlp_cookies(url, quality),
        lambda: download_video_ytdlp_alt(url)
    ]

    for method in methods:
        result = await method()
        if result:
            return result

    return None

# === üì§ –û–¢–ü–†–ê–í–ö–ê –§–û–¢–û –° –û–ü–ò–°–ê–ù–ò–ï–ú ===
async def send_photos_with_caption(chat_id: int, photos: List[str], caption: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    if not photos:
        return False

    try:
        if len(photos) == 1:
            await bot.send_photo(
                chat_id=chat_id,
                photo=FSInputFile(photos[0]),
                caption=caption
            )
        else:
            media_group = [
                types.InputMediaPhoto(
                    media=FSInputFile(photo),
                    caption=caption if i == 0 else None
                )
                for i, photo in enumerate(photos[:10])  # Telegram –ª–∏–º–∏—Ç 10 —Ñ–æ—Ç–æ
            ]
            await bot.send_media_group(chat_id=chat_id, media=media_group)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return False

# === üì§ –ó–ê–ì–†–£–ó–ö–ê –ù–ê –§–ê–ô–õ–û–û–ë–ú–ï–ù–ù–ò–ö–ò ===
async def upload_to_filebin(file_path: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ filebin.net"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ filebin.net...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                async with session.post('https://filebin.net/', data=data, params={'expiry': '3d'}) as resp:
                    if resp.status == 200:
                        text = await resp.text()
                        match = re.search(r'https://filebin\.net/[^"\s<>\)]+', text)
                        if match:
                            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ filebin.net")
                            return match.group(0)
    except Exception as e:
        logger.error(f"‚ùå filebin.net: {e}")
    return None

async def upload_to_gofile(file_path: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ gofile.io"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ gofile.io...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            async with session.get('https://api.gofile.io/getServer') as resp:
                if resp.status == 200:
                    server_data = await resp.json()
                    server = server_data.get('data', {}).get('server', 'store1')
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                    with open(file_path, 'rb') as f:
                        data = aiohttp.FormData()
                        data.add_field('file', f, filename=Path(file_path).name)
                        upload_url = f'https://{server}.gofile.io/uploadFile'
                        async with session.post(upload_url, data=data) as upload_resp:
                            if upload_resp.status == 200:
                                result = await upload_resp.json()
                                if result.get('status') == 'ok':
                                    logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ gofile.io")
                                    return result['data']['downloadPage']
    except Exception as e:
        logger.error(f"‚ùå gofile.io: {e}")
    return None

async def upload_to_tmpfiles(file_path: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ tmpfiles.org"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ tmpfiles.org...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                async with session.post('https://tmpfiles.org/api/v1/upload', data=data) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        url = result.get('data', {}).get('url', '')
                        if url:
                            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ tmpfiles.org")
                            return url.replace('tmpfiles.org/', 'tmpfiles.org/dl/')
    except Exception as e:
        logger.error(f"‚ùå tmpfiles.org: {e}")
    return None

async def upload_to_pixeldrain(file_path: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ pixeldrain.com"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ pixeldrain.com...")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
            with open(file_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('file', f, filename=Path(file_path).name)
                async with session.post('https://pixeldrain.com/api/file', data=data) as resp:
                    if resp.status == 201:
                        result = await resp.json()
                        file_id = result.get('id')
                        if file_id:
                            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ pixeldrain.com")
                            return f'https://pixeldrain.com/u/{file_id}'
    except Exception as e:
        logger.error(f"‚ùå pixeldrain.com: {e}")
    return None

async def send_video_or_link(chat_id: int, file_path: str, caption: str = "") -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
    file_size = Path(file_path).stat().st_size
    size_mb = file_size / (1024 * 1024)

    # Telegram –ª–∏–º–∏—Ç 50 –ú–ë
    if size_mb <= 50:
        try:
            await bot.send_video(
                chat_id=chat_id,
                video=FSInputFile(file_path),
                caption=caption
            )
            return True
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ Telegram: {e}")

    # –ü—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    uploaders = [
        ('filebin.net', upload_to_filebin),
        ('gofile.io', upload_to_gofile),
        ('tmpfiles.org', upload_to_tmpfiles),
        ('pixeldrain.com', upload_to_pixeldrain)
    ]

    for name, uploader in uploaders:
        logger.info(f"–ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ {name}...")
        link = await uploader(file_path)
        if link:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ –§–∞–π–ª ({size_mb:.1f} –ú–ë) –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {name}\n\n"
                     f"üì• –°–∫–∞—á–∞—Ç—å: {link}\n\n"
                     f"‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 3 –¥–Ω—è"
            )
            return True

    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    await bot.send_message(
        chat_id=chat_id,
        text=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë).\n"
             f"–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏."
    )
    return False

# === üß≠ –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    )

def settings_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –õ—É—á—à–µ–µ")],
            [KeyboardButton(text="üé¨ 1080p"), KeyboardButton(text="üì∫ 720p")],
            [KeyboardButton(text="‚ö° 480p"), KeyboardButton(text="üì± 360p")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# === üöÄ –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    welcome_text = (
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram\n\n"
        "üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )

@dp.message(VideoStates.choosing_quality, F.text.in_([
    "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p"
]))
async def set_quality(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ"""
    quality_map = {
        "üåü –õ—É—á—à–µ–µ": "best",
        "üé¨ 1080p": "1080p",
        "üì∫ 720p": "720p",
        "‚ö° 480p": "480p",
        "üì± 360p": "360p"
    }
    user_settings[message.from_user.id] = quality_map[message.text]
    await message.answer(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{message.text}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

@dp.message(VideoStates.choosing_quality, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())

# === üì• –û–ë–†–ê–ë–û–¢–ö–ê –°–°–´–õ–û–ö ===
@dp.message(F.text)
async def handle_link(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ"""
    url = message.text.strip()
    
    if not is_valid_url(url):
        await message.answer(
            "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞:\n"
            "‚Ä¢ YouTube\n‚Ä¢ TikTok\n‚Ä¢ Instagram"
        )
        return

    platform = detect_platform(url)
    status_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {platform.upper()}...")
    user_quality = get_quality_setting(message.from_user.id)
    temp_file = None
    temp_photos = []

    try:
        # Instagram
        if platform == 'instagram':
            temp_file, photos, description = await download_instagram(url, user_quality)
            
            if description and "‚ùå" in description:
                await status_msg.edit_text(description)
                return

            if photos:
                temp_photos = photos
                await status_msg.delete()
                await send_photos_with_caption(message.chat.id, photos, description)
                return

        # TikTok —Ñ–æ—Ç–æ - –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–ï–î –í–ò–î–ï–û
        if platform == 'tiktok' and '/photo/' in url:
            logger.info("üîÑ TikTok: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ, —Å–∫–∞—á–∏–≤–∞—é...")
            photos, description = await download_tiktok_photos(url)
            
            if photos:
                temp_photos = photos
                await status_msg.delete()
                await send_photos_with_caption(message.chat.id, photos, description)
                return
            else:
                await status_msg.edit_text(description)
                return

        # –í–∏–¥–µ–æ (YouTube, TikTok –≤–∏–¥–µ–æ, Instagram –≤–∏–¥–µ–æ)
        logger.info("üîÑ –í–∏–¥–µ–æ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ, —Å–∫–∞—á–∏–≤–∞—é...")
        temp_file = await download_video(url, user_quality)

        if not temp_file or not os.path.exists(temp_file):
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
            return

        await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        await send_video_or_link(message.chat.id, temp_file, caption="üé• –ì–æ—Ç–æ–≤–æ!")
        await status_msg.delete()

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        try:
            await status_msg.edit_text(error_msg)
        except:
            pass
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if temp_file and os.path.exists(temp_file):
            try:
                os.remove(temp_file)
                logger.info(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {temp_file}: {e}")
        
        for photo in temp_photos:
            try:
                if os.path.exists(photo):
                    os.remove(photo)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ {photo}: {e}")
# === üèÅ –ó–ê–ü–£–°–ö ===
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
