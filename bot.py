import os
import tempfile
import asyncio
import logging
import uuid
import re
import json
import time
from pathlib import Path
from typing import Optional, Tuple, List, Dict
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InputMediaPhoto, InputMediaVideo
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
import yt_dlp
import sys
from playwright.async_api import async_playwright, Browser, BrowserContext, Page
sys.stdout.reconfigure(encoding='utf-8')
# === üß∞ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# === üîê –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
load_dotenv()
# === üìÅ –°–û–ó–î–ê–ù–ò–ï COOKIES –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
def init_cookies_from_env():
    """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª—ã cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway"""
    cookies_created = 0
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies.txt (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
    cookies_txt_content = os.getenv("COOKIES_TXT")
    if cookies_txt_content:
        cookies_file = Path("cookies.txt")
        with open(cookies_file, 'w', encoding='utf-8') as f:
            f.write(cookies_txt_content)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies.txt")
        cookies_created += 1
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies_bot1/2/3 (Instagram) - –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω—ã
    for i in range(1, 4):
        env_var = f"COOKIES_BOT{i}"
        cookies_content = os.getenv(env_var)
        if cookies_content:
            cookies_file = Path(f"cookies_bot{i}")
            with open(cookies_file, 'w', encoding='utf-8') as f:
                f.write(cookies_content)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies_bot{i}")
            cookies_created += 1
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube cookies
    youtube_cookies = os.getenv("COOKIES_YOUTUBE")
    if youtube_cookies:
        cookies_file = Path("cookies_youtube.txt")
        with open(cookies_file, 'w', encoding='utf-8') as f:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not youtube_cookies.strip().startswith('#'):
                f.write("# Netscape HTTP Cookie File\n")
            f.write(youtube_cookies)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies_youtube.txt")
        cookies_created += 1
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Instagram cookies (–Ω–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    instagram_cookies = os.getenv("COOKIES_INSTAGRAM")
    if instagram_cookies:
        cookies_file = Path("cookies_instagram.txt") # –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è Instagram
        with open(cookies_file, 'w', encoding='utf-8') as f:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not instagram_cookies.strip().startswith('#'):
                f.write("# Netscape HTTP Cookie File\n")
            f.write(instagram_cookies)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω cookies_instagram.txt")
        cookies_created += 1

    if cookies_created == 0:
        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ cookies –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    else:
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {cookies_created} —Ñ–∞–π–ª–æ–≤ cookies")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º cookies
init_cookies_from_env()
# === üîê –¢–û–ö–ï–ù –ò WEBHOOK ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
WEBHOOK_PATH = "/"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
# === üß† –•–†–ê–ù–ò–õ–ò–©–ï –ù–ê–°–¢–†–û–ï–ö ===
user_settings = {}
RATE_LIMIT_DELAY = {}

# --- –ù–û–í–û–ï (Instagram Playwright - –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Instagram Playwright
IG_BROWSER: Optional[Browser] = None
IG_CONTEXT: Optional[BrowserContext] = None
IG_PLAYWRIGHT_READY = False

async def init_instagram_playwright():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright –¥–ª—è Instagram.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç sessionid –∏ ds_user_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    """
    global IG_BROWSER, IG_CONTEXT, IG_PLAYWRIGHT_READY
    logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Instagram Playwright...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Playwright
        pw = await async_playwright().start()
        IG_BROWSER = await pw.chromium.launch(
            headless=True, # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–∏–¥–µ—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # args=["--no-sandbox", "--disable-dev-shm-usage"] # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        cookies_to_load = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies_instagram (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)
        instagram_cookies_content = os.getenv("COOKIES_INSTAGRAM") or os.getenv("COOKIES_TXT") # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if instagram_cookies_content:
            logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º Instagram cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            try:
                lines = instagram_cookies_content.strip().split('\n')
                for line in lines:
                    if line.startswith('#') or not line.strip():
                        continue
                    parts = line.strip().split('\t')
                    if len(parts) >= 7:
                        cookie_name = parts[5]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –Ω–∞–º –∏–º–µ–Ω–Ω–æ sessionid –∏–ª–∏ ds_user_id
                        if cookie_name in ['sessionid', 'ds_user_id']:
                            cookies_to_load.append({
                                "name": cookie_name,
                                "value": parts[6],
                                "domain": parts[0],
                                "path": parts[2],
                                "expires": int(parts[4]) if parts[4].isdigit() else None,
                                "httpOnly": bool(int(parts[3])),
                                "secure": bool(int(parts[1]))
                            })
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram cookies –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {e}")
        else:
            logger.info(f"üç™ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è COOKIES_INSTAGRAM/COOKIES_TXT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫ –±–µ–∑ cookies.")

        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        IG_CONTEXT = await IG_BROWSER.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.5993.118 Safari/537.36'
        )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ cookies
        if cookies_to_load:
            await IG_CONTEXT.add_cookies(cookies_to_load)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_to_load)} Instagram cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright.")

        IG_PLAYWRIGHT_READY = True
        logger.info("‚úÖ Instagram Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Instagram Playwright: {e}")
        IG_PLAYWRIGHT_READY = False
        if IG_BROWSER:
            await IG_BROWSER.close()
            IG_BROWSER = None
        if IG_CONTEXT:
            await IG_CONTEXT.close()
            IG_CONTEXT = None
# --- /–ù–û–í–û–ï (Instagram Playwright - –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---

# --- –ù–û–í–û–ï (YouTube Playwright) ---
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è YouTube Playwright
YT_BROWSER: Optional[Browser] = None
YT_CONTEXT: Optional[BrowserContext] = None
YT_PLAYWRIGHT_READY = False

async def init_youtube_playwright():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright –¥–ª—è YouTube.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ —Ñ–∞–π–ª–∞ cookies_youtube.txt (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    """
    global YT_BROWSER, YT_CONTEXT, YT_PLAYWRIGHT_READY
    logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube Playwright...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Playwright (—Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è YT, —á—Ç–æ–±—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç IG)
        pw = await async_playwright().start()
        YT_BROWSER = await pw.chromium.launch(
            headless=True,
            # args=["--no-sandbox", "--disable-dev-shm-usage"] # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        )
        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cookies_to_load = []
        cookie_file_path = Path("cookies_youtube.txt")
        if cookie_file_path.exists():
            logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º YouTube cookies –∏–∑ {cookie_file_path.name}")
            try:
                with open(cookie_file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Netscape
                    for line in lines:
                        if line.startswith('#') or not line.strip():
                            continue
                        parts = line.strip().split('\t')
                        if len(parts) >= 7:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç Playwright
                            cookies_to_load.append({
                                "name": parts[5],
                                "value": parts[6],
                                "domain": parts[0],
                                "path": parts[2],
                                "expires": int(parts[4]) if parts[4].isdigit() else None,
                                "httpOnly": bool(int(parts[3])),
                                "secure": bool(int(parts[1]))
                            })
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ {cookie_file_path.name} –¥–ª—è Playwright: {e}")
        else:
            logger.info(f"üç™ –§–∞–π–ª {cookie_file_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Playwright.")

        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ cookies
        YT_CONTEXT = await YT_BROWSER.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        )
        if cookies_to_load:
            await YT_CONTEXT.add_cookies(cookies_to_load)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_to_load)} cookies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç YouTube Playwright.")

        YT_PLAYWRIGHT_READY = True
        logger.info("‚úÖ YouTube Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        # –í–ê–ñ–ù–û: –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º pw –∑–¥–µ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–µ–π download_youtube_with_playwright
        # –¢–∞–∫–∂–µ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º YT_BROWSER –∏ YT_CONTEXT, –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        # –ò—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –≤ main() –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YouTube Playwright: {e}")
        YT_PLAYWRIGHT_READY = False
        if YT_BROWSER:
            await YT_BROWSER.close()
            YT_BROWSER = None
        if YT_CONTEXT:
            await YT_CONTEXT.close()
            YT_CONTEXT = None
# --- /–ù–û–í–û–ï (YouTube Playwright) ---


# === üé® –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class VideoStates(StatesGroup):
    choosing_quality = State()
# === üì∫ –ö–ê–ß–ï–°–¢–í–ê –í–ò–î–ï–û ===
QUALITY_FORMATS = {
    "best": 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio/best',
    "1080p": 'bestvideo[ext=mp4][height<=1920][width<=1920]+bestaudio[ext=m4a]/bestvideo[height<=1920]+bestaudio/best',
    "720p": 'bestvideo[ext=mp4][height<=1280][width<=1280]+bestaudio[ext=m4a]/bestvideo[height<=1280]+bestaudio/best',
    "480p": 'bestvideo[ext=mp4][height<=854][width<=854]+bestaudio[ext=m4a]/bestvideo[height<=854]+bestaudio/best',
    "360p": 'bestvideo[ext=mp4][height<=640][width<=640]+bestaudio[ext=m4a]/bestvideo[height<=640]+bestaudio/best'
}
# === üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í ===
def cleanup_file(file_path: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª"""
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            logger.debug(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {Path(file_path).name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
def cleanup_files(files: List[str]):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
    for file_path in files:
        cleanup_file(file_path)
# === üõ† –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def check_rate_limit(user_id: int):
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∑–∞–ø—Ä–æ—Å –≤ 3 —Å–µ–∫—É–Ω–¥—ã"""
    now = time.time()
    last_time = RATE_LIMIT_DELAY.get(user_id, 0)
    if now - last_time < 3:
        delay = 3 - (now - last_time)
        await asyncio.sleep(delay)
    RATE_LIMIT_DELAY[user_id] = time.time()
def get_quality_setting(user_id: int) -> str:
    return user_settings.get(user_id, "720p")
def set_quality_setting(user_id: int, quality: str):
    user_settings[user_id] = quality
    logger.info(f"üíæ –ö–∞—á–µ—Å—Ç–≤–æ '{quality}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è user {user_id}")
def get_ydl_opts(quality: str = "best", use_youtube_cookies: bool = True) -> dict: # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä use_youtube_cookies
    opts = {
        'format': QUALITY_FORMATS.get(quality, QUALITY_FORMATS["best"]),
        'merge_output_format': 'mp4',
        'noplaylist': True,
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(id)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
    }
    # YouTube cookies (—Ç–µ–ø–µ—Ä—å —É—Å–ª–æ–≤–Ω–æ)
    if use_youtube_cookies and Path("cookies_youtube.txt").exists(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ò —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        opts['cookiefile'] = 'cookies_youtube.txt'
        logger.info("üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º YouTube cookies (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)")
    elif use_youtube_cookies:
         logger.debug("üç™ YouTube cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥, –µ—Å–ª–∏ —Ñ–ª–∞–≥ true, –Ω–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    # Proxy
    proxy = os.getenv("PROXY_URL")
    if proxy:
        opts['proxy'] = proxy
    return opts
def is_valid_url(url: str) -> bool:
    regex = re.compile(
        r'^(https?://)?(www\.)?'
        r'(youtube\.com|youtu\.be|tiktok\.com|instagram\.com|vm\.tiktok\.com|vt\.tiktok\.com)',
        re.IGNORECASE
    )
    return bool(re.match(regex, url))
def detect_platform(url: str) -> str:
    url_lower = url.lower()
    if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
        return 'youtube'
    elif 'tiktok.com' in url_lower:
        return 'tiktok'
    elif 'instagram.com' in url_lower:
        return 'instagram'
    return 'unknown'
async def download_file(url: str, save_path: str, timeout: int = 60) -> bool:
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with open(save_path, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                    return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {url}: {e}")
    return False


# --- –ù–û–í–û–ï (Instagram Playwright - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ - –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—á–µ—Å—Ç–≤–∞) ---
async def download_instagram_with_playwright(url: str, quality: str = "best") -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Playwright –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Instagram –ø–æ—Å—Ç–æ–≤/—Ä–∏–ª—Å–æ–≤.
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å sessionid/ds_user_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ (–≤ —Ç.—á. reels) —Å –Ω–∞–∏–ª—É—á—à–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏–ª–∏ 1080p, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ/–∫–∞—Ä—É—Å–µ–ª—å.
    """
    global IG_CONTEXT
    if not IG_PLAYWRIGHT_READY or not IG_CONTEXT:
        logger.error("‚ùå Instagram Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None, None, "‚ùå Playwright –Ω–µ –≥–æ—Ç–æ–≤"

    page: Optional[Page] = None
    temp_files = []
    try:
        logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é Instagram –≤ Playwright –¥–ª—è {url}")
        page = await IG_CONTEXT.new_page()
        page.set_default_timeout(60000) # 60 —Å–µ–∫—É–Ω–¥
        page.set_default_navigation_timeout(60000)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        await page.goto(url, wait_until='networkidle')
        logger.info("üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
        await page.wait_for_selector('#react-root, #permalink-modal', timeout=15000)
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
        page_title = await page.title()
        if "Log in" in page_title or "error" in page.content().lower():
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞")
            return None, None, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        video_selector = 'video'
        image_selector = 'img'
        carousel_selector = 'ul._ac-3' # –û–±—ã—á–Ω–æ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–µ–π

        video_elements = await page.query_selector_all(video_selector)
        image_elements = await page.query_selector_all(image_selector)
        carousel_element = await page.query_selector(carousel_selector)

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (caption)
        description = None
        caption_selectors = [
            'article div._a9zs div', # –û–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
            'article div._a9zs span', # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
            'article header + div div', # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
        ]
        for selector in caption_selectors:
            caption_elem = await page.query_selector(selector)
            if caption_elem:
                description = await caption_elem.inner_text()
                if description:
                    break
        if description:
            if len(description) > 200:
                description = description[:200] + '...'
        else:
            description = 'üì∏ Instagram'

        # --- –õ–û–ì–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ---
        if carousel_element:
            # –ö–ê–†–£–°–ï–õ–¨
            logger.info("üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—É—Å–µ–ª—å")
            media_elements = await carousel_element.query_selector_all('video, img')
            if not media_elements:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ–¥–∏–∞—ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ä—É—Å–µ–ª–∏")
                return None, None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –∫–∞—Ä—É—Å–µ–ª–∏"

            media_info = []
            for i, elem in enumerate(media_elements):
                elem_tag = await elem.get_attribute('tagName')
                if elem_tag.lower() == 'video':
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ source —Ç–µ–≥–æ–≤ –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ src
                    sources = await elem.query_selector_all('source')
                    video_url = None
                    if sources:
                        # –ò—â–µ–º source —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å, –Ω–æ —á–∞—Å—Ç–æ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã
                        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–≥–∞ video, –µ—Å–ª–∏ source –Ω–µ—Ç
                        video_url = await elem.get_attribute('src')
                        if not video_url:
                            for source in sources:
                                src = await source.get_attribute('src')
                                # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä: –ø–µ—Ä–≤—ã–π source, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                                if src:
                                    video_url = src
                                    break
                    else:
                        video_url = await elem.get_attribute('src')

                    if video_url:
                        media_info.append({'url': video_url, 'type': 'video', 'index': i})
                elif elem_tag.lower() == 'img':
                    img_url = await elem.get_attribute('src') or await elem.get_attribute('data-src')
                    if img_url and 'placeholder' not in img_url:
                        media_info.append({'url': img_url, 'type': 'image', 'index': i})

            if not media_info:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ URL –º–µ–¥–∏–∞ –≤ –∫–∞—Ä—É—Å–µ–ª–∏")
                return None, None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –∫–∞—Ä—É—Å–µ–ª–∏"

            async def download_single_media(media_item):
                url = media_item['url']
                media_type = media_item['type']
                index = media_item['index']
                ext = '.mp4' if media_type == 'video' else '.jpg'
                path = os.path.join(tempfile.gettempdir(), f"ig_carousel_{index}{ext}")
                if await download_file(url, path, timeout=60):
                    logger.debug(f"‚úÖ –°–∫–∞—á–∞–Ω {media_type} –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏: {Path(path).name}")
                    return path
                return None

            tasks = [download_single_media(item) for item in media_info]
            downloaded_paths = await asyncio.gather(*tasks, return_exceptions=True)
            successful_paths = [p for p in downloaded_paths if isinstance(p, str) and os.path.exists(p)]
            if successful_paths:
                logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(successful_paths)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏")
                return None, successful_paths, description
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏")
                return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏"

        elif video_elements:
            # –û–î–ò–ù–û–ß–ù–û–ï –í–ò–î–ï–û (POST –∏–ª–∏ REEL)
            logger.info("üé• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ")
            video_elem = video_elements[0]

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ source —Ç–µ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ video
            sources = await video_elem.query_selector_all('source')
            video_url = None
            if sources:
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(sources)} source —Ç–µ–≥–æ–≤")
                # –ò—â–µ–º source —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                # –≠—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–∞–¥—ë–∂–Ω–æ, –Ω–æ –ø—Ä–æ–±—É–µ–º
                best_url = None
                best_quality = 0
                for source in sources:
                    src = await source.get_attribute('src')
                    if not src:
                        continue
                    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏—â–µ–º –≤ URL –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
                    if '1080' in src or 'hd' in src.lower():
                        best_url = src
                        best_quality = 1080
                        break # –ù–∞—à–ª–∏ 1080p, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                    elif '720' in src:
                        if best_quality < 720:
                            best_url = src
                            best_quality = 720
                    elif '480' in src:
                        if best_quality < 480:
                            best_url = src
                            best_quality = 480
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏—á–µ–≥–æ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π
                    elif not best_url:
                        best_url = src

                video_url = best_url
                logger.debug(f"–í—ã–±—Ä–∞–Ω URL –∏–∑ source —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞: {best_quality if best_url else 'None'}")
            else:
                # –ï—Å–ª–∏ source –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å src –∏–∑ —Å–∞–º–æ–≥–æ video —Ç–µ–≥–∞
                video_url = await video_elem.get_attribute('src')
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑ video.src: {video_url is not None}")

            if video_url:
                video_path = os.path.join(tempfile.gettempdir(), f"ig_video.mp4")
                if await download_file(video_url, video_path, timeout=120):
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {Path(video_path).name}")
                    return video_path, None, description
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ URL")
                    return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ")
                return None, None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω URL –≤–∏–¥–µ–æ"

        elif image_elements:
            # –û–î–ò–ù–û–ß–ù–û–ï –§–û–¢–û (POST)
            logger.info("üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ")
            img_elem = image_elements[0]
            img_url = await img_elem.get_attribute('src') or await img_elem.get_attribute('data-src')
            if img_url and 'placeholder' not in img_url:
                photo_path = os.path.join(tempfile.gettempdir(), f"ig_photo.jpg")
                if await download_file(img_url, photo_path, timeout=60):
                    logger.info(f"‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ: {Path(photo_path).name}")
                    return None, [photo_path], description
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ URL")
                    return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ"
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–æ—Ç–æ")
                return None, None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω URL —Ñ–æ—Ç–æ"

        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return None, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_instagram_with_playwright: {e}")
        return None, None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    finally:
        if page:
            await page.close()

# --- /–ù–û–í–û–ï (Instagram Playwright - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ - –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—á–µ—Å—Ç–≤–∞) ---


# === üì∏ –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–Ø INSTAGRAM ===
async def download_instagram(url: str, quality: str = "best", user_id: Optional[int] = None) -> Tuple[Optional[str], Optional[List[str]], Optional[str]]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Instagram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ Playwright.
    """
    logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Instagram (–∫–∞—á–µ—Å—Ç–≤–æ={quality}) —á–µ—Ä–µ–∑ Playwright...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    video_path, photos, description = await download_instagram_with_playwright(url, quality)
    if video_path or photos:
        logger.info(f"‚úÖ Instagram –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")
        return video_path, photos, description
    else:
        logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Instagram –∫–æ–Ω—Ç–µ–Ω—Ç: {description}")
        return None, None, description


# --- –ù–û–í–û–ï (Instagram Content Sending) ---
async def send_instagram_content(
    chat_id: int,
    video_path: Optional[str],
    photos: Optional[List[str]],
    description: Optional[str]
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ Instagram –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ
        if video_path and not photos:
            file_size_mb = os.path.getsize(video_path) / (1024 * 1024)
            if file_size_mb <= 50:
                await bot.send_video(
                    chat_id=chat_id,
                    video=FSInputFile(video_path),
                    caption=description[:1024] if description else None
                )
                return True
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"üì¶ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size_mb:.1f} –ú–ë)"
                )
                return False
        # –ö–∞—Ä—É—Å–µ–ª—å/—Ñ–æ—Ç–æ
        elif photos:
            total = len(photos)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {total} —Ñ–∞–π–ª–æ–≤...")
            for batch_start in range(0, total, 10):
                batch = photos[batch_start:batch_start + 10]
                media_group = []
                for idx, media_path in enumerate(batch):
                    if not os.path.exists(media_path):
                        continue
                    ext = Path(media_path).suffix.lower()
                    caption = None
                    if batch_start == 0 and idx == 0 and description:
                        caption = description[:1024]
                    if ext in ['.mp4', '.mov']:
                        media_group.append(InputMediaVideo(
                            media=FSInputFile(media_path),
                            caption=caption
                        ))
                    else:
                        media_group.append(InputMediaPhoto(
                            media=FSInputFile(media_path),
                            caption=caption
                        ))
                if media_group:
                    if len(media_group) == 1:
                        item = media_group[0]
                        if isinstance(item, InputMediaPhoto):
                            await bot.send_photo(
                                chat_id=chat_id,
                                photo=item.media,
                                caption=item.caption
                            )
                        else:
                            await bot.send_video(
                                chat_id=chat_id,
                                video=item.media,
                                caption=item.caption
                            )
                    else:
                        await bot.send_media_group(chat_id=chat_id, media=media_group)
                    if batch_start + 10 < total:
                        await asyncio.sleep(1)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total} —Ñ–∞–π–ª–æ–≤")
            return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False
    return False
# --- /–ù–û–í–û–ï (Instagram Content Sending) ---


# === üì§ TIKTOK –§–û–¢–û ===
async def download_tiktok_photos(url: str) -> Tuple[Optional[List[str]], str]:
    try:
        clean_url = url.split('?')[0]
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Referer': 'https://www.tiktok.com/',
        }
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.get(clean_url, headers=headers, allow_redirects=True) as resp:
                if resp.status != 200:
                    return None, f"‚ùå TikTok –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}"
                html = await resp.text()
        json_match = re.search(r'<script id="__UNIVERSAL_DATA_FOR_REHYDRATION__" type="application/json">({.*})</script>', html)
        if not json_match:
            return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON-–±–ª–æ–∫"
        try:
            data = json.loads(json_match.group(1))
            item_info = data.get('__DEFAULT_SCOPE__', {}).get('webapp.photo.detail', {}).get('itemInfo', {})
            image_post = item_info.get('imagePost', {})
            images = image_post.get('images', [])
        except Exception as e:
            return None, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
        if not images:
            return None, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        photos = []
        for i, img in enumerate(images[:10]):
            img_url = img.get('imageURL', {}).get('urlList', [])
            if not img_url:
                continue
            photo_path = os.path.join(tempfile.gettempdir(), f"tiktok_photo_{i}.jpg")
            if await download_file(img_url[0], photo_path, timeout=15):
                photos.append(photo_path)
        if photos:
            return (photos, "üì∏ TikTok")
        else:
            return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ"
    except Exception as e:
        return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}"


# === üì§ –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –í–ò–î–ï–û (YouTube Playwright) ===
async def download_video(url: str, quality: str = "best", platform: str = "youtube") -> Tuple[Optional[str], Optional[str]]: # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (file_path, error_message)
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ (YouTube, TikTok) —á–µ—Ä–µ–∑ yt-dlp"""
    try:
        logger.info(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å {platform.upper()} (–∫–∞—á–µ—Å—Ç–≤–æ={quality})...")
        # –†–µ—à–∞–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ YouTube cookies. TikTok - –Ω–µ—Ç.
        use_yt_cookies = (platform.lower() == 'youtube')
        ydl_opts = get_ydl_opts(quality, use_youtube_cookies=use_yt_cookies) # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            temp_file = ydl.prepare_filename(info)
            if temp_file and os.path.exists(temp_file):
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {Path(temp_file).name}")
                return temp_file, None # –£—Å–ø–µ—à–Ω–æ
    except yt_dlp.DownloadError as e:
        error_str = str(e)
        logger.error(f"‚ùå yt-dlp ({platform}): {error_str}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        if "Sign in to confirm you're not a bot" in error_str or "requires authentication" in error_str.lower():
             logger.info("üîÑ –û—à–∏–±–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º Playwright...")
             return None, "auth_required" # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—à–∏–±–∫–∏
        else:
             return None, error_str # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {platform}: {e}")
        return None, str(e) # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    return None, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"


# --- –ù–û–í–û–ï (YouTube Playwright) ---
async def download_youtube_with_playwright(url: str, quality: str = "best") -> Optional[str]:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Playwright –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è YouTube, –∑–∞—Ç–µ–º yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è,
    –Ω–∞–¥–µ—è—Å—å, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –ø–æ–º–æ–≥ –æ–±–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    global YT_CONTEXT
    if not YT_PLAYWRIGHT_READY or not YT_CONTEXT:
        logger.error("‚ùå YouTube Playwright –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None

    page: Optional[Page] = None
    temp_cookies_file = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫—É–∫–∏
    try:
        logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é YouTube –≤ Playwright –¥–ª—è {url}")
        page = await YT_CONTEXT.new_page()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
        page.set_default_timeout(60000) # 60 —Å–µ–∫—É–Ω–¥
        page.set_default_navigation_timeout(60000)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ URL
        await page.goto(url, wait_until='networkidle')
        logger.info("üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –≤–∏–¥–µ–æ
        await page.wait_for_selector('video, #player', timeout=10000)
        logger.info("‚úÖ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        # (–≠—Ç–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        page_title = await page.title()
        if "Sign in" in page_title or "not a bot" in page.content():
             logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Playwright")
             # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—ë —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å yt-dlp, –Ω–æ —Å –∫—É–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
             # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
             cookies = await YT_CONTEXT.cookies()
             logger.info(f"üç™ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(cookies)} –∫—É–∫–∏ –∏–∑ Playwright –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
             # yt-dlp –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏, –Ω–æ –ø—Ä–æ—â–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
             import tempfile # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
             temp_cookies_file = Path(tempfile.mktemp(suffix='.txt', prefix='yt_cookies_'))
             with open(temp_cookies_file, 'w', encoding='utf-8') as f:
                 f.write("# Netscape HTTP Cookie File\n")
                 for cookie in cookies:
                     # –§–æ—Ä–º–∞—Ç: domain flag path secure expiration name value
                     # –£–ø—Ä–æ—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç, yt-dlp –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å
                     f.write(f"{cookie['domain']}\tTRUE\t{cookie['path']}\t{str(cookie['secure']).upper()}\t{cookie['expires'] or 0}\t{cookie['name']}\t{cookie['value']}\n")

             # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–ª—è yt-dlp
             ydl_opts = get_ydl_opts(quality, use_youtube_cookies=False) # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
             ydl_opts['cookiefile'] = str(temp_cookies_file) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
             logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright...")
             with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                 info = ydl.extract_info(url, download=True)
                 temp_file = ydl.prepare_filename(info)
                 if temp_file and os.path.exists(temp_file):
                     logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright: {Path(temp_file).name}")
                     # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—É–∫–∏
                     # temp_cookies_file.unlink(missing_ok=True) # –£–¥–∞–ª–∏–º –≤ finally
                     return temp_file
                 else:
                     logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–∫–∏ –∏–∑ Playwright")
             # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—É–∫–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
             # temp_cookies_file.unlink(missing_ok=True) # –£–¥–∞–ª–∏–º –≤ finally
             return None

        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å yt-dlp —Å –∫—É–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Playwright
        # –≠—Ç–æ –º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–º–æ–≥ "–æ–∂–∏—Ç—å" –∫—É–∫–∏
        cookies = await YT_CONTEXT.cookies()
        logger.info(f"üç™ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(cookies)} –∫—É–∫–∏ –∏–∑ Playwright –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)")
        import tempfile # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        temp_cookies_file = Path(tempfile.mktemp(suffix='.txt', prefix='yt_cookies_alt_'))
        with open(temp_cookies_file, 'w', encoding='utf-8') as f:
             f.write("# Netscape HTTP Cookie File\n")
             for cookie in cookies:
                 f.write(f"{cookie['domain']}\tTRUE\t{cookie['path']}\t{str(cookie['secure']).upper()}\t{cookie['expires'] or 0}\t{cookie['name']}\t{cookie['value']}\n")

        ydl_opts = get_ydl_opts(quality, use_youtube_cookies=False)
        ydl_opts['cookiefile'] = str(temp_cookies_file)
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)...")
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
             info = ydl.extract_info(url, download=True)
             temp_file = ydl.prepare_filename(info)
             if temp_file and os.path.exists(temp_file):
                 logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ yt-dlp —Å –∫—É–∫–∏ –∏–∑ Playwright (–∞–ª—å—Ç): {Path(temp_file).name}")
                 # temp_cookies_file.unlink(missing_ok=True) # –£–¥–∞–ª–∏–º –≤ finally
                 return temp_file
             else:
                 logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª (–∞–ª—å—Ç. —Å–ø–æ—Å–æ–±)")
        # temp_cookies_file.unlink(missing_ok=True) # –£–¥–∞–ª–∏–º –≤ finally
        return None


    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_youtube_with_playwright: {e}")
    finally:
        if page:
            await page.close()
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—É–∫–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if temp_cookies_file and temp_cookies_file.exists():
            temp_cookies_file.unlink(missing_ok=True)
    return None
# --- /–ù–û–í–û–ï (YouTube Playwright) ---


# === üì§ –û–¢–ü–†–ê–í–ö–ê –í–ò–î–ï–û ===
async def send_video_or_message(chat_id: int, file_path: str, caption: str = "") -> bool:
    file_size = Path(file_path).stat().st_size
    size_mb = file_size / (1024 * 1024)
    if size_mb <= 50:
        try:
            await bot.send_video(chat_id=chat_id, video=FSInputFile(file_path), caption=caption)
            logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({size_mb:.1f} –ú–ë)")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    await bot.send_message(
        chat_id=chat_id,
        text=f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size_mb:.1f} –ú–ë)"
    )
    return False
# === üß≠ –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    )
def settings_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –õ—É—á—à–µ–µ")],
            [KeyboardButton(text="üé¨ 1080p"), KeyboardButton(text="üì∫ 720p")],
            [KeyboardButton(text="‚ö° 480p"), KeyboardButton(text="üì± 360p")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
# === üöÄ –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    current_quality = get_quality_setting(message.from_user.id)
    welcome_text = (
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!</b>\n"
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram (–ø–æ—Å—Ç—ã, reels, –∫–∞—Ä—É—Å–µ–ª–∏)\n"
        "üì≤ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current_quality.upper()}</b>"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard(), parse_mode="HTML")
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    await state.set_state(VideoStates.choosing_quality)
    current = get_quality_setting(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current.upper()}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )
@dp.message(VideoStates.choosing_quality, F.text.in_([
    "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p"
]))
async def set_quality(message: types.Message, state: FSMContext):
    quality_map = {
        "üåü –õ—É—á—à–µ–µ": "best",
        "üé¨ 1080p": "1080p",
        "üì∫ 720p": "720p",
        "‚ö° 480p": "480p",
        "üì± 360p": "360p"
    }
    set_quality_setting(message.from_user.id, quality_map[message.text])
    await message.answer(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{message.text}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()
@dp.message(VideoStates.choosing_quality, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    current_quality = get_quality_setting(message.from_user.id)
    await message.answer(
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: <b>{current_quality.upper()}</b>",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
# === üîó –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–°–´–õ–û–ö ===
@dp.message(
    F.text &
    ~F.text.startswith("/") &
    ~F.text.in_([
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "üåü –õ—É—á—à–µ–µ", "üé¨ 1080p", "üì∫ 720p", "‚ö° 480p", "üì± 360p", "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    ])
)
async def handle_link(message: types.Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, TikTok –∏–ª–∏ Instagram")
        return
    await check_rate_limit(message.from_user.id)
    platform = detect_platform(url)
    status_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {platform.upper()}...")
    user_quality = get_quality_setting(message.from_user.id)
    temp_file = None
    temp_photos = []
    status_msg_deleted = False
    async def safe_edit_status(text: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        nonlocal status_msg_deleted
        if not status_msg_deleted:
            try:
                await status_msg.edit_text(text)
            except TelegramBadRequest:
                status_msg_deleted = True
    async def safe_delete_status():
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        nonlocal status_msg_deleted
        if not status_msg_deleted:
            try:
                await status_msg.delete()
                status_msg_deleted = True
            except TelegramBadRequest:
                status_msg_deleted = True
    try:
        # === INSTAGRAM ===
        if platform == 'instagram':
            video_path, photos, description = await download_instagram(url, user_quality, message.from_user.id)
            # –û—à–∏–±–∫–∞
            if description and "‚ùå" in description:
                await safe_edit_status(description)
                return
            # –£—Å–ø–µ—Ö
            if video_path or photos:
                await safe_edit_status("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
                temp_file = video_path
                temp_photos = photos if photos else []
                success = await send_instagram_content(message.chat.id, video_path, photos, description)
                if success:
                    await safe_delete_status()
                else:
                    await safe_edit_status("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
                # –û—á–∏—Å—Ç–∫–∞
                if temp_file:
                    cleanup_file(temp_file)
                if temp_photos:
                    cleanup_files(temp_photos)
                return
            # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å
            await safe_edit_status("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            return
        # === TIKTOK –§–û–¢–û ===
        elif platform == 'tiktok' and '/photo/' in url.lower():
            photos, description = await download_tiktok_photos(url)
            await safe_delete_status()
            if photos:
                temp_photos = photos
                media_group = [
                    InputMediaPhoto(
                        media=FSInputFile(photo),
                        caption=description if i == 0 else None
                    )
                    for i, photo in enumerate(photos[:10])
                ]
                await bot.send_media_group(chat_id=message.chat.id, media=media_group)
                cleanup_files(photos)
            else:
                await message.answer(description)
            return
        # === YOUTUBE / TIKTOK –í–ò–î–ï–û ===
        # temp_file = await download_video(url, user_quality, platform) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
        temp_file, error_msg = await download_video(url, user_quality, platform) # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (file_path, error_msg)
        # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —ç—Ç–æ YouTube
        if error_msg == "auth_required" and platform == 'youtube':
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Playwright –¥–ª—è YouTube...")
            temp_file = await download_youtube_with_playwright(url, user_quality)
            if temp_file:
                error_msg = None # –°–±—Ä–æ—Å–∏–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ Playwright —Å—Ä–∞–±–æ—Ç–∞–ª
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ Playwright"

        if not temp_file or not os.path.exists(temp_file):
            await safe_edit_status(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {error_msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}")
            return

        await safe_edit_status("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        await send_video_or_message(message.chat.id, temp_file)
        await safe_delete_status()
        cleanup_file(temp_file)
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        await safe_edit_status(error_msg)
    finally:
        if temp_file:
            cleanup_file(temp_file)
        if temp_photos:
            cleanup_files(temp_photos)
# === üöÄ –ó–ê–ü–£–°–ö ===
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # --- –ù–û–í–û–ï ---
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Playwright –¥–ª—è Instagram
    await init_instagram_playwright()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Playwright –¥–ª—è YouTube
    await init_youtube_playwright()
    # --- /–ù–û–í–û–ï ---
    if WEBHOOK_HOST:
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler
        import aiohttp.web
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        app = aiohttp.web.Application()
        webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)
        port = int(os.getenv("PORT", 8000))
        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, host="0.0.0.0", port=port)
        await site.start()
        logger.info(f"üì° Webhook-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        try:
            while True:
                await asyncio.sleep(3600)
        except (KeyboardInterrupt, SystemExit):
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await bot.delete_webhook(drop_pending_updates=True)
            await runner.cleanup()
            # --- –ù–û–í–û–ï ---
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Playwright –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if IG_BROWSER:
                logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä Instagram Playwright...")
                await IG_BROWSER.close()
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä YouTube Playwright
            if YT_BROWSER:
                logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä YouTube Playwright...")
                await YT_BROWSER.close()
            # --- /–ù–û–í–û–ï ---
            await bot.session.close()
    else:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é –≤ —Ä—ç–∂–∏–º–µ long polling")
        await dp.start_polling(bot, skip_updates=True) 
if __name__ == "__main__":
    asyncio.run(main())